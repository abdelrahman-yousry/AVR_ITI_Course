
AVR_SERVO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000017ac  00001840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800062  00800062  00001842  2**0
                  ALLOC
  3 .stab         0000219c  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000184c  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_4>
      14:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_7>
      20:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_8>
      24:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__vector_9>
      28:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_10>
      2c:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a0 0b 	call	0x1740	; 0x1740 <main>
      8a:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_enuWriteChannelId>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8c 83       	std	Y+4, r24	; 0x04
      a8:	6d 83       	std	Y+5, r22	; 0x05
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	8b 83       	std	Y+3, r24	; 0x03
      ae:	8c 81       	ldd	r24, Y+4	; 0x04
      b0:	86 95       	lsr	r24
      b2:	86 95       	lsr	r24
      b4:	86 95       	lsr	r24
      b6:	8a 83       	std	Y+2, r24	; 0x02
      b8:	8c 81       	ldd	r24, Y+4	; 0x04
      ba:	87 70       	andi	r24, 0x07	; 7
      bc:	89 83       	std	Y+1, r24	; 0x01
      be:	8c 81       	ldd	r24, Y+4	; 0x04
      c0:	81 32       	cpi	r24, 0x21	; 33
      c2:	08 f0       	brcs	.+2      	; 0xc6 <Dio_enuWriteChannelId+0x34>
      c4:	e1 c0       	rjmp	.+450    	; 0x288 <Dio_enuWriteChannelId+0x1f6>
      c6:	8a 81       	ldd	r24, Y+2	; 0x02
      c8:	28 2f       	mov	r18, r24
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	3f 83       	std	Y+7, r19	; 0x07
      ce:	2e 83       	std	Y+6, r18	; 0x06
      d0:	8e 81       	ldd	r24, Y+6	; 0x06
      d2:	9f 81       	ldd	r25, Y+7	; 0x07
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	91 05       	cpc	r25, r1
      d8:	09 f4       	brne	.+2      	; 0xdc <Dio_enuWriteChannelId+0x4a>
      da:	47 c0       	rjmp	.+142    	; 0x16a <Dio_enuWriteChannelId+0xd8>
      dc:	2e 81       	ldd	r18, Y+6	; 0x06
      de:	3f 81       	ldd	r19, Y+7	; 0x07
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	2c f4       	brge	.+10     	; 0xf0 <Dio_enuWriteChannelId+0x5e>
      e6:	8e 81       	ldd	r24, Y+6	; 0x06
      e8:	9f 81       	ldd	r25, Y+7	; 0x07
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	71 f0       	breq	.+28     	; 0x10a <Dio_enuWriteChannelId+0x78>
      ee:	ce c0       	rjmp	.+412    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
      f0:	2e 81       	ldd	r18, Y+6	; 0x06
      f2:	3f 81       	ldd	r19, Y+7	; 0x07
      f4:	22 30       	cpi	r18, 0x02	; 2
      f6:	31 05       	cpc	r19, r1
      f8:	09 f4       	brne	.+2      	; 0xfc <Dio_enuWriteChannelId+0x6a>
      fa:	67 c0       	rjmp	.+206    	; 0x1ca <Dio_enuWriteChannelId+0x138>
      fc:	8e 81       	ldd	r24, Y+6	; 0x06
      fe:	9f 81       	ldd	r25, Y+7	; 0x07
     100:	83 30       	cpi	r24, 0x03	; 3
     102:	91 05       	cpc	r25, r1
     104:	09 f4       	brne	.+2      	; 0x108 <Dio_enuWriteChannelId+0x76>
     106:	91 c0       	rjmp	.+290    	; 0x22a <Dio_enuWriteChannelId+0x198>
     108:	c1 c0       	rjmp	.+386    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     10a:	8d 81       	ldd	r24, Y+5	; 0x05
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	a1 f4       	brne	.+40     	; 0x138 <Dio_enuWriteChannelId+0xa6>
     110:	ab e3       	ldi	r26, 0x3B	; 59
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	eb e3       	ldi	r30, 0x3B	; 59
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	48 2f       	mov	r20, r24
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	28 2f       	mov	r18, r24
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	02 2e       	mov	r0, r18
     128:	02 c0       	rjmp	.+4      	; 0x12e <Dio_enuWriteChannelId+0x9c>
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	0a 94       	dec	r0
     130:	e2 f7       	brpl	.-8      	; 0x12a <Dio_enuWriteChannelId+0x98>
     132:	84 2b       	or	r24, r20
     134:	8c 93       	st	X, r24
     136:	aa c0       	rjmp	.+340    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	88 23       	and	r24, r24
     13c:	09 f0       	breq	.+2      	; 0x140 <Dio_enuWriteChannelId+0xae>
     13e:	a6 c0       	rjmp	.+332    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     140:	ab e3       	ldi	r26, 0x3B	; 59
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	eb e3       	ldi	r30, 0x3B	; 59
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	48 2f       	mov	r20, r24
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	28 2f       	mov	r18, r24
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	02 2e       	mov	r0, r18
     158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_enuWriteChannelId+0xcc>
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	0a 94       	dec	r0
     160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_enuWriteChannelId+0xc8>
     162:	80 95       	com	r24
     164:	84 23       	and	r24, r20
     166:	8c 93       	st	X, r24
     168:	91 c0       	rjmp	.+290    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     16a:	8d 81       	ldd	r24, Y+5	; 0x05
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	a1 f4       	brne	.+40     	; 0x198 <Dio_enuWriteChannelId+0x106>
     170:	a8 e3       	ldi	r26, 0x38	; 56
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	e8 e3       	ldi	r30, 0x38	; 56
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	48 2f       	mov	r20, r24
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	02 2e       	mov	r0, r18
     188:	02 c0       	rjmp	.+4      	; 0x18e <Dio_enuWriteChannelId+0xfc>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	0a 94       	dec	r0
     190:	e2 f7       	brpl	.-8      	; 0x18a <Dio_enuWriteChannelId+0xf8>
     192:	84 2b       	or	r24, r20
     194:	8c 93       	st	X, r24
     196:	7a c0       	rjmp	.+244    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     198:	8d 81       	ldd	r24, Y+5	; 0x05
     19a:	88 23       	and	r24, r24
     19c:	09 f0       	breq	.+2      	; 0x1a0 <Dio_enuWriteChannelId+0x10e>
     19e:	76 c0       	rjmp	.+236    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     1a0:	a8 e3       	ldi	r26, 0x38	; 56
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e8 e3       	ldi	r30, 0x38	; 56
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	48 2f       	mov	r20, r24
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	02 2e       	mov	r0, r18
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <Dio_enuWriteChannelId+0x12c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Dio_enuWriteChannelId+0x128>
     1c2:	80 95       	com	r24
     1c4:	84 23       	and	r24, r20
     1c6:	8c 93       	st	X, r24
     1c8:	61 c0       	rjmp	.+194    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	a1 f4       	brne	.+40     	; 0x1f8 <Dio_enuWriteChannelId+0x166>
     1d0:	a5 e3       	ldi	r26, 0x35	; 53
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	e5 e3       	ldi	r30, 0x35	; 53
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	48 2f       	mov	r20, r24
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	28 2f       	mov	r18, r24
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	02 2e       	mov	r0, r18
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dio_enuWriteChannelId+0x15c>
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	0a 94       	dec	r0
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Dio_enuWriteChannelId+0x158>
     1f2:	84 2b       	or	r24, r20
     1f4:	8c 93       	st	X, r24
     1f6:	4a c0       	rjmp	.+148    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     1f8:	8d 81       	ldd	r24, Y+5	; 0x05
     1fa:	88 23       	and	r24, r24
     1fc:	09 f0       	breq	.+2      	; 0x200 <Dio_enuWriteChannelId+0x16e>
     1fe:	46 c0       	rjmp	.+140    	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     200:	a5 e3       	ldi	r26, 0x35	; 53
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	e5 e3       	ldi	r30, 0x35	; 53
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	48 2f       	mov	r20, r24
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	28 2f       	mov	r18, r24
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	02 2e       	mov	r0, r18
     218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_enuWriteChannelId+0x18c>
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	0a 94       	dec	r0
     220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_enuWriteChannelId+0x188>
     222:	80 95       	com	r24
     224:	84 23       	and	r24, r20
     226:	8c 93       	st	X, r24
     228:	31 c0       	rjmp	.+98     	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     22a:	8d 81       	ldd	r24, Y+5	; 0x05
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	a1 f4       	brne	.+40     	; 0x258 <Dio_enuWriteChannelId+0x1c6>
     230:	a2 e3       	ldi	r26, 0x32	; 50
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	e2 e3       	ldi	r30, 0x32	; 50
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	48 2f       	mov	r20, r24
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	28 2f       	mov	r18, r24
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	02 2e       	mov	r0, r18
     248:	02 c0       	rjmp	.+4      	; 0x24e <Dio_enuWriteChannelId+0x1bc>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	0a 94       	dec	r0
     250:	e2 f7       	brpl	.-8      	; 0x24a <Dio_enuWriteChannelId+0x1b8>
     252:	84 2b       	or	r24, r20
     254:	8c 93       	st	X, r24
     256:	1a c0       	rjmp	.+52     	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     258:	8d 81       	ldd	r24, Y+5	; 0x05
     25a:	88 23       	and	r24, r24
     25c:	b9 f4       	brne	.+46     	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     25e:	a2 e3       	ldi	r26, 0x32	; 50
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e2 e3       	ldi	r30, 0x32	; 50
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	48 2f       	mov	r20, r24
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	28 2f       	mov	r18, r24
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 2e       	mov	r0, r18
     276:	02 c0       	rjmp	.+4      	; 0x27c <Dio_enuWriteChannelId+0x1ea>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	0a 94       	dec	r0
     27e:	e2 f7       	brpl	.-8      	; 0x278 <Dio_enuWriteChannelId+0x1e6>
     280:	80 95       	com	r24
     282:	84 23       	and	r24, r20
     284:	8c 93       	st	X, r24
     286:	02 c0       	rjmp	.+4      	; 0x28c <Dio_enuWriteChannelId+0x1fa>
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	8b 83       	std	Y+3, r24	; 0x03
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	27 96       	adiw	r28, 0x07	; 7
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	08 95       	ret

000002a0 <Dio_enuReadChannelId>:
  Read from pin
  take two args Copy_u8ChannedId and Add_pu8ChannelLevel
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadChannelId(u8 Copy_u8ChannedId, pu8 Add_pu8ChannelLevel)
{
     2a0:	df 93       	push	r29
     2a2:	cf 93       	push	r28
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	28 97       	sbiw	r28, 0x08	; 8
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	8c 83       	std	Y+4, r24	; 0x04
     2b6:	7e 83       	std	Y+6, r23	; 0x06
     2b8:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     2be:	8c 81       	ldd	r24, Y+4	; 0x04
     2c0:	81 32       	cpi	r24, 0x21	; 33
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <Dio_enuReadChannelId+0x26>
     2c4:	79 c0       	rjmp	.+242    	; 0x3b8 <Dio_enuReadChannelId+0x118>
	{
		u8 Loc_u8Port = (Copy_u8ChannedId/8) ;
     2c6:	8c 81       	ldd	r24, Y+4	; 0x04
     2c8:	86 95       	lsr	r24
     2ca:	86 95       	lsr	r24
     2cc:	86 95       	lsr	r24
     2ce:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = (Copy_u8ChannedId%8)  ;
     2d0:	8c 81       	ldd	r24, Y+4	; 0x04
     2d2:	87 70       	andi	r24, 0x07	; 7
     2d4:	89 83       	std	Y+1, r24	; 0x01

		switch (Loc_u8Port)
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	28 2f       	mov	r18, r24
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	38 87       	std	Y+8, r19	; 0x08
     2de:	2f 83       	std	Y+7, r18	; 0x07
     2e0:	4f 81       	ldd	r20, Y+7	; 0x07
     2e2:	58 85       	ldd	r21, Y+8	; 0x08
     2e4:	41 30       	cpi	r20, 0x01	; 1
     2e6:	51 05       	cpc	r21, r1
     2e8:	59 f1       	breq	.+86     	; 0x340 <Dio_enuReadChannelId+0xa0>
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	82 30       	cpi	r24, 0x02	; 2
     2f0:	91 05       	cpc	r25, r1
     2f2:	34 f4       	brge	.+12     	; 0x300 <Dio_enuReadChannelId+0x60>
     2f4:	2f 81       	ldd	r18, Y+7	; 0x07
     2f6:	38 85       	ldd	r19, Y+8	; 0x08
     2f8:	21 15       	cp	r18, r1
     2fa:	31 05       	cpc	r19, r1
     2fc:	69 f0       	breq	.+26     	; 0x318 <Dio_enuReadChannelId+0x78>
     2fe:	5e c0       	rjmp	.+188    	; 0x3bc <Dio_enuReadChannelId+0x11c>
     300:	4f 81       	ldd	r20, Y+7	; 0x07
     302:	58 85       	ldd	r21, Y+8	; 0x08
     304:	42 30       	cpi	r20, 0x02	; 2
     306:	51 05       	cpc	r21, r1
     308:	79 f1       	breq	.+94     	; 0x368 <Dio_enuReadChannelId+0xc8>
     30a:	8f 81       	ldd	r24, Y+7	; 0x07
     30c:	98 85       	ldd	r25, Y+8	; 0x08
     30e:	83 30       	cpi	r24, 0x03	; 3
     310:	91 05       	cpc	r25, r1
     312:	09 f4       	brne	.+2      	; 0x316 <Dio_enuReadChannelId+0x76>
     314:	3d c0       	rjmp	.+122    	; 0x390 <Dio_enuReadChannelId+0xf0>
     316:	52 c0       	rjmp	.+164    	; 0x3bc <Dio_enuReadChannelId+0x11c>
		{
		case PORT_A:
			*Add_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
     318:	e9 e3       	ldi	r30, 0x39	; 57
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	88 2f       	mov	r24, r24
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	a9 01       	movw	r20, r18
     32a:	02 c0       	rjmp	.+4      	; 0x330 <Dio_enuReadChannelId+0x90>
     32c:	55 95       	asr	r21
     32e:	47 95       	ror	r20
     330:	8a 95       	dec	r24
     332:	e2 f7       	brpl	.-8      	; 0x32c <Dio_enuReadChannelId+0x8c>
     334:	ca 01       	movw	r24, r20
     336:	81 70       	andi	r24, 0x01	; 1
     338:	ed 81       	ldd	r30, Y+5	; 0x05
     33a:	fe 81       	ldd	r31, Y+6	; 0x06
     33c:	80 83       	st	Z, r24
     33e:	3e c0       	rjmp	.+124    	; 0x3bc <Dio_enuReadChannelId+0x11c>
			break;
		case PORT_B:
			*Add_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
     340:	e6 e3       	ldi	r30, 0x36	; 54
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	28 2f       	mov	r18, r24
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	a9 01       	movw	r20, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <Dio_enuReadChannelId+0xb8>
     354:	55 95       	asr	r21
     356:	47 95       	ror	r20
     358:	8a 95       	dec	r24
     35a:	e2 f7       	brpl	.-8      	; 0x354 <Dio_enuReadChannelId+0xb4>
     35c:	ca 01       	movw	r24, r20
     35e:	81 70       	andi	r24, 0x01	; 1
     360:	ed 81       	ldd	r30, Y+5	; 0x05
     362:	fe 81       	ldd	r31, Y+6	; 0x06
     364:	80 83       	st	Z, r24
     366:	2a c0       	rjmp	.+84     	; 0x3bc <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_C:
			*Add_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
     368:	e3 e3       	ldi	r30, 0x33	; 51
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	28 2f       	mov	r18, r24
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a9 01       	movw	r20, r18
     37a:	02 c0       	rjmp	.+4      	; 0x380 <Dio_enuReadChannelId+0xe0>
     37c:	55 95       	asr	r21
     37e:	47 95       	ror	r20
     380:	8a 95       	dec	r24
     382:	e2 f7       	brpl	.-8      	; 0x37c <Dio_enuReadChannelId+0xdc>
     384:	ca 01       	movw	r24, r20
     386:	81 70       	andi	r24, 0x01	; 1
     388:	ed 81       	ldd	r30, Y+5	; 0x05
     38a:	fe 81       	ldd	r31, Y+6	; 0x06
     38c:	80 83       	st	Z, r24
     38e:	16 c0       	rjmp	.+44     	; 0x3bc <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_D:
			*Add_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
     390:	e0 e3       	ldi	r30, 0x30	; 48
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	28 2f       	mov	r18, r24
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	a9 01       	movw	r20, r18
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <Dio_enuReadChannelId+0x108>
     3a4:	55 95       	asr	r21
     3a6:	47 95       	ror	r20
     3a8:	8a 95       	dec	r24
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <Dio_enuReadChannelId+0x104>
     3ac:	ca 01       	movw	r24, r20
     3ae:	81 70       	andi	r24, 0x01	; 1
     3b0:	ed 81       	ldd	r30, Y+5	; 0x05
     3b2:	fe 81       	ldd	r31, Y+6	; 0x06
     3b4:	80 83       	st	Z, r24
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <Dio_enuReadChannelId+0x11c>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
     3bc:	8b 81       	ldd	r24, Y+3	; 0x03

}
     3be:	28 96       	adiw	r28, 0x08	; 8
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	cf 91       	pop	r28
     3cc:	df 91       	pop	r29
     3ce:	08 95       	ret

000003d0 <Dio_enuWritePort>:
  take two args Copy_u8PortID and Copy_u8Level
  return Dio_tenuErrorStatus
 */

Dio_tenuErrorStatus Dio_enuWritePort(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <Dio_enuWritePort+0x6>
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <Dio_enuWritePort+0x8>
     3d8:	0f 92       	push	r0
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	8a 83       	std	Y+2, r24	; 0x02
     3e0:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID<=PORT_SIZE)
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	85 30       	cpi	r24, 0x05	; 5
     3ea:	98 f5       	brcc	.+102    	; 0x452 <Dio_enuWritePort+0x82>
	{
		switch (Copy_u8PortID)
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	28 2f       	mov	r18, r24
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	3d 83       	std	Y+5, r19	; 0x05
     3f4:	2c 83       	std	Y+4, r18	; 0x04
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	9d 81       	ldd	r25, Y+5	; 0x05
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	91 05       	cpc	r25, r1
     3fe:	d1 f0       	breq	.+52     	; 0x434 <Dio_enuWritePort+0x64>
     400:	2c 81       	ldd	r18, Y+4	; 0x04
     402:	3d 81       	ldd	r19, Y+5	; 0x05
     404:	22 30       	cpi	r18, 0x02	; 2
     406:	31 05       	cpc	r19, r1
     408:	2c f4       	brge	.+10     	; 0x414 <Dio_enuWritePort+0x44>
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	9d 81       	ldd	r25, Y+5	; 0x05
     40e:	00 97       	sbiw	r24, 0x00	; 0
     410:	61 f0       	breq	.+24     	; 0x42a <Dio_enuWritePort+0x5a>
     412:	21 c0       	rjmp	.+66     	; 0x456 <Dio_enuWritePort+0x86>
     414:	2c 81       	ldd	r18, Y+4	; 0x04
     416:	3d 81       	ldd	r19, Y+5	; 0x05
     418:	22 30       	cpi	r18, 0x02	; 2
     41a:	31 05       	cpc	r19, r1
     41c:	81 f0       	breq	.+32     	; 0x43e <Dio_enuWritePort+0x6e>
     41e:	8c 81       	ldd	r24, Y+4	; 0x04
     420:	9d 81       	ldd	r25, Y+5	; 0x05
     422:	83 30       	cpi	r24, 0x03	; 3
     424:	91 05       	cpc	r25, r1
     426:	81 f0       	breq	.+32     	; 0x448 <Dio_enuWritePort+0x78>
     428:	16 c0       	rjmp	.+44     	; 0x456 <Dio_enuWritePort+0x86>
		{
		case PORT_A:
			ASSIGN_REG(PORTA,Copy_u8Value);
     42a:	eb e3       	ldi	r30, 0x3B	; 59
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	8b 81       	ldd	r24, Y+3	; 0x03
     430:	80 83       	st	Z, r24
     432:	11 c0       	rjmp	.+34     	; 0x456 <Dio_enuWritePort+0x86>
			break;
		case PORT_B:
			ASSIGN_REG(PORTB,Copy_u8Value);
     434:	e8 e3       	ldi	r30, 0x38	; 56
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	80 83       	st	Z, r24
     43c:	0c c0       	rjmp	.+24     	; 0x456 <Dio_enuWritePort+0x86>
			break ;
		case PORT_C:
			ASSIGN_REG(PORTC,Copy_u8Value);
     43e:	e5 e3       	ldi	r30, 0x35	; 53
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	80 83       	st	Z, r24
     446:	07 c0       	rjmp	.+14     	; 0x456 <Dio_enuWritePort+0x86>
			break ;
		case PORT_D:
			ASSIGN_REG(PORTD,Copy_u8Value);
     448:	e2 e3       	ldi	r30, 0x32	; 50
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	80 83       	st	Z, r24
     450:	02 c0       	rjmp	.+4      	; 0x456 <Dio_enuWritePort+0x86>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPortError;
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
     456:	89 81       	ldd	r24, Y+1	; 0x01
}
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	cf 91       	pop	r28
     464:	df 91       	pop	r29
     466:	08 95       	ret

00000468 <Dio_enuReadPort>:
  Read from port
  take two args Copy_u8PortID and Add_pu8PortValue
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadPort(u8 Copy_u8PortId, pu8 Add_pu8PortValue)
{
     468:	df 93       	push	r29
     46a:	cf 93       	push	r28
     46c:	00 d0       	rcall	.+0      	; 0x46e <Dio_enuReadPort+0x6>
     46e:	00 d0       	rcall	.+0      	; 0x470 <Dio_enuReadPort+0x8>
     470:	00 d0       	rcall	.+0      	; 0x472 <Dio_enuReadPort+0xa>
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	8a 83       	std	Y+2, r24	; 0x02
     478:	7c 83       	std	Y+4, r23	; 0x04
     47a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<=PORT_SIZE)
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	85 30       	cpi	r24, 0x05	; 5
     484:	d8 f5       	brcc	.+118    	; 0x4fc <Dio_enuReadPort+0x94>
	{

		switch (Copy_u8PortId)
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	3e 83       	std	Y+6, r19	; 0x06
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	8d 81       	ldd	r24, Y+5	; 0x05
     492:	9e 81       	ldd	r25, Y+6	; 0x06
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	91 05       	cpc	r25, r1
     498:	e1 f0       	breq	.+56     	; 0x4d2 <Dio_enuReadPort+0x6a>
     49a:	2d 81       	ldd	r18, Y+5	; 0x05
     49c:	3e 81       	ldd	r19, Y+6	; 0x06
     49e:	22 30       	cpi	r18, 0x02	; 2
     4a0:	31 05       	cpc	r19, r1
     4a2:	2c f4       	brge	.+10     	; 0x4ae <Dio_enuReadPort+0x46>
     4a4:	8d 81       	ldd	r24, Y+5	; 0x05
     4a6:	9e 81       	ldd	r25, Y+6	; 0x06
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	61 f0       	breq	.+24     	; 0x4c4 <Dio_enuReadPort+0x5c>
     4ac:	29 c0       	rjmp	.+82     	; 0x500 <Dio_enuReadPort+0x98>
     4ae:	2d 81       	ldd	r18, Y+5	; 0x05
     4b0:	3e 81       	ldd	r19, Y+6	; 0x06
     4b2:	22 30       	cpi	r18, 0x02	; 2
     4b4:	31 05       	cpc	r19, r1
     4b6:	a1 f0       	breq	.+40     	; 0x4e0 <Dio_enuReadPort+0x78>
     4b8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ba:	9e 81       	ldd	r25, Y+6	; 0x06
     4bc:	83 30       	cpi	r24, 0x03	; 3
     4be:	91 05       	cpc	r25, r1
     4c0:	b1 f0       	breq	.+44     	; 0x4ee <Dio_enuReadPort+0x86>
     4c2:	1e c0       	rjmp	.+60     	; 0x500 <Dio_enuReadPort+0x98>
		{
		case PORT_A:
			*Add_pu8PortValue = PORTA;
     4c4:	eb e3       	ldi	r30, 0x3B	; 59
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	eb 81       	ldd	r30, Y+3	; 0x03
     4cc:	fc 81       	ldd	r31, Y+4	; 0x04
     4ce:	80 83       	st	Z, r24
     4d0:	17 c0       	rjmp	.+46     	; 0x500 <Dio_enuReadPort+0x98>
			break;
		case PORT_B:
			*Add_pu8PortValue = PORTB;
     4d2:	e8 e3       	ldi	r30, 0x38	; 56
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	eb 81       	ldd	r30, Y+3	; 0x03
     4da:	fc 81       	ldd	r31, Y+4	; 0x04
     4dc:	80 83       	st	Z, r24
     4de:	10 c0       	rjmp	.+32     	; 0x500 <Dio_enuReadPort+0x98>
			break ;
		case PORT_C:
			*Add_pu8PortValue = PORTC;
     4e0:	e5 e3       	ldi	r30, 0x35	; 53
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	eb 81       	ldd	r30, Y+3	; 0x03
     4e8:	fc 81       	ldd	r31, Y+4	; 0x04
     4ea:	80 83       	st	Z, r24
     4ec:	09 c0       	rjmp	.+18     	; 0x500 <Dio_enuReadPort+0x98>
			break ;
		case PORT_D:
			*Add_pu8PortValue =PORTD;
     4ee:	e2 e3       	ldi	r30, 0x32	; 50
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	eb 81       	ldd	r30, Y+3	; 0x03
     4f6:	fc 81       	ldd	r31, Y+4	; 0x04
     4f8:	80 83       	st	Z, r24
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <Dio_enuReadPort+0x98>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
     500:	89 81       	ldd	r24, Y+1	; 0x01

}
     502:	26 96       	adiw	r28, 0x06	; 6
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	cf 91       	pop	r28
     510:	df 91       	pop	r29
     512:	08 95       	ret

00000514 <Dio_enuFlipChannel>:
  Toggle Pin
  take one arg Copy_u8ChannedId
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannedId)
{
     514:	df 93       	push	r29
     516:	cf 93       	push	r28
     518:	00 d0       	rcall	.+0      	; 0x51a <Dio_enuFlipChannel+0x6>
     51a:	00 d0       	rcall	.+0      	; 0x51c <Dio_enuFlipChannel+0x8>
     51c:	00 d0       	rcall	.+0      	; 0x51e <Dio_enuFlipChannel+0xa>
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	81 32       	cpi	r24, 0x21	; 33
     52c:	08 f0       	brcs	.+2      	; 0x530 <Dio_enuFlipChannel+0x1c>
     52e:	77 c0       	rjmp	.+238    	; 0x61e <Dio_enuFlipChannel+0x10a>
	{
		u8 Loc_u8Port= Copy_u8ChannedId/8 ;
     530:	8c 81       	ldd	r24, Y+4	; 0x04
     532:	86 95       	lsr	r24
     534:	86 95       	lsr	r24
     536:	86 95       	lsr	r24
     538:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = Copy_u8ChannedId%8 ;
     53a:	8c 81       	ldd	r24, Y+4	; 0x04
     53c:	87 70       	andi	r24, 0x07	; 7
     53e:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8Port)
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	3e 83       	std	Y+6, r19	; 0x06
     548:	2d 83       	std	Y+5, r18	; 0x05
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	9e 81       	ldd	r25, Y+6	; 0x06
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	91 05       	cpc	r25, r1
     552:	49 f1       	breq	.+82     	; 0x5a6 <Dio_enuFlipChannel+0x92>
     554:	2d 81       	ldd	r18, Y+5	; 0x05
     556:	3e 81       	ldd	r19, Y+6	; 0x06
     558:	22 30       	cpi	r18, 0x02	; 2
     55a:	31 05       	cpc	r19, r1
     55c:	2c f4       	brge	.+10     	; 0x568 <Dio_enuFlipChannel+0x54>
     55e:	8d 81       	ldd	r24, Y+5	; 0x05
     560:	9e 81       	ldd	r25, Y+6	; 0x06
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	61 f0       	breq	.+24     	; 0x57e <Dio_enuFlipChannel+0x6a>
     566:	5d c0       	rjmp	.+186    	; 0x622 <Dio_enuFlipChannel+0x10e>
     568:	2d 81       	ldd	r18, Y+5	; 0x05
     56a:	3e 81       	ldd	r19, Y+6	; 0x06
     56c:	22 30       	cpi	r18, 0x02	; 2
     56e:	31 05       	cpc	r19, r1
     570:	71 f1       	breq	.+92     	; 0x5ce <Dio_enuFlipChannel+0xba>
     572:	8d 81       	ldd	r24, Y+5	; 0x05
     574:	9e 81       	ldd	r25, Y+6	; 0x06
     576:	83 30       	cpi	r24, 0x03	; 3
     578:	91 05       	cpc	r25, r1
     57a:	e9 f1       	breq	.+122    	; 0x5f6 <Dio_enuFlipChannel+0xe2>
     57c:	52 c0       	rjmp	.+164    	; 0x622 <Dio_enuFlipChannel+0x10e>
		{
		case PORT_A:
			TGL_BIT(PORTA,Loc_u8Pin);
     57e:	ab e3       	ldi	r26, 0x3B	; 59
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	eb e3       	ldi	r30, 0x3B	; 59
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	48 2f       	mov	r20, r24
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	02 2e       	mov	r0, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <Dio_enuFlipChannel+0x88>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <Dio_enuFlipChannel+0x84>
     5a0:	84 27       	eor	r24, r20
     5a2:	8c 93       	st	X, r24
     5a4:	3e c0       	rjmp	.+124    	; 0x622 <Dio_enuFlipChannel+0x10e>
			break;
		case PORT_B:
			TGL_BIT(PORTA,Loc_u8Pin);
     5a6:	ab e3       	ldi	r26, 0x3B	; 59
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	eb e3       	ldi	r30, 0x3B	; 59
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	48 2f       	mov	r20, r24
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 2e       	mov	r0, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <Dio_enuFlipChannel+0xb0>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <Dio_enuFlipChannel+0xac>
     5c8:	84 27       	eor	r24, r20
     5ca:	8c 93       	st	X, r24
     5cc:	2a c0       	rjmp	.+84     	; 0x622 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_C:
			TGL_BIT(PORTA,Loc_u8Pin);
     5ce:	ab e3       	ldi	r26, 0x3B	; 59
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	eb e3       	ldi	r30, 0x3B	; 59
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	48 2f       	mov	r20, r24
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	28 2f       	mov	r18, r24
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	02 2e       	mov	r0, r18
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <Dio_enuFlipChannel+0xd8>
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	0a 94       	dec	r0
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <Dio_enuFlipChannel+0xd4>
     5f0:	84 27       	eor	r24, r20
     5f2:	8c 93       	st	X, r24
     5f4:	16 c0       	rjmp	.+44     	; 0x622 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_D:
			TGL_BIT(PORTA,Loc_u8Pin);
     5f6:	ab e3       	ldi	r26, 0x3B	; 59
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	eb e3       	ldi	r30, 0x3B	; 59
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	48 2f       	mov	r20, r24
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	28 2f       	mov	r18, r24
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 2e       	mov	r0, r18
     60e:	02 c0       	rjmp	.+4      	; 0x614 <Dio_enuFlipChannel+0x100>
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	0a 94       	dec	r0
     616:	e2 f7       	brpl	.-8      	; 0x610 <Dio_enuFlipChannel+0xfc>
     618:	84 27       	eor	r24, r20
     61a:	8c 93       	st	X, r24
     61c:	02 c0       	rjmp	.+4      	; 0x622 <Dio_enuFlipChannel+0x10e>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
     622:	8b 81       	ldd	r24, Y+3	; 0x03

}
     624:	26 96       	adiw	r28, 0x06	; 6
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	08 95       	ret

00000636 <Port_enuSetPinDir>:
#include "Port_cfg.h"
#include "Port.h"


Port_tenuErrorStatus Port_enuSetPinDir(u8 copy_u8PinNum, u8 copy_u8PinDir)
{
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	27 97       	sbiw	r28, 0x07	; 7
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	8c 83       	std	Y+4, r24	; 0x04
     64c:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	8b 83       	std	Y+3, r24	; 0x03

	/*make the checking before the logic bec. if there is an error we will return from the function*/
	/*if the number of pins exceed the number of the HW pins*/
	if (copy_u8PinNum>MAX_PIN_NUM)
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	80 32       	cpi	r24, 0x20	; 32
     656:	10 f0       	brcs	.+4      	; 0x65c <Port_enuSetPinDir+0x26>
	{
		/*pin number error */
		Loc_ErrorStatus = Port_enuPinError;
     658:	1b 82       	std	Y+3, r1	; 0x03
     65a:	df c0       	rjmp	.+446    	; 0x81a <Port_enuSetPinDir+0x1e4>
	}
	/*if the user pass parameter other than the two directions (input/output)*/
	else if(copy_u8PinDir > 1)
     65c:	8d 81       	ldd	r24, Y+5	; 0x05
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	18 f0       	brcs	.+6      	; 0x668 <Port_enuSetPinDir+0x32>
	{
		/*Direction error*/
		Loc_ErrorStatus = Port_enuPortError;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	8b 83       	std	Y+3, r24	; 0x03
     666:	d9 c0       	rjmp	.+434    	; 0x81a <Port_enuSetPinDir+0x1e4>
	}

	else
	{
		u8 Loc_u8PinIndex = copy_u8PinNum%PIN_AND_PORT_DIVISOR;
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	87 70       	andi	r24, 0x07	; 7
     66c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PortIndex = copy_u8PinNum/PIN_AND_PORT_DIVISOR;
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	86 95       	lsr	r24
     672:	86 95       	lsr	r24
     674:	86 95       	lsr	r24
     676:	89 83       	std	Y+1, r24	; 0x01
		/* switch on the port index and according to the pin Dir the pin will be set or cleared*/
		switch (Loc_u8PortIndex)
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	28 2f       	mov	r18, r24
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	3f 83       	std	Y+7, r19	; 0x07
     680:	2e 83       	std	Y+6, r18	; 0x06
     682:	8e 81       	ldd	r24, Y+6	; 0x06
     684:	9f 81       	ldd	r25, Y+7	; 0x07
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	91 05       	cpc	r25, r1
     68a:	09 f4       	brne	.+2      	; 0x68e <Port_enuSetPinDir+0x58>
     68c:	43 c0       	rjmp	.+134    	; 0x714 <Port_enuSetPinDir+0xde>
     68e:	2e 81       	ldd	r18, Y+6	; 0x06
     690:	3f 81       	ldd	r19, Y+7	; 0x07
     692:	22 30       	cpi	r18, 0x02	; 2
     694:	31 05       	cpc	r19, r1
     696:	2c f4       	brge	.+10     	; 0x6a2 <Port_enuSetPinDir+0x6c>
     698:	8e 81       	ldd	r24, Y+6	; 0x06
     69a:	9f 81       	ldd	r25, Y+7	; 0x07
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	71 f0       	breq	.+28     	; 0x6bc <Port_enuSetPinDir+0x86>
     6a0:	bc c0       	rjmp	.+376    	; 0x81a <Port_enuSetPinDir+0x1e4>
     6a2:	2e 81       	ldd	r18, Y+6	; 0x06
     6a4:	3f 81       	ldd	r19, Y+7	; 0x07
     6a6:	22 30       	cpi	r18, 0x02	; 2
     6a8:	31 05       	cpc	r19, r1
     6aa:	09 f4       	brne	.+2      	; 0x6ae <Port_enuSetPinDir+0x78>
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <Port_enuSetPinDir+0x136>
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	9f 81       	ldd	r25, Y+7	; 0x07
     6b2:	83 30       	cpi	r24, 0x03	; 3
     6b4:	91 05       	cpc	r25, r1
     6b6:	09 f4       	brne	.+2      	; 0x6ba <Port_enuSetPinDir+0x84>
     6b8:	85 c0       	rjmp	.+266    	; 0x7c4 <Port_enuSetPinDir+0x18e>
     6ba:	af c0       	rjmp	.+350    	; 0x81a <Port_enuSetPinDir+0x1e4>
		{
		case PORT_A:
			if(copy_u8PinDir==PORT_u8OUTPUT)
     6bc:	8d 81       	ldd	r24, Y+5	; 0x05
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	a1 f4       	brne	.+40     	; 0x6ea <Port_enuSetPinDir+0xb4>
			{
				SET_BIT(DDRA,Loc_u8PinIndex);
     6c2:	aa e3       	ldi	r26, 0x3A	; 58
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	ea e3       	ldi	r30, 0x3A	; 58
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 81       	ld	r24, Z
     6cc:	48 2f       	mov	r20, r24
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	02 2e       	mov	r0, r18
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <Port_enuSetPinDir+0xaa>
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	0a 94       	dec	r0
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <Port_enuSetPinDir+0xa6>
     6e4:	84 2b       	or	r24, r20
     6e6:	8c 93       	st	X, r24
     6e8:	98 c0       	rjmp	.+304    	; 0x81a <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRA,Loc_u8PinIndex);
     6ea:	aa e3       	ldi	r26, 0x3A	; 58
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	ea e3       	ldi	r30, 0x3A	; 58
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	48 2f       	mov	r20, r24
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	28 2f       	mov	r18, r24
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 2e       	mov	r0, r18
     702:	02 c0       	rjmp	.+4      	; 0x708 <Port_enuSetPinDir+0xd2>
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	0a 94       	dec	r0
     70a:	e2 f7       	brpl	.-8      	; 0x704 <Port_enuSetPinDir+0xce>
     70c:	80 95       	com	r24
     70e:	84 23       	and	r24, r20
     710:	8c 93       	st	X, r24
     712:	83 c0       	rjmp	.+262    	; 0x81a <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_B:
			if(copy_u8PinDir==PORT_u8OUTPUT)
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	a1 f4       	brne	.+40     	; 0x742 <Port_enuSetPinDir+0x10c>
			{
				SET_BIT(DDRB,Loc_u8PinIndex);
     71a:	a7 e3       	ldi	r26, 0x37	; 55
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	e7 e3       	ldi	r30, 0x37	; 55
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	48 2f       	mov	r20, r24
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	28 2f       	mov	r18, r24
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	02 2e       	mov	r0, r18
     732:	02 c0       	rjmp	.+4      	; 0x738 <Port_enuSetPinDir+0x102>
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	0a 94       	dec	r0
     73a:	e2 f7       	brpl	.-8      	; 0x734 <Port_enuSetPinDir+0xfe>
     73c:	84 2b       	or	r24, r20
     73e:	8c 93       	st	X, r24
     740:	6c c0       	rjmp	.+216    	; 0x81a <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRB,Loc_u8PinIndex);
     742:	a7 e3       	ldi	r26, 0x37	; 55
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 e3       	ldi	r30, 0x37	; 55
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	48 2f       	mov	r20, r24
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	28 2f       	mov	r18, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	02 2e       	mov	r0, r18
     75a:	02 c0       	rjmp	.+4      	; 0x760 <Port_enuSetPinDir+0x12a>
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	0a 94       	dec	r0
     762:	e2 f7       	brpl	.-8      	; 0x75c <Port_enuSetPinDir+0x126>
     764:	80 95       	com	r24
     766:	84 23       	and	r24, r20
     768:	8c 93       	st	X, r24
     76a:	57 c0       	rjmp	.+174    	; 0x81a <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_C:
			if(copy_u8PinDir==PORT_u8OUTPUT)
     76c:	8d 81       	ldd	r24, Y+5	; 0x05
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	a1 f4       	brne	.+40     	; 0x79a <Port_enuSetPinDir+0x164>
			{
				SET_BIT(DDRC,Loc_u8PinIndex);
     772:	a4 e3       	ldi	r26, 0x34	; 52
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	e4 e3       	ldi	r30, 0x34	; 52
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	48 2f       	mov	r20, r24
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	28 2f       	mov	r18, r24
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	02 2e       	mov	r0, r18
     78a:	02 c0       	rjmp	.+4      	; 0x790 <Port_enuSetPinDir+0x15a>
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <Port_enuSetPinDir+0x156>
     794:	84 2b       	or	r24, r20
     796:	8c 93       	st	X, r24
     798:	40 c0       	rjmp	.+128    	; 0x81a <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRC,Loc_u8PinIndex);
     79a:	a4 e3       	ldi	r26, 0x34	; 52
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e4 e3       	ldi	r30, 0x34	; 52
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	48 2f       	mov	r20, r24
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	28 2f       	mov	r18, r24
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 2e       	mov	r0, r18
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <Port_enuSetPinDir+0x182>
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	0a 94       	dec	r0
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <Port_enuSetPinDir+0x17e>
     7bc:	80 95       	com	r24
     7be:	84 23       	and	r24, r20
     7c0:	8c 93       	st	X, r24
     7c2:	2b c0       	rjmp	.+86     	; 0x81a <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_D:
			if(copy_u8PinDir==PORT_u8OUTPUT)
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	a1 f4       	brne	.+40     	; 0x7f2 <Port_enuSetPinDir+0x1bc>
			{
				SET_BIT(DDRD,Loc_u8PinIndex);
     7ca:	a1 e3       	ldi	r26, 0x31	; 49
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	e1 e3       	ldi	r30, 0x31	; 49
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	48 2f       	mov	r20, r24
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	28 2f       	mov	r18, r24
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	02 2e       	mov	r0, r18
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <Port_enuSetPinDir+0x1b2>
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	0a 94       	dec	r0
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <Port_enuSetPinDir+0x1ae>
     7ec:	84 2b       	or	r24, r20
     7ee:	8c 93       	st	X, r24
     7f0:	14 c0       	rjmp	.+40     	; 0x81a <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRD,Loc_u8PinIndex);
     7f2:	a1 e3       	ldi	r26, 0x31	; 49
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e1 e3       	ldi	r30, 0x31	; 49
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	48 2f       	mov	r20, r24
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	28 2f       	mov	r18, r24
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 2e       	mov	r0, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <Port_enuSetPinDir+0x1da>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <Port_enuSetPinDir+0x1d6>
     814:	80 95       	com	r24
     816:	84 23       	and	r24, r20
     818:	8c 93       	st	X, r24
		default:
			/*Do nothing*/
			break;
		}
	}
	return Loc_ErrorStatus;
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     81c:	27 96       	adiw	r28, 0x07	; 7
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	cf 91       	pop	r28
     82a:	df 91       	pop	r29
     82c:	08 95       	ret

0000082e <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 copy_u8PinNum, Port_tenuPinMode enu_PinMode)
{
     82e:	df 93       	push	r29
     830:	cf 93       	push	r28
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	2f 97       	sbiw	r28, 0x0f	; 15
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	8c 83       	std	Y+4, r24	; 0x04
     844:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	8b 83       	std	Y+3, r24	; 0x03
	if(enu_PinMode>NUMBER_OF_MODES)
     84a:	8d 81       	ldd	r24, Y+5	; 0x05
     84c:	85 30       	cpi	r24, 0x05	; 5
     84e:	18 f0       	brcs	.+6      	; 0x856 <Port_enuSetPinMode+0x28>
	{
		Loc_ErrorStatus = Port_enuModeError;
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	8b 83       	std	Y+3, r24	; 0x03
     854:	23 c3       	rjmp	.+1606   	; 0xe9c <__stack+0x63d>
	}
	else if(copy_u8PinNum>MAX_PIN_NUM)
     856:	8c 81       	ldd	r24, Y+4	; 0x04
     858:	80 32       	cpi	r24, 0x20	; 32
     85a:	10 f0       	brcs	.+4      	; 0x860 <__stack+0x1>
	{
		Loc_ErrorStatus = Port_enuPinError;
     85c:	1b 82       	std	Y+3, r1	; 0x03
     85e:	1e c3       	rjmp	.+1596   	; 0xe9c <__stack+0x63d>
	}
	else
	{
		u8 Loc_u8PortIndex = (copy_u8PinNum /PIN_AND_PORT_DIVISOR);
     860:	8c 81       	ldd	r24, Y+4	; 0x04
     862:	86 95       	lsr	r24
     864:	86 95       	lsr	r24
     866:	86 95       	lsr	r24
     868:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PinIndex  = (copy_u8PinNum %PIN_AND_PORT_DIVISOR);
     86a:	8c 81       	ldd	r24, Y+4	; 0x04
     86c:	87 70       	andi	r24, 0x07	; 7
     86e:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8PortIndex)
     870:	8a 81       	ldd	r24, Y+2	; 0x02
     872:	28 2f       	mov	r18, r24
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	3f 87       	std	Y+15, r19	; 0x0f
     878:	2e 87       	std	Y+14, r18	; 0x0e
     87a:	8e 85       	ldd	r24, Y+14	; 0x0e
     87c:	9f 85       	ldd	r25, Y+15	; 0x0f
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	91 05       	cpc	r25, r1
     882:	09 f4       	brne	.+2      	; 0x886 <__stack+0x27>
     884:	d4 c0       	rjmp	.+424    	; 0xa2e <__stack+0x1cf>
     886:	2e 85       	ldd	r18, Y+14	; 0x0e
     888:	3f 85       	ldd	r19, Y+15	; 0x0f
     88a:	22 30       	cpi	r18, 0x02	; 2
     88c:	31 05       	cpc	r19, r1
     88e:	2c f4       	brge	.+10     	; 0x89a <__stack+0x3b>
     890:	8e 85       	ldd	r24, Y+14	; 0x0e
     892:	9f 85       	ldd	r25, Y+15	; 0x0f
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	71 f0       	breq	.+28     	; 0x8b4 <__stack+0x55>
     898:	01 c3       	rjmp	.+1538   	; 0xe9c <__stack+0x63d>
     89a:	2e 85       	ldd	r18, Y+14	; 0x0e
     89c:	3f 85       	ldd	r19, Y+15	; 0x0f
     89e:	22 30       	cpi	r18, 0x02	; 2
     8a0:	31 05       	cpc	r19, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	81 c1       	rjmp	.+770    	; 0xba8 <__stack+0x349>
     8a6:	8e 85       	ldd	r24, Y+14	; 0x0e
     8a8:	9f 85       	ldd	r25, Y+15	; 0x0f
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	91 05       	cpc	r25, r1
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <__stack+0x53>
     8b0:	39 c2       	rjmp	.+1138   	; 0xd24 <__stack+0x4c5>
     8b2:	f4 c2       	rjmp	.+1512   	; 0xe9c <__stack+0x63d>
		{
		case PORT_A:
			switch(enu_PinMode)
     8b4:	8d 81       	ldd	r24, Y+5	; 0x05
     8b6:	28 2f       	mov	r18, r24
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	3d 87       	std	Y+13, r19	; 0x0d
     8bc:	2c 87       	std	Y+12, r18	; 0x0c
     8be:	8c 85       	ldd	r24, Y+12	; 0x0c
     8c0:	9d 85       	ldd	r25, Y+13	; 0x0d
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	91 05       	cpc	r25, r1
     8c6:	b9 f0       	breq	.+46     	; 0x8f6 <__stack+0x97>
     8c8:	2c 85       	ldd	r18, Y+12	; 0x0c
     8ca:	3d 85       	ldd	r19, Y+13	; 0x0d
     8cc:	22 30       	cpi	r18, 0x02	; 2
     8ce:	31 05       	cpc	r19, r1
     8d0:	2c f4       	brge	.+10     	; 0x8dc <__stack+0x7d>
     8d2:	8c 85       	ldd	r24, Y+12	; 0x0c
     8d4:	9d 85       	ldd	r25, Y+13	; 0x0d
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	a1 f1       	breq	.+104    	; 0x942 <__stack+0xe3>
     8da:	e0 c2       	rjmp	.+1472   	; 0xe9c <__stack+0x63d>
     8dc:	2c 85       	ldd	r18, Y+12	; 0x0c
     8de:	3d 85       	ldd	r19, Y+13	; 0x0d
     8e0:	22 30       	cpi	r18, 0x02	; 2
     8e2:	31 05       	cpc	r19, r1
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <__stack+0x89>
     8e6:	54 c0       	rjmp	.+168    	; 0x990 <__stack+0x131>
     8e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ea:	9d 85       	ldd	r25, Y+13	; 0x0d
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	91 05       	cpc	r25, r1
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <__stack+0x95>
     8f2:	75 c0       	rjmp	.+234    	; 0x9de <__stack+0x17f>
     8f4:	d3 c2       	rjmp	.+1446   	; 0xe9c <__stack+0x63d>
			{
			case Output_enuHigh:
				SET_BIT(DDRA,Loc_u8PinIndex);
     8f6:	aa e3       	ldi	r26, 0x3A	; 58
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	ea e3       	ldi	r30, 0x3A	; 58
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	48 2f       	mov	r20, r24
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	28 2f       	mov	r18, r24
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0xb3>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	2a 95       	dec	r18
     914:	e2 f7       	brpl	.-8      	; 0x90e <__stack+0xaf>
     916:	84 2b       	or	r24, r20
     918:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
     91a:	ab e3       	ldi	r26, 0x3B	; 59
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	eb e3       	ldi	r30, 0x3B	; 59
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	48 2f       	mov	r20, r24
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	28 2f       	mov	r18, r24
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 2e       	mov	r0, r18
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0xd9>
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <__stack+0xd5>
     93c:	84 2b       	or	r24, r20
     93e:	8c 93       	st	X, r24
     940:	ad c2       	rjmp	.+1370   	; 0xe9c <__stack+0x63d>
				break;
			case Output_enuLow:
				SET_BIT(DDRA,Loc_u8PinIndex);
     942:	aa e3       	ldi	r26, 0x3A	; 58
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	ea e3       	ldi	r30, 0x3A	; 58
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	48 2f       	mov	r20, r24
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	28 2f       	mov	r18, r24
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0xff>
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	2a 95       	dec	r18
     960:	e2 f7       	brpl	.-8      	; 0x95a <__stack+0xfb>
     962:	84 2b       	or	r24, r20
     964:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
     966:	ab e3       	ldi	r26, 0x3B	; 59
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	eb e3       	ldi	r30, 0x3B	; 59
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	48 2f       	mov	r20, r24
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	28 2f       	mov	r18, r24
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	02 2e       	mov	r0, r18
     97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x125>
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	0a 94       	dec	r0
     986:	e2 f7       	brpl	.-8      	; 0x980 <__stack+0x121>
     988:	80 95       	com	r24
     98a:	84 23       	and	r24, r20
     98c:	8c 93       	st	X, r24
     98e:	86 c2       	rjmp	.+1292   	; 0xe9c <__stack+0x63d>
				break;
			case Input_enuPullup:
				CLR_BIT(DDRA,Loc_u8PinIndex);
     990:	aa e3       	ldi	r26, 0x3A	; 58
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	ea e3       	ldi	r30, 0x3A	; 58
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	48 2f       	mov	r20, r24
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	28 2f       	mov	r18, r24
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0x14d>
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	2a 95       	dec	r18
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <__stack+0x149>
     9b0:	80 95       	com	r24
     9b2:	84 23       	and	r24, r20
     9b4:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
     9b6:	ab e3       	ldi	r26, 0x3B	; 59
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	eb e3       	ldi	r30, 0x3B	; 59
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	48 2f       	mov	r20, r24
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	28 2f       	mov	r18, r24
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	02 2e       	mov	r0, r18
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0x175>
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	0a 94       	dec	r0
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <__stack+0x171>
     9d8:	84 2b       	or	r24, r20
     9da:	8c 93       	st	X, r24
     9dc:	5f c2       	rjmp	.+1214   	; 0xe9c <__stack+0x63d>
				break;
			case Input_enuHighImpedence:
				CLR_BIT(DDRA,Loc_u8PinIndex);
     9de:	aa e3       	ldi	r26, 0x3A	; 58
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	ea e3       	ldi	r30, 0x3A	; 58
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	48 2f       	mov	r20, r24
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__stack+0x19b>
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	2a 95       	dec	r18
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <__stack+0x197>
     9fe:	80 95       	com	r24
     a00:	84 23       	and	r24, r20
     a02:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
     a04:	ab e3       	ldi	r26, 0x3B	; 59
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	eb e3       	ldi	r30, 0x3B	; 59
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	48 2f       	mov	r20, r24
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	28 2f       	mov	r18, r24
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	02 2e       	mov	r0, r18
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__stack+0x1c3>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	0a 94       	dec	r0
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <__stack+0x1bf>
     a26:	80 95       	com	r24
     a28:	84 23       	and	r24, r20
     a2a:	8c 93       	st	X, r24
     a2c:	37 c2       	rjmp	.+1134   	; 0xe9c <__stack+0x63d>
				/*do nothing*/
				break;
			}
			break;
			case PORT_B:
				switch(enu_PinMode)
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	28 2f       	mov	r18, r24
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	3b 87       	std	Y+11, r19	; 0x0b
     a36:	2a 87       	std	Y+10, r18	; 0x0a
     a38:	8a 85       	ldd	r24, Y+10	; 0x0a
     a3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	91 05       	cpc	r25, r1
     a40:	b9 f0       	breq	.+46     	; 0xa70 <__stack+0x211>
     a42:	2a 85       	ldd	r18, Y+10	; 0x0a
     a44:	3b 85       	ldd	r19, Y+11	; 0x0b
     a46:	22 30       	cpi	r18, 0x02	; 2
     a48:	31 05       	cpc	r19, r1
     a4a:	2c f4       	brge	.+10     	; 0xa56 <__stack+0x1f7>
     a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a4e:	9b 85       	ldd	r25, Y+11	; 0x0b
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	a1 f1       	breq	.+104    	; 0xabc <__stack+0x25d>
     a54:	23 c2       	rjmp	.+1094   	; 0xe9c <__stack+0x63d>
     a56:	2a 85       	ldd	r18, Y+10	; 0x0a
     a58:	3b 85       	ldd	r19, Y+11	; 0x0b
     a5a:	22 30       	cpi	r18, 0x02	; 2
     a5c:	31 05       	cpc	r19, r1
     a5e:	09 f4       	brne	.+2      	; 0xa62 <__stack+0x203>
     a60:	54 c0       	rjmp	.+168    	; 0xb0a <__stack+0x2ab>
     a62:	8a 85       	ldd	r24, Y+10	; 0x0a
     a64:	9b 85       	ldd	r25, Y+11	; 0x0b
     a66:	83 30       	cpi	r24, 0x03	; 3
     a68:	91 05       	cpc	r25, r1
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__stack+0x20f>
     a6c:	75 c0       	rjmp	.+234    	; 0xb58 <__stack+0x2f9>
     a6e:	16 c2       	rjmp	.+1068   	; 0xe9c <__stack+0x63d>
				{
				case Output_enuHigh:
					SET_BIT(DDRB,Loc_u8PinIndex);
     a70:	a7 e3       	ldi	r26, 0x37	; 55
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e7 e3       	ldi	r30, 0x37	; 55
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	48 2f       	mov	r20, r24
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <__stack+0x22d>
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	2a 95       	dec	r18
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <__stack+0x229>
     a90:	84 2b       	or	r24, r20
     a92:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
     a94:	a8 e3       	ldi	r26, 0x38	; 56
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	e8 e3       	ldi	r30, 0x38	; 56
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	48 2f       	mov	r20, r24
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	28 2f       	mov	r18, r24
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 2e       	mov	r0, r18
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <__stack+0x253>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <__stack+0x24f>
     ab6:	84 2b       	or	r24, r20
     ab8:	8c 93       	st	X, r24
     aba:	f0 c1       	rjmp	.+992    	; 0xe9c <__stack+0x63d>
					break;
				case Output_enuLow:
					SET_BIT(DDRB,Loc_u8PinIndex);
     abc:	a7 e3       	ldi	r26, 0x37	; 55
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e7 e3       	ldi	r30, 0x37	; 55
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	48 2f       	mov	r20, r24
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	28 2f       	mov	r18, r24
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <__stack+0x279>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	2a 95       	dec	r18
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <__stack+0x275>
     adc:	84 2b       	or	r24, r20
     ade:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
     ae0:	a8 e3       	ldi	r26, 0x38	; 56
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e8 e3       	ldi	r30, 0x38	; 56
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	48 2f       	mov	r20, r24
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 2e       	mov	r0, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <__stack+0x29f>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <__stack+0x29b>
     b02:	80 95       	com	r24
     b04:	84 23       	and	r24, r20
     b06:	8c 93       	st	X, r24
     b08:	c9 c1       	rjmp	.+914    	; 0xe9c <__stack+0x63d>
					break;
				case Input_enuPullup:
					CLR_BIT(DDRB,Loc_u8PinIndex);
     b0a:	a7 e3       	ldi	r26, 0x37	; 55
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	e7 e3       	ldi	r30, 0x37	; 55
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	48 2f       	mov	r20, r24
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	28 2f       	mov	r18, r24
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x2c7>
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	2a 95       	dec	r18
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <__stack+0x2c3>
     b2a:	80 95       	com	r24
     b2c:	84 23       	and	r24, r20
     b2e:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
     b30:	a8 e3       	ldi	r26, 0x38	; 56
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	e8 e3       	ldi	r30, 0x38	; 56
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	48 2f       	mov	r20, r24
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	28 2f       	mov	r18, r24
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	02 2e       	mov	r0, r18
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <__stack+0x2ef>
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	0a 94       	dec	r0
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <__stack+0x2eb>
     b52:	84 2b       	or	r24, r20
     b54:	8c 93       	st	X, r24
     b56:	a2 c1       	rjmp	.+836    	; 0xe9c <__stack+0x63d>
					break;
				case Input_enuHighImpedence:
					CLR_BIT(DDRB,Loc_u8PinIndex);
     b58:	a7 e3       	ldi	r26, 0x37	; 55
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e7 e3       	ldi	r30, 0x37	; 55
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	48 2f       	mov	r20, r24
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__stack+0x315>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	2a 95       	dec	r18
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <__stack+0x311>
     b78:	80 95       	com	r24
     b7a:	84 23       	and	r24, r20
     b7c:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
     b7e:	a8 e3       	ldi	r26, 0x38	; 56
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e8 e3       	ldi	r30, 0x38	; 56
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	48 2f       	mov	r20, r24
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	02 2e       	mov	r0, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <__stack+0x33d>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	0a 94       	dec	r0
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <__stack+0x339>
     ba0:	80 95       	com	r24
     ba2:	84 23       	and	r24, r20
     ba4:	8c 93       	st	X, r24
     ba6:	7a c1       	rjmp	.+756    	; 0xe9c <__stack+0x63d>
					/*do nothing*/
					break;
				}
				break ;
				case PORT_C:
					switch(enu_PinMode)
     ba8:	8d 81       	ldd	r24, Y+5	; 0x05
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	39 87       	std	Y+9, r19	; 0x09
     bb0:	28 87       	std	Y+8, r18	; 0x08
     bb2:	88 85       	ldd	r24, Y+8	; 0x08
     bb4:	99 85       	ldd	r25, Y+9	; 0x09
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	91 05       	cpc	r25, r1
     bba:	b9 f0       	breq	.+46     	; 0xbea <__stack+0x38b>
     bbc:	28 85       	ldd	r18, Y+8	; 0x08
     bbe:	39 85       	ldd	r19, Y+9	; 0x09
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	2c f4       	brge	.+10     	; 0xbd0 <__stack+0x371>
     bc6:	88 85       	ldd	r24, Y+8	; 0x08
     bc8:	99 85       	ldd	r25, Y+9	; 0x09
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	a1 f1       	breq	.+104    	; 0xc36 <__stack+0x3d7>
     bce:	66 c1       	rjmp	.+716    	; 0xe9c <__stack+0x63d>
     bd0:	28 85       	ldd	r18, Y+8	; 0x08
     bd2:	39 85       	ldd	r19, Y+9	; 0x09
     bd4:	22 30       	cpi	r18, 0x02	; 2
     bd6:	31 05       	cpc	r19, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <__stack+0x37d>
     bda:	55 c0       	rjmp	.+170    	; 0xc86 <__stack+0x427>
     bdc:	88 85       	ldd	r24, Y+8	; 0x08
     bde:	99 85       	ldd	r25, Y+9	; 0x09
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <__stack+0x389>
     be6:	76 c0       	rjmp	.+236    	; 0xcd4 <__stack+0x475>
     be8:	59 c1       	rjmp	.+690    	; 0xe9c <__stack+0x63d>
					{
					case Output_enuHigh:
						SET_BIT(DDRC,Loc_u8PinIndex);
     bea:	a4 e3       	ldi	r26, 0x34	; 52
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e4 e3       	ldi	r30, 0x34	; 52
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <__stack+0x3a7>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	2a 95       	dec	r18
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <__stack+0x3a3>
     c0a:	84 2b       	or	r24, r20
     c0c:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
     c0e:	a5 e3       	ldi	r26, 0x35	; 53
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e5 e3       	ldi	r30, 0x35	; 53
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <__stack+0x3cd>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <__stack+0x3c9>
     c30:	84 2b       	or	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	33 c1       	rjmp	.+614    	; 0xe9c <__stack+0x63d>
						break;
					case Output_enuLow:
						CLR_BIT(DDRC,Loc_u8PinIndex);
     c36:	a4 e3       	ldi	r26, 0x34	; 52
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e4 e3       	ldi	r30, 0x34	; 52
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__stack+0x3f3>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	2a 95       	dec	r18
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <__stack+0x3ef>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
     c5c:	a5 e3       	ldi	r26, 0x35	; 53
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e5 e3       	ldi	r30, 0x35	; 53
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	48 2f       	mov	r20, r24
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 2e       	mov	r0, r18
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <__stack+0x41b>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <__stack+0x417>
     c7e:	80 95       	com	r24
     c80:	84 23       	and	r24, r20
     c82:	8c 93       	st	X, r24
     c84:	0b c1       	rjmp	.+534    	; 0xe9c <__stack+0x63d>
						break;
					case Input_enuPullup:
						CLR_BIT(DDRC,Loc_u8PinIndex);
     c86:	a4 e3       	ldi	r26, 0x34	; 52
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e4 e3       	ldi	r30, 0x34	; 52
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <__stack+0x443>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	2a 95       	dec	r18
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <__stack+0x43f>
     ca6:	80 95       	com	r24
     ca8:	84 23       	and	r24, r20
     caa:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
     cac:	a5 e3       	ldi	r26, 0x35	; 53
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e5 e3       	ldi	r30, 0x35	; 53
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <__stack+0x46b>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <__stack+0x467>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	e4 c0       	rjmp	.+456    	; 0xe9c <__stack+0x63d>
						break;
					case Input_enuHighImpedence:
						CLR_BIT(DDRC,Loc_u8PinIndex);
     cd4:	a4 e3       	ldi	r26, 0x34	; 52
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e4 e3       	ldi	r30, 0x34	; 52
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <__stack+0x491>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	2a 95       	dec	r18
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <__stack+0x48d>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
     cfa:	a5 e3       	ldi	r26, 0x35	; 53
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e3       	ldi	r30, 0x35	; 53
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <__stack+0x4b9>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <__stack+0x4b5>
     d1c:	80 95       	com	r24
     d1e:	84 23       	and	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	bc c0       	rjmp	.+376    	; 0xe9c <__stack+0x63d>
						/*do nothing*/
						break;
					}
					break ;
					case PORT_D:
						switch(enu_PinMode)
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3f 83       	std	Y+7, r19	; 0x07
     d2c:	2e 83       	std	Y+6, r18	; 0x06
     d2e:	8e 81       	ldd	r24, Y+6	; 0x06
     d30:	9f 81       	ldd	r25, Y+7	; 0x07
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	b9 f0       	breq	.+46     	; 0xd66 <__stack+0x507>
     d38:	2e 81       	ldd	r18, Y+6	; 0x06
     d3a:	3f 81       	ldd	r19, Y+7	; 0x07
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <__stack+0x4ed>
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	9f 81       	ldd	r25, Y+7	; 0x07
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a1 f1       	breq	.+104    	; 0xdb2 <__stack+0x553>
     d4a:	a8 c0       	rjmp	.+336    	; 0xe9c <__stack+0x63d>
     d4c:	2e 81       	ldd	r18, Y+6	; 0x06
     d4e:	3f 81       	ldd	r19, Y+7	; 0x07
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <__stack+0x4f9>
     d56:	54 c0       	rjmp	.+168    	; 0xe00 <__stack+0x5a1>
     d58:	8e 81       	ldd	r24, Y+6	; 0x06
     d5a:	9f 81       	ldd	r25, Y+7	; 0x07
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <__stack+0x505>
     d62:	75 c0       	rjmp	.+234    	; 0xe4e <__stack+0x5ef>
     d64:	9b c0       	rjmp	.+310    	; 0xe9c <__stack+0x63d>
						{
						case Output_enuHigh:
							SET_BIT(DDRD,Loc_u8PinIndex);
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <__stack+0x523>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	2a 95       	dec	r18
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <__stack+0x51f>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8PinIndex);
     d8a:	a2 e3       	ldi	r26, 0x32	; 50
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e2 e3       	ldi	r30, 0x32	; 50
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <__stack+0x549>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <__stack+0x545>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	75 c0       	rjmp	.+234    	; 0xe9c <__stack+0x63d>
							break;
						case Output_enuLow:
							SET_BIT(DDRD,Loc_u8PinIndex);
     db2:	a1 e3       	ldi	r26, 0x31	; 49
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e1 e3       	ldi	r30, 0x31	; 49
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <__stack+0x56f>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	2a 95       	dec	r18
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <__stack+0x56b>
     dd2:	84 2b       	or	r24, r20
     dd4:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
     dd6:	a2 e3       	ldi	r26, 0x32	; 50
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e2 e3       	ldi	r30, 0x32	; 50
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <__stack+0x595>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <__stack+0x591>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	4e c0       	rjmp	.+156    	; 0xe9c <__stack+0x63d>
							break;
						case Input_enuPullup:
							CLR_BIT(DDRD,Loc_u8PinIndex);
     e00:	a1 e3       	ldi	r26, 0x31	; 49
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e1 e3       	ldi	r30, 0x31	; 49
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <__stack+0x5bd>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	2a 95       	dec	r18
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <__stack+0x5b9>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8PinIndex);
     e26:	ab e3       	ldi	r26, 0x3B	; 59
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	eb e3       	ldi	r30, 0x3B	; 59
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <__stack+0x5e5>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <__stack+0x5e1>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	27 c0       	rjmp	.+78     	; 0xe9c <__stack+0x63d>
							break;
						case Input_enuHighImpedence:
							CLR_BIT(DDRD,Loc_u8PinIndex);
     e4e:	a1 e3       	ldi	r26, 0x31	; 49
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e1 e3       	ldi	r30, 0x31	; 49
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <__stack+0x60b>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	2a 95       	dec	r18
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <__stack+0x607>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
     e74:	a2 e3       	ldi	r26, 0x32	; 50
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e2 e3       	ldi	r30, 0x32	; 50
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <__stack+0x633>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <__stack+0x62f>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
							/*do nothing*/
							break;
		}

	}
	return Loc_ErrorStatus;
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e9e:	2f 96       	adiw	r28, 0x0f	; 15
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <Port_vidInit>:

void Port_vidInit(void)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
#define b7_DDRA		1
#define b7_PORTA	0
#endif


	DDRA=CONC(b7_DDRA,b6_DDRA,b5_DDRA,b4_DDRA,b3_DDRA,b2_DDRA,b1_DDRA,b0_DDRA);
     eb8:	ea e3       	ldi	r30, 0x3A	; 58
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	8e ef       	ldi	r24, 0xFE	; 254
     ebe:	80 83       	st	Z, r24
	PORTA=CONC(b7_PORTA,b6_PORTA,b5_PORTA,b4_PORTA,b3_PORTA,b2_PORTA,b1_PORTA,b0_PORTA);
     ec0:	eb e3       	ldi	r30, 0x3B	; 59
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 83       	st	Z, r24
#elif PORT_PIN_15_INIT_CFG == OUTPUT_LOW
#define b15_DDRB		1
#define b15_PORTB		0
#endif

	DDRB=CONC(b15_DDRB,b14_DDRB,b13_DDRB,b12_DDRB,b11_DDRB,b10_DDRB,b9_DDRB,b8_DDRB);
     ec8:	e7 e3       	ldi	r30, 0x37	; 55
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	80 83       	st	Z, r24
	PORTB=CONC(b15_PORTB,b14_PORTB,b13_PORTB,b12_PORTB,b11_PORTB,b10_PORTB,b9_PORTB,b8_PORTB);
     ed0:	e8 e3       	ldi	r30, 0x38	; 56
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	80 83       	st	Z, r24
#elif PORT_PIN_23_INIT_CFG == OUTPUT_LOW
#define b23_DDRC		1
#define b23_PORTC		0
#endif

	DDRC=CONC(b23_DDRC,b22_DDRC,b21_DDRC,b20_DDRC,b19_DDRC,b18_DDRC,b17_DDRC,b16_DDRC);
     ed8:	e4 e3       	ldi	r30, 0x34	; 52
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	80 83       	st	Z, r24
	PORTC=CONC(b23_PORTC,b22_PORTC,b21_PORTC,b20_PORTC,b19_PORTC,b18_PORTC,b17_PORTC,b16_PORTC);
     ee0:	e5 e3       	ldi	r30, 0x35	; 53
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	10 82       	st	Z, r1
#elif PORT_PIN_31_INIT_CFG == OUTPUT_LOW
#define b31_DDRD		1
#define b31_PORTD		0
#endif

	DDRD=CONC(b31_DDRD,b30_DDRD,b29_DDRD,b28_DDRD,b27_DDRD,b26_DDRD,b25_DDRD,b24_DDRD);
     ee6:	e1 e3       	ldi	r30, 0x31	; 49
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	80 83       	st	Z, r24
	PORTD=CONC(b31_PORTD,b30_PORTD,b29_PORTD,b28_PORTD,b27_PORTD,b26_PORTD,b25_PORTD,b24_PORTD);
     eee:	e2 e3       	ldi	r30, 0x32	; 50
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	80 83       	st	Z, r24
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <Pwm_vidInit>:
static u8 Pwm_u8CtcModeFlag[3]={0};
static pfunc Ovf_CallBackfunc[MAX_NUM_OF_OVF_CHANNELS];
static pfunc Ocm_CallBackfunc[MAX_NUM_OF_OCM_CHANNELS];

Pwm_tenuErrorStatus Pwm_vidInit(Pwm_ConfigType* copy_TimeCfg)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <Pwm_vidInit+0x6>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <Pwm_vidInit+0x8>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <Pwm_vidInit+0xa>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_tenuErrorStatus Loc_enuErrorStatus;
	u8 TempVar;
	if (copy_TimeCfg == NULL)
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	11 f4       	brne	.+4      	; 0xf1a <Pwm_vidInit+0x1e>
	{
		Loc_enuErrorStatus = Pwm_enuNullPtr;
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	8a 83       	std	Y+2, r24	; 0x02
	}

	switch(copy_TimeCfg->Pwm_SourceNo)
     f1a:	eb 81       	ldd	r30, Y+3	; 0x03
     f1c:	fc 81       	ldd	r31, Y+4	; 0x04
     f1e:	87 81       	ldd	r24, Z+7	; 0x07
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3e 83       	std	Y+6, r19	; 0x06
     f26:	2d 83       	std	Y+5, r18	; 0x05
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	c1 f1       	breq	.+112    	; 0xfa2 <Pwm_vidInit+0xa6>
     f32:	2d 81       	ldd	r18, Y+5	; 0x05
     f34:	3e 81       	ldd	r19, Y+6	; 0x06
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <Pwm_vidInit+0x42>
     f3c:	62 c0       	rjmp	.+196    	; 0x1002 <Pwm_vidInit+0x106>
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	09 f0       	breq	.+2      	; 0xf48 <Pwm_vidInit+0x4c>
     f46:	89 c0       	rjmp	.+274    	; 0x105a <Pwm_vidInit+0x15e>
	{
	case Pwm_enuSource0:
		TempVar = TCCR0;
     f48:	e3 e5       	ldi	r30, 0x53	; 83
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	89 83       	std	Y+1, r24	; 0x01
		TempVar &= MODE_CLEAR_MASK ;	// will be &=
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	87 7b       	andi	r24, 0xB7	; 183
     f54:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_u16CompareOutputMode|copy_TimeCfg->Pwm_WaveGenerationMode);
     f56:	eb 81       	ldd	r30, Y+3	; 0x03
     f58:	fc 81       	ldd	r31, Y+4	; 0x04
     f5a:	83 81       	ldd	r24, Z+3	; 0x03
     f5c:	94 81       	ldd	r25, Z+4	; 0x04
     f5e:	28 2f       	mov	r18, r24
     f60:	eb 81       	ldd	r30, Y+3	; 0x03
     f62:	fc 81       	ldd	r31, Y+4	; 0x04
     f64:	85 81       	ldd	r24, Z+5	; 0x05
     f66:	96 81       	ldd	r25, Z+6	; 0x06
     f68:	92 2f       	mov	r25, r18
     f6a:	98 2b       	or	r25, r24
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	89 2b       	or	r24, r25
     f70:	89 83       	std	Y+1, r24	; 0x01
		TCCR0 = TempVar;
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	80 83       	st	Z, r24
		TIMSK |=(copy_TimeCfg->Pwm_u8OvfInterruptControl|copy_TimeCfg->Pwm_u8OcmInterruptControl);
     f7a:	a9 e5       	ldi	r26, 0x59	; 89
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e9 e5       	ldi	r30, 0x59	; 89
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	20 81       	ld	r18, Z
     f84:	eb 81       	ldd	r30, Y+3	; 0x03
     f86:	fc 81       	ldd	r31, Y+4	; 0x04
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	eb 81       	ldd	r30, Y+3	; 0x03
     f8c:	fc 81       	ldd	r31, Y+4	; 0x04
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	89 2b       	or	r24, r25
     f92:	82 2b       	or	r24, r18
     f94:	8c 93       	st	X, r24
		Pwm_u8arrClk_Prescaler[Pwm_enuSource0]=copy_TimeCfg->Pwm_u8Clk;
     f96:	eb 81       	ldd	r30, Y+3	; 0x03
     f98:	fc 81       	ldd	r31, Y+4	; 0x04
     f9a:	80 81       	ld	r24, Z
     f9c:	80 93 65 00 	sts	0x0065, r24
     fa0:	5c c0       	rjmp	.+184    	; 0x105a <Pwm_vidInit+0x15e>
		break;
	case Pwm_enuSource1:
		TempVar = TCCR1A ;
     fa2:	ef e4       	ldi	r30, 0x4F	; 79
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_WaveGenerationMode&PWM_TCCR1A_WGM_CLEAR_MASK);
     faa:	eb 81       	ldd	r30, Y+3	; 0x03
     fac:	fc 81       	ldd	r31, Y+4	; 0x04
     fae:	85 81       	ldd	r24, Z+5	; 0x05
     fb0:	96 81       	ldd	r25, Z+6	; 0x06
     fb2:	98 2f       	mov	r25, r24
     fb4:	97 7e       	andi	r25, 0xE7	; 231
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	89 2b       	or	r24, r25
     fba:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_u16CompareOutputMode);
     fbc:	eb 81       	ldd	r30, Y+3	; 0x03
     fbe:	fc 81       	ldd	r31, Y+4	; 0x04
     fc0:	83 81       	ldd	r24, Z+3	; 0x03
     fc2:	94 81       	ldd	r25, Z+4	; 0x04
     fc4:	98 2f       	mov	r25, r24
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	89 2b       	or	r24, r25
     fca:	89 83       	std	Y+1, r24	; 0x01
		TCCR1A = TempVar;
     fcc:	ef e4       	ldi	r30, 0x4F	; 79
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	80 83       	st	Z, r24
		TempVar = TCCR1B;
     fd4:	ee e4       	ldi	r30, 0x4E	; 78
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_WaveGenerationMode&PWM_TCCR1B_WGM_CLEAR_MASK);
     fdc:	eb 81       	ldd	r30, Y+3	; 0x03
     fde:	fc 81       	ldd	r31, Y+4	; 0x04
     fe0:	85 81       	ldd	r24, Z+5	; 0x05
     fe2:	96 81       	ldd	r25, Z+6	; 0x06
     fe4:	98 2f       	mov	r25, r24
     fe6:	9c 7f       	andi	r25, 0xFC	; 252
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	89 2b       	or	r24, r25
     fec:	89 83       	std	Y+1, r24	; 0x01
		Pwm_u8arrClk_Prescaler[Pwm_enuSource1]=copy_TimeCfg->Pwm_u8Clk;
     fee:	eb 81       	ldd	r30, Y+3	; 0x03
     ff0:	fc 81       	ldd	r31, Y+4	; 0x04
     ff2:	80 81       	ld	r24, Z
     ff4:	80 93 66 00 	sts	0x0066, r24
		TCCR1B=TempVar;
     ff8:	ee e4       	ldi	r30, 0x4E	; 78
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 83       	st	Z, r24
    1000:	2c c0       	rjmp	.+88     	; 0x105a <Pwm_vidInit+0x15e>
		break;
	case Pwm_enuSource2:
		TempVar = TCCR2;
    1002:	e5 e4       	ldi	r30, 0x45	; 69
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	89 83       	std	Y+1, r24	; 0x01
		TempVar &= MODE_CLEAR_MASK ;	// will be &=
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	87 7b       	andi	r24, 0xB7	; 183
    100e:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_u16CompareOutputMode|copy_TimeCfg->Pwm_WaveGenerationMode);
    1010:	eb 81       	ldd	r30, Y+3	; 0x03
    1012:	fc 81       	ldd	r31, Y+4	; 0x04
    1014:	83 81       	ldd	r24, Z+3	; 0x03
    1016:	94 81       	ldd	r25, Z+4	; 0x04
    1018:	28 2f       	mov	r18, r24
    101a:	eb 81       	ldd	r30, Y+3	; 0x03
    101c:	fc 81       	ldd	r31, Y+4	; 0x04
    101e:	85 81       	ldd	r24, Z+5	; 0x05
    1020:	96 81       	ldd	r25, Z+6	; 0x06
    1022:	92 2f       	mov	r25, r18
    1024:	98 2b       	or	r25, r24
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	89 2b       	or	r24, r25
    102a:	89 83       	std	Y+1, r24	; 0x01
		TCCR2 = TempVar;
    102c:	e5 e4       	ldi	r30, 0x45	; 69
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	80 83       	st	Z, r24
		TIMSK |=(copy_TimeCfg->Pwm_u8OvfInterruptControl|copy_TimeCfg->Pwm_u8OcmInterruptControl);
    1034:	a9 e5       	ldi	r26, 0x59	; 89
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e9 e5       	ldi	r30, 0x59	; 89
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	20 81       	ld	r18, Z
    103e:	eb 81       	ldd	r30, Y+3	; 0x03
    1040:	fc 81       	ldd	r31, Y+4	; 0x04
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	eb 81       	ldd	r30, Y+3	; 0x03
    1046:	fc 81       	ldd	r31, Y+4	; 0x04
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	89 2b       	or	r24, r25
    104c:	82 2b       	or	r24, r18
    104e:	8c 93       	st	X, r24
		Pwm_u8arrClk_Prescaler[Pwm_enuSource2]=copy_TimeCfg->Pwm_u8Clk;
    1050:	eb 81       	ldd	r30, Y+3	; 0x03
    1052:	fc 81       	ldd	r31, Y+4	; 0x04
    1054:	80 81       	ld	r24, Z
    1056:	80 93 67 00 	sts	0x0067, r24
		break;
	}

	return Loc_enuErrorStatus;
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    105c:	26 96       	adiw	r28, 0x06	; 6
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <Pwm_StartTimer>:

Pwm_tenuErrorStatus Pwm_StartTimer(Pwm_ChannelNum copy_enuCh_Num,  u16 Value)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	27 97       	sbiw	r28, 0x07	; 7
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	7d 83       	std	Y+5, r23	; 0x05
    1086:	6c 83       	std	Y+4, r22	; 0x04
	Pwm_tenuErrorStatus Loc_enuErrorStatus;
	u8 TempVar;

	switch(copy_enuCh_Num)
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	3f 83       	std	Y+7, r19	; 0x07
    1090:	2e 83       	std	Y+6, r18	; 0x06
    1092:	8e 81       	ldd	r24, Y+6	; 0x06
    1094:	9f 81       	ldd	r25, Y+7	; 0x07
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	91 05       	cpc	r25, r1
    109a:	a1 f1       	breq	.+104    	; 0x1104 <Pwm_StartTimer+0x96>
    109c:	2e 81       	ldd	r18, Y+6	; 0x06
    109e:	3f 81       	ldd	r19, Y+7	; 0x07
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <Pwm_StartTimer+0x42>
    10a6:	8e 81       	ldd	r24, Y+6	; 0x06
    10a8:	9f 81       	ldd	r25, Y+7	; 0x07
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	69 f0       	breq	.+26     	; 0x10c8 <Pwm_StartTimer+0x5a>
    10ae:	75 c0       	rjmp	.+234    	; 0x119a <Pwm_StartTimer+0x12c>
    10b0:	2e 81       	ldd	r18, Y+6	; 0x06
    10b2:	3f 81       	ldd	r19, Y+7	; 0x07
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	e1 f1       	breq	.+120    	; 0x1132 <Pwm_StartTimer+0xc4>
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	91 05       	cpc	r25, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <Pwm_StartTimer+0x58>
    10c4:	4d c0       	rjmp	.+154    	; 0x1160 <Pwm_StartTimer+0xf2>
    10c6:	69 c0       	rjmp	.+210    	; 0x119a <Pwm_StartTimer+0x12c>
	{
	case Channel_0:
		if(Value > MAX_VALUE_TIMER0)
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	8f 3f       	cpi	r24, 0xFF	; 255
    10ce:	91 05       	cpc	r25, r1
    10d0:	21 f0       	breq	.+8      	; 0x10da <Pwm_StartTimer+0x6c>
    10d2:	18 f0       	brcs	.+6      	; 0x10da <Pwm_StartTimer+0x6c>
		{
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	8a 83       	std	Y+2, r24	; 0x02
    10d8:	60 c0       	rjmp	.+192    	; 0x119a <Pwm_StartTimer+0x12c>
		}
		else
		{

			OCR0 = Value;
    10da:	ec e5       	ldi	r30, 0x5C	; 92
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	80 83       	st	Z, r24
			TempVar = TCCR0;
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	89 83       	std	Y+1, r24	; 0x01
			TempVar &=~ CLK_CLEAR_MASK;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	88 7f       	andi	r24, 0xF8	; 248
    10ee:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource0];
    10f0:	90 91 65 00 	lds	r25, 0x0065
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	89 2b       	or	r24, r25
    10f8:	89 83       	std	Y+1, r24	; 0x01
			TCCR0 = TempVar;
    10fa:	e3 e5       	ldi	r30, 0x53	; 83
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	4b c0       	rjmp	.+150    	; 0x119a <Pwm_StartTimer+0x12c>
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
		}
		else
		{
			//			SET_BIT(PORTA,0);
			OCR1A = Value;
    1104:	ea e4       	ldi	r30, 0x4A	; 74
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
			TempVar=TCCR1B;// this Reg which have the CLK bits
    1110:	ee e4       	ldi	r30, 0x4E	; 78
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	89 83       	std	Y+1, r24	; 0x01
			TempVar&=~CLK_CLEAR_MASK;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	88 7f       	andi	r24, 0xF8	; 248
    111c:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource1];
    111e:	90 91 66 00 	lds	r25, 0x0066
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	89 2b       	or	r24, r25
    1126:	89 83       	std	Y+1, r24	; 0x01
			TCCR1B=TempVar;
    1128:	ee e4       	ldi	r30, 0x4E	; 78
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	80 83       	st	Z, r24
    1130:	34 c0       	rjmp	.+104    	; 0x119a <Pwm_StartTimer+0x12c>
		{
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
		}
		else
		{
			OCR1B = Value;
    1132:	e8 e4       	ldi	r30, 0x48	; 72
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	80 83       	st	Z, r24
			TempVar=TCCR1B;// this Reg which have the CLK bits
    113e:	ee e4       	ldi	r30, 0x4E	; 78
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	89 83       	std	Y+1, r24	; 0x01
			TempVar&=~CLK_CLEAR_MASK;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	88 7f       	andi	r24, 0xF8	; 248
    114a:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource1];
    114c:	90 91 66 00 	lds	r25, 0x0066
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	89 2b       	or	r24, r25
    1154:	89 83       	std	Y+1, r24	; 0x01
			TCCR1B=TempVar;
    1156:	ee e4       	ldi	r30, 0x4E	; 78
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	80 83       	st	Z, r24
    115e:	1d c0       	rjmp	.+58     	; 0x119a <Pwm_StartTimer+0x12c>

		}
		break;

	case Channel_2:
		if(Value > MAX_VALUE_TIMER2)
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	9d 81       	ldd	r25, Y+5	; 0x05
    1164:	8f 3f       	cpi	r24, 0xFF	; 255
    1166:	91 05       	cpc	r25, r1
    1168:	21 f0       	breq	.+8      	; 0x1172 <Pwm_StartTimer+0x104>
    116a:	18 f0       	brcs	.+6      	; 0x1172 <Pwm_StartTimer+0x104>
		{
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	8a 83       	std	Y+2, r24	; 0x02
    1170:	14 c0       	rjmp	.+40     	; 0x119a <Pwm_StartTimer+0x12c>
		}
		else
		{
			OCR2 = Value;
    1172:	e3 e4       	ldi	r30, 0x43	; 67
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	80 83       	st	Z, r24
			TempVar = TCCR2;
    117a:	e5 e4       	ldi	r30, 0x45	; 69
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	89 83       	std	Y+1, r24	; 0x01
			TempVar &=~ CLK_CLEAR_MASK;
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	88 7f       	andi	r24, 0xF8	; 248
    1186:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource2];
    1188:	90 91 67 00 	lds	r25, 0x0067
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	89 2b       	or	r24, r25
    1190:	89 83       	std	Y+1, r24	; 0x01
			TCCR2 = TempVar;
    1192:	e5 e4       	ldi	r30, 0x45	; 69
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	80 83       	st	Z, r24

	default:

		break;
	}
	return Loc_enuErrorStatus;
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    119c:	27 96       	adiw	r28, 0x07	; 7
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <Pwm_enuSetOutCompareMatchVal>:

Pwm_tenuErrorStatus Pwm_enuSetOutCompareMatchVal(Pwm_ChannelNum copy_enuCh_Num,  u16 Value)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <Pwm_enuSetOutCompareMatchVal+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <Pwm_enuSetOutCompareMatchVal+0x8>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <Pwm_enuSetOutCompareMatchVal+0xa>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	7c 83       	std	Y+4, r23	; 0x04
    11c0:	6b 83       	std	Y+3, r22	; 0x03
	Pwm_tenuErrorStatus Loc_enuErrorStatus= Pwm_enuOk;
    11c2:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_enuCh_Num)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3e 83       	std	Y+6, r19	; 0x06
    11cc:	2d 83       	std	Y+5, r18	; 0x05
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	d1 f0       	breq	.+52     	; 0x120c <Pwm_enuSetOutCompareMatchVal+0x5e>
    11d8:	2d 81       	ldd	r18, Y+5	; 0x05
    11da:	3e 81       	ldd	r19, Y+6	; 0x06
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <Pwm_enuSetOutCompareMatchVal+0x3e>
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	61 f0       	breq	.+24     	; 0x1202 <Pwm_enuSetOutCompareMatchVal+0x54>
    11ea:	22 c0       	rjmp	.+68     	; 0x1230 <Pwm_enuSetOutCompareMatchVal+0x82>
    11ec:	2d 81       	ldd	r18, Y+5	; 0x05
    11ee:	3e 81       	ldd	r19, Y+6	; 0x06
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	91 f0       	breq	.+36     	; 0x121a <Pwm_enuSetOutCompareMatchVal+0x6c>
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <Pwm_enuSetOutCompareMatchVal+0x7a>
    1200:	17 c0       	rjmp	.+46     	; 0x1230 <Pwm_enuSetOutCompareMatchVal+0x82>
	{
	case Channel_0:
		OCR0 = (u8)Value;
    1202:	ec e5       	ldi	r30, 0x5C	; 92
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	80 83       	st	Z, r24
    120a:	12 c0       	rjmp	.+36     	; 0x1230 <Pwm_enuSetOutCompareMatchVal+0x82>
		break;
	case Channel_1A:
		OCR1A = Value;
    120c:	ea e4       	ldi	r30, 0x4A	; 74
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <Pwm_enuSetOutCompareMatchVal+0x82>
		break;
	case Channel_1B:
		OCR1B = Value;
    121a:	e8 e4       	ldi	r30, 0x48	; 72
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	80 83       	st	Z, r24
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <Pwm_enuSetOutCompareMatchVal+0x82>
		break;
	case Channel_2:
		OCR2 = (u8)Value;
    1228:	e3 e4       	ldi	r30, 0x43	; 67
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	80 83       	st	Z, r24
		break;
	}
	return Loc_enuErrorStatus;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	26 96       	adiw	r28, 0x06	; 6
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <Pwm_enuSetIcrVal>:


void Pwm_enuSetIcrVal(u16 Copy_u16Val)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <Pwm_enuSetIcrVal+0x6>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16Val;
    1252:	e6 e4       	ldi	r30, 0x46	; 70
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <Pwm_StopTimer>:


void Pwm_StopTimer(Pwm_enuSourceNum Channel)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <Pwm_StopTimer+0x6>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	89 83       	std	Y+1, r24	; 0x01
	switch(Channel)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3b 83       	std	Y+3, r19	; 0x03
    127e:	2a 83       	std	Y+2, r18	; 0x02
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	89 f0       	breq	.+34     	; 0x12ac <Pwm_StopTimer+0x44>
    128a:	2a 81       	ldd	r18, Y+2	; 0x02
    128c:	3b 81       	ldd	r19, Y+3	; 0x03
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	a1 f0       	breq	.+40     	; 0x12bc <Pwm_StopTimer+0x54>
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	9b 81       	ldd	r25, Y+3	; 0x03
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	b9 f4       	brne	.+46     	; 0x12ca <Pwm_StopTimer+0x62>
	{
	case Pwm_enuSource0:
		TCCR0 &=~(CLK_CLEAR_MASK);
    129c:	a3 e5       	ldi	r26, 0x53	; 83
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e3 e5       	ldi	r30, 0x53	; 83
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 7f       	andi	r24, 0xF8	; 248
    12a8:	8c 93       	st	X, r24
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <Pwm_StopTimer+0x62>
		break;
	case Pwm_enuSource1:
		TCCR1B &=~(CLK_CLEAR_MASK);
    12ac:	ae e4       	ldi	r26, 0x4E	; 78
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ee e4       	ldi	r30, 0x4E	; 78
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	88 7f       	andi	r24, 0xF8	; 248
    12b8:	8c 93       	st	X, r24
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <Pwm_StopTimer+0x62>
		break;
	case Pwm_enuSource2:
		TCCR2 &=~(CLK_CLEAR_MASK);
    12bc:	a5 e4       	ldi	r26, 0x45	; 69
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e5 e4       	ldi	r30, 0x45	; 69
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 7f       	andi	r24, 0xF8	; 248
    12c8:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <Pwm_enuRegisterOvfCbf>:

Pwm_tenuErrorStatus Pwm_enuRegisterOvfCbf(pfunc CallBackFn,Pwm_enuSourceNum Pwm_SrcNum)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <Pwm_enuRegisterOvfCbf+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <Pwm_enuRegisterOvfCbf+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	9b 83       	std	Y+3, r25	; 0x03
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	6c 83       	std	Y+4, r22	; 0x04
	Pwm_tenuErrorStatus Loc_enuStatusError = Pwm_enuOk;
    12e8:	19 82       	std	Y+1, r1	; 0x01

	if(CallBackFn)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	69 f0       	breq	.+26     	; 0x130c <Pwm_enuRegisterOvfCbf+0x36>
	{

		Ovf_CallBackfunc[Pwm_SrcNum] = CallBackFn;
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	fc 01       	movw	r30, r24
    12fe:	e8 59       	subi	r30, 0x98	; 152
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <Pwm_enuRegisterOvfCbf+0x3a>
	}
	else
	{
		Loc_enuStatusError = Pwm_enuNullPtr;
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuStatusError ;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <Pwm_enuRegisterOcmCbf>:

Pwm_tenuErrorStatus Pwm_enuRegisterOcmCbf(pfunc CallBackFn,Pwm_ChannelNum Pwm_SrcNum)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <Pwm_enuRegisterOcmCbf+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <Pwm_enuRegisterOcmCbf+0x8>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9b 83       	std	Y+3, r25	; 0x03
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	6c 83       	std	Y+4, r22	; 0x04
	Pwm_tenuErrorStatus Loc_enuStatusError = Pwm_enuOk;
    1332:	19 82       	std	Y+1, r1	; 0x01

	if(CallBackFn)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	9b 81       	ldd	r25, Y+3	; 0x03
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	69 f0       	breq	.+26     	; 0x1356 <Pwm_enuRegisterOcmCbf+0x36>
	{

		Ocm_CallBackfunc[Pwm_SrcNum] = CallBackFn;
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	fc 01       	movw	r30, r24
    1348:	e2 59       	subi	r30, 0x92	; 146
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	9b 81       	ldd	r25, Y+3	; 0x03
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	80 83       	st	Z, r24
    1354:	02 c0       	rjmp	.+4      	; 0x135a <Pwm_enuRegisterOcmCbf+0x3a>
	}
	else
	{
		Loc_enuStatusError = Pwm_enuNullPtr;
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuStatusError ;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	if(Ovf_CallBackfunc[Pwm_enuSource0])
    1394:	80 91 68 00 	lds	r24, 0x0068
    1398:	90 91 69 00 	lds	r25, 0x0069
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	29 f0       	breq	.+10     	; 0x13aa <__vector_11+0x40>
	{
		Ovf_CallBackfunc[Pwm_enuSource0]();
    13a0:	e0 91 68 00 	lds	r30, 0x0068
    13a4:	f0 91 69 00 	lds	r31, 0x0069
    13a8:	09 95       	icall
	}
	//		SET_BIT(PORTA,PORT_u8PIN_1);
}
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    13d0:	1f 92       	push	r1
    13d2:	0f 92       	push	r0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	if(Ovf_CallBackfunc[Pwm_enuSource1])
    13fa:	80 91 6a 00 	lds	r24, 0x006A
    13fe:	90 91 6b 00 	lds	r25, 0x006B
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	29 f0       	breq	.+10     	; 0x1410 <__vector_9+0x40>
	{
		//	static u16 Loc_u16No_of_ovf=0;
		Ovf_CallBackfunc[Pwm_enuSource1]();
    1406:	e0 91 6a 00 	lds	r30, 0x006A
    140a:	f0 91 6b 00 	lds	r31, 0x006B
    140e:	09 95       	icall
	}
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	bf 91       	pop	r27
    141a:	af 91       	pop	r26
    141c:	9f 91       	pop	r25
    141e:	8f 91       	pop	r24
    1420:	7f 91       	pop	r23
    1422:	6f 91       	pop	r22
    1424:	5f 91       	pop	r21
    1426:	4f 91       	pop	r20
    1428:	3f 91       	pop	r19
    142a:	2f 91       	pop	r18
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	7f 93       	push	r23
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	af 93       	push	r26
    1452:	bf 93       	push	r27
    1454:	ef 93       	push	r30
    1456:	ff 93       	push	r31
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	if(Ovf_CallBackfunc[Pwm_enuSource2])
    1460:	80 91 6c 00 	lds	r24, 0x006C
    1464:	90 91 6d 00 	lds	r25, 0x006D
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	29 f0       	breq	.+10     	; 0x1476 <__vector_5+0x40>
	{
		//	static u16 Loc_u16No_of_ovf=0;
		Ovf_CallBackfunc[Pwm_enuSource2]();
    146c:	e0 91 6c 00 	lds	r30, 0x006C
    1470:	f0 91 6d 00 	lds	r31, 0x006D
    1474:	09 95       	icall
	}
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_0])
    14c6:	80 91 6e 00 	lds	r24, 0x006E
    14ca:	90 91 6f 00 	lds	r25, 0x006F
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	29 f0       	breq	.+10     	; 0x14dc <__vector_10+0x40>
	{
		//			SET_BIT(PORTA,PORT_u8PIN_0);
		Ocm_CallBackfunc[Channel_0]();
    14d2:	e0 91 6e 00 	lds	r30, 0x006E
    14d6:	f0 91 6f 00 	lds	r31, 0x006F
    14da:	09 95       	icall
	}
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_1A])
    152c:	80 91 70 00 	lds	r24, 0x0070
    1530:	90 91 71 00 	lds	r25, 0x0071
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	29 f0       	breq	.+10     	; 0x1542 <__vector_7+0x40>
	{
		//SET_BIT(PORTA,PORT_u8PIN_0);
		Ocm_CallBackfunc[Channel_1A]();
    1538:	e0 91 70 00 	lds	r30, 0x0070
    153c:	f0 91 71 00 	lds	r31, 0x0071
    1540:	09 95       	icall
	}
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_1B])
    1592:	80 91 72 00 	lds	r24, 0x0072
    1596:	90 91 73 00 	lds	r25, 0x0073
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	29 f0       	breq	.+10     	; 0x15a8 <__vector_8+0x40>
	{
		//SET_BIT(PORTA,PORT_u8PIN_0);
		Ocm_CallBackfunc[Channel_1B]();
    159e:	e0 91 72 00 	lds	r30, 0x0072
    15a2:	f0 91 73 00 	lds	r31, 0x0073
    15a6:	09 95       	icall
	}
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_2])
    15f8:	80 91 74 00 	lds	r24, 0x0074
    15fc:	90 91 75 00 	lds	r25, 0x0075
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	29 f0       	breq	.+10     	; 0x160e <__vector_4+0x40>
	{
		Ocm_CallBackfunc[Channel_2]();
    1604:	e0 91 74 00 	lds	r30, 0x0074
    1608:	f0 91 75 00 	lds	r31, 0x0075
    160c:	09 95       	icall
	}
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <Servo_vidInit>:
#include "Serrvo.h"
#include "Servo_cfg.h"
#include "../MCAL/Pwm.h"

void Servo_vidInit(Servo_tCfg Servo_strCfg)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	2d 97       	sbiw	r28, 0x0d	; 13
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	9b 87       	std	Y+11, r25	; 0x0b
    164a:	8a 87       	std	Y+10, r24	; 0x0a
	u8 iterator;
	Pwm_ConfigType Pwm_strCfg;
	for (iterator=0; iterator<SERVO_MAX_NUM ; iterator++)
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	5c c0       	rjmp	.+184    	; 0x1708 <Servo_vidInit+0xd4>
	{

		switch(Servo_strCfg.ChNum)
    1650:	8b 85       	ldd	r24, Y+11	; 0x0b
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3d 87       	std	Y+13, r19	; 0x0d
    1658:	2c 87       	std	Y+12, r18	; 0x0c
    165a:	8c 85       	ldd	r24, Y+12	; 0x0c
    165c:	9d 85       	ldd	r25, Y+13	; 0x0d
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	19 f1       	breq	.+70     	; 0x16aa <Servo_vidInit+0x76>
    1664:	2c 85       	ldd	r18, Y+12	; 0x0c
    1666:	3d 85       	ldd	r19, Y+13	; 0x0d
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	2c f4       	brge	.+10     	; 0x1678 <Servo_vidInit+0x44>
    166e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1670:	9d 85       	ldd	r25, Y+13	; 0x0d
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	61 f0       	breq	.+24     	; 0x168e <Servo_vidInit+0x5a>
    1676:	45 c0       	rjmp	.+138    	; 0x1702 <Servo_vidInit+0xce>
    1678:	2c 85       	ldd	r18, Y+12	; 0x0c
    167a:	3d 85       	ldd	r19, Y+13	; 0x0d
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	19 f1       	breq	.+70     	; 0x16c8 <Servo_vidInit+0x94>
    1682:	8c 85       	ldd	r24, Y+12	; 0x0c
    1684:	9d 85       	ldd	r25, Y+13	; 0x0d
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	69 f1       	breq	.+90     	; 0x16e6 <Servo_vidInit+0xb2>
    168c:	3a c0       	rjmp	.+116    	; 0x1702 <Servo_vidInit+0xce>
		{
		case Pwm_enuCh0:
			Pwm_strCfg.Pwm_SourceNo=Pwm_enuCh0;
    168e:	19 86       	std	Y+9, r1	; 0x09
			Pwm_strCfg.Pwm_WaveGenerationMode=PWM_u8MODE_CH02_FAST_PWM;
    1690:	80 e4       	ldi	r24, 0x40	; 64
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	98 87       	std	Y+8, r25	; 0x08
    1696:	8f 83       	std	Y+7, r24	; 0x07
			Pwm_strCfg.Pwm_u16CompareOutputMode=PWM_u8TIM02_FAST_SET_OC0_ON_COMP_CLEAR_ON_TOP;
    1698:	80 e3       	ldi	r24, 0x30	; 48
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
			Pwm_strCfg.Pwm_u8Clk=PWM_CLK_CH_01_PRESCALER_8;
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	8a 83       	std	Y+2, r24	; 0x02
			Pwm_strCfg.Pwm_u8OcmInterruptControl=0;
    16a4:	1c 82       	std	Y+4, r1	; 0x04
			Pwm_strCfg.Pwm_u8OvfInterruptControl=0;
    16a6:	1b 82       	std	Y+3, r1	; 0x03
    16a8:	2c c0       	rjmp	.+88     	; 0x1702 <Servo_vidInit+0xce>
			break;
		case Pwm_enuCh1A:
			Pwm_strCfg.Pwm_SourceNo=Pwm_enuCh1A;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	89 87       	std	Y+9, r24	; 0x09
			Pwm_strCfg.Pwm_WaveGenerationMode=PWM_u8MODE_CH1_FAST_MODE_8_BIT;
    16ae:	89 e0       	ldi	r24, 0x09	; 9
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	98 87       	std	Y+8, r25	; 0x08
    16b4:	8f 83       	std	Y+7, r24	; 0x07
			Pwm_strCfg.Pwm_u16CompareOutputMode=PWM_u8TIM1_COM_SET_OC1A;
    16b6:	80 ec       	ldi	r24, 0xC0	; 192
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
			Pwm_strCfg.Pwm_u8Clk=PWM_CLK_CH_01_PRESCALER_8;
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	8a 83       	std	Y+2, r24	; 0x02
			Pwm_strCfg.Pwm_u8OcmInterruptControl=0;
    16c2:	1c 82       	std	Y+4, r1	; 0x04
			Pwm_strCfg.Pwm_u8OvfInterruptControl=0;
    16c4:	1b 82       	std	Y+3, r1	; 0x03
    16c6:	1d c0       	rjmp	.+58     	; 0x1702 <Servo_vidInit+0xce>
			break;
		case Pwm_enuCh1B:
			Pwm_strCfg.Pwm_SourceNo=Pwm_enuCh1B;
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	89 87       	std	Y+9, r24	; 0x09
			Pwm_strCfg.Pwm_WaveGenerationMode=PWM_u8MODE_CH1_FAST_MODE_8_BIT;
    16cc:	89 e0       	ldi	r24, 0x09	; 9
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	98 87       	std	Y+8, r25	; 0x08
    16d2:	8f 83       	std	Y+7, r24	; 0x07
			Pwm_strCfg.Pwm_u16CompareOutputMode=PWM_u8TIM1_COM_SET_OC1B;
    16d4:	80 e3       	ldi	r24, 0x30	; 48
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
			Pwm_strCfg.Pwm_u8Clk=PWM_CLK_CH_01_PRESCALER_8;
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	8a 83       	std	Y+2, r24	; 0x02
			Pwm_strCfg.Pwm_u8OcmInterruptControl=0;
    16e0:	1c 82       	std	Y+4, r1	; 0x04
			Pwm_strCfg.Pwm_u8OvfInterruptControl=0;
    16e2:	1b 82       	std	Y+3, r1	; 0x03
    16e4:	0e c0       	rjmp	.+28     	; 0x1702 <Servo_vidInit+0xce>
			break;
		case Pwm_enuCh2:
			Pwm_strCfg.Pwm_SourceNo=Pwm_enuCh2;
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	89 87       	std	Y+9, r24	; 0x09
			Pwm_strCfg.Pwm_WaveGenerationMode=PWM_u8MODE_CH02_FAST_PWM;
    16ea:	80 e4       	ldi	r24, 0x40	; 64
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	98 87       	std	Y+8, r25	; 0x08
    16f0:	8f 83       	std	Y+7, r24	; 0x07
			Pwm_strCfg.Pwm_u16CompareOutputMode=PWM_u8TIM02_FAST_CLEAR_OC0_ON_COMP_SET_ON_TOP;
    16f2:	80 e2       	ldi	r24, 0x20	; 32
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
			Pwm_strCfg.Pwm_u8Clk=PWM_CLK_CH_2_PRESCALER_8;
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	8a 83       	std	Y+2, r24	; 0x02
			Pwm_strCfg.Pwm_u8OcmInterruptControl=0;
    16fe:	1c 82       	std	Y+4, r1	; 0x04
			Pwm_strCfg.Pwm_u8OvfInterruptControl=0;
    1700:	1b 82       	std	Y+3, r1	; 0x03

void Servo_vidInit(Servo_tCfg Servo_strCfg)
{
	u8 iterator;
	Pwm_ConfigType Pwm_strCfg;
	for (iterator=0; iterator<SERVO_MAX_NUM ; iterator++)
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	88 23       	and	r24, r24
    170c:	09 f4       	brne	.+2      	; 0x1710 <Servo_vidInit+0xdc>
    170e:	a0 cf       	rjmp	.-192    	; 0x1650 <Servo_vidInit+0x1c>
			Pwm_strCfg.Pwm_u8OcmInterruptControl=0;
			Pwm_strCfg.Pwm_u8OvfInterruptControl=0;
			break;
		}
	}
}
    1710:	2d 96       	adiw	r28, 0x0d	; 13
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <Servo_vidSetAngle>:


void Servo_vidSetAngle(u16 Servo_u16AngleVal,Pwm_enuChannel ChNum)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <Servo_vidSetAngle+0x6>
    1728:	0f 92       	push	r0
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	6b 83       	std	Y+3, r22	; 0x03

}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <main>:
#include <avr/delay.h>



int main (void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <main+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <main+0x8>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
	Port_vidInit();
    174c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <Port_vidInit>
	u16 Digital;
	u16 flag = 1 ;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01

	while (1)
	{
//		Adc_vidStartConversion();
//		Digital= Adc_u16GetResult();
		flag = 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
		if (Digital<=511 && flag)
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	22 e0       	ldi	r18, 0x02	; 2
    1766:	80 30       	cpi	r24, 0x00	; 0
    1768:	92 07       	cpc	r25, r18
    176a:	58 f4       	brcc	.+22     	; 0x1782 <main+0x42>
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	39 f0       	breq	.+14     	; 0x1782 <main+0x42>
		{
			PORTA=0b00000010;
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	80 83       	st	Z, r24
			flag = 0 ;
    177c:	1a 82       	std	Y+2, r1	; 0x02
    177e:	19 82       	std	Y+1, r1	; 0x01
    1780:	eb cf       	rjmp	.-42     	; 0x1758 <main+0x18>
		}
		else if(Digital>511 && flag != 0)
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	22 e0       	ldi	r18, 0x02	; 2
    1788:	80 30       	cpi	r24, 0x00	; 0
    178a:	92 07       	cpc	r25, r18
    178c:	28 f3       	brcs	.-54     	; 0x1758 <main+0x18>
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	09 f3       	breq	.-62     	; 0x1758 <main+0x18>
		{
			flag = 1 ;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
			PORTA=0b00000100;
    179e:	eb e3       	ldi	r30, 0x3B	; 59
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	80 83       	st	Z, r24
    17a6:	d8 cf       	rjmp	.-80     	; 0x1758 <main+0x18>

000017a8 <_exit>:
    17a8:	f8 94       	cli

000017aa <__stop_program>:
    17aa:	ff cf       	rjmp	.-2      	; 0x17aa <__stop_program>

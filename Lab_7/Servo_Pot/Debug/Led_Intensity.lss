
Led_Intensity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00002786  0000281a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080016a  0080016a  00002924  2**0
                  ALLOC
  3 .stab         0000258c  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cbe  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d8  00000000  00000000  00006cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002114  00000000  00000000  00006ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000121a  00000000  00000000  00008fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001165  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b35c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f7  00000000  00000000  0000b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a2  00000000  00000000  0000b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c195  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_4>
      14:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_7>
      20:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__vector_8>
      24:	0c 94 27 11 	jmp	0x224e	; 0x224e <__vector_9>
      28:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__vector_10>
      2c:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 13 	call	0x269a	; 0x269a <main>
      8a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 13 	jmp	0x272c	; 0x272c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 13 	jmp	0x272c	; 0x272c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 13 	jmp	0x272c	; 0x272c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__epilogue_restores__+0x20>

0000094e <__floatunsisf>:
     94e:	a8 e0       	ldi	r26, 0x08	; 8
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x10>
     95a:	7b 01       	movw	r14, r22
     95c:	8c 01       	movw	r16, r24
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	81 05       	cpc	r24, r1
     964:	91 05       	cpc	r25, r1
     966:	19 f4       	brne	.+6      	; 0x96e <__floatunsisf+0x20>
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	60 c0       	rjmp	.+192    	; 0xa2e <__floatunsisf+0xe0>
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     98c:	fc 01       	movw	r30, r24
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	f7 ff       	sbrs	r31, 7
     992:	3b c0       	rjmp	.+118    	; 0xa0a <__floatunsisf+0xbc>
     994:	22 27       	eor	r18, r18
     996:	33 27       	eor	r19, r19
     998:	2e 1b       	sub	r18, r30
     99a:	3f 0b       	sbc	r19, r31
     99c:	57 01       	movw	r10, r14
     99e:	68 01       	movw	r12, r16
     9a0:	02 2e       	mov	r0, r18
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__floatunsisf+0x5e>
     9a4:	d6 94       	lsr	r13
     9a6:	c7 94       	ror	r12
     9a8:	b7 94       	ror	r11
     9aa:	a7 94       	ror	r10
     9ac:	0a 94       	dec	r0
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__floatunsisf+0x56>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__floatunsisf+0x7c>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	2a 95       	dec	r18
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__floatunsisf+0x74>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	a1 09       	sbc	r26, r1
     9d2:	b1 09       	sbc	r27, r1
     9d4:	8e 21       	and	r24, r14
     9d6:	9f 21       	and	r25, r15
     9d8:	a0 23       	and	r26, r16
     9da:	b1 23       	and	r27, r17
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	21 f0       	breq	.+8      	; 0x9ec <__floatunsisf+0x9e>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	4a 29       	or	r20, r10
     9ee:	5b 29       	or	r21, r11
     9f0:	6c 29       	or	r22, r12
     9f2:	7d 29       	or	r23, r13
     9f4:	4d 83       	std	Y+5, r20	; 0x05
     9f6:	5e 83       	std	Y+6, r21	; 0x06
     9f8:	6f 83       	std	Y+7, r22	; 0x07
     9fa:	78 87       	std	Y+8, r23	; 0x08
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8e 1b       	sub	r24, r30
     a02:	9f 0b       	sbc	r25, r31
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <__floatunsisf+0xe0>
     a0a:	30 97       	sbiw	r30, 0x00	; 0
     a0c:	81 f0       	breq	.+32     	; 0xa2e <__floatunsisf+0xe0>
     a0e:	0e 2e       	mov	r0, r30
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__floatunsisf+0xcc>
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	0a 94       	dec	r0
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__floatunsisf+0xc4>
     a1e:	ed 82       	std	Y+5, r14	; 0x05
     a20:	fe 82       	std	Y+6, r15	; 0x06
     a22:	0f 83       	std	Y+7, r16	; 0x07
     a24:	18 87       	std	Y+8, r17	; 0x08
     a26:	ce 1a       	sub	r12, r30
     a28:	df 0a       	sbc	r13, r31
     a2a:	dc 82       	std	Y+4, r13	; 0x04
     a2c:	cb 82       	std	Y+3, r12	; 0x03
     a2e:	1a 82       	std	Y+2, r1	; 0x02
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x10>

00000a40 <__clzsi2>:
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	e8 16       	cp	r14, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	f8 06       	cpc	r15, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 07       	cpc	r16, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	18 07       	cpc	r17, r24
     a5c:	88 f4       	brcc	.+34     	; 0xa80 <__clzsi2+0x40>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	e8 16       	cp	r14, r24
     a62:	f1 04       	cpc	r15, r1
     a64:	01 05       	cpc	r16, r1
     a66:	11 05       	cpc	r17, r1
     a68:	31 f0       	breq	.+12     	; 0xa76 <__clzsi2+0x36>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__clzsi2+0x36>
     a6c:	88 e0       	ldi	r24, 0x08	; 8
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	17 c0       	rjmp	.+46     	; 0xaa4 <__clzsi2+0x64>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <__clzsi2+0x64>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	e8 16       	cp	r14, r24
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	f8 06       	cpc	r15, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 07       	cpc	r16, r24
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	18 07       	cpc	r17, r24
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__clzsi2+0x5c>
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__clzsi2+0x64>
     a9c:	80 e1       	ldi	r24, 0x10	; 16
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	20 e2       	ldi	r18, 0x20	; 32
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	28 1b       	sub	r18, r24
     aae:	39 0b       	sbc	r19, r25
     ab0:	4a 0b       	sbc	r20, r26
     ab2:	5b 0b       	sbc	r21, r27
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__clzsi2+0x7e>
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__clzsi2+0x76>
     ac2:	f7 01       	movw	r30, r14
     ac4:	e8 59       	subi	r30, 0x98	; 152
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	28 1b       	sub	r18, r24
     acc:	31 09       	sbc	r19, r1
     ace:	41 09       	sbc	r20, r1
     ad0:	51 09       	sbc	r21, r1
     ad2:	c9 01       	movw	r24, r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <__pack_f>:
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	e4 80       	ldd	r14, Z+4	; 0x04
     aec:	f5 80       	ldd	r15, Z+5	; 0x05
     aee:	06 81       	ldd	r16, Z+6	; 0x06
     af0:	17 81       	ldd	r17, Z+7	; 0x07
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	48 f4       	brcc	.+18     	; 0xb0c <__pack_f+0x2e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e1       	ldi	r26, 0x10	; 16
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <__pack_f+0x178>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__pack_f+0x34>
     b10:	9f c0       	rjmp	.+318    	; 0xc50 <__pack_f+0x172>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	21 f4       	brne	.+8      	; 0xb1e <__pack_f+0x40>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x4a>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	01 05       	cpc	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	19 f4       	brne	.+6      	; 0xb2e <__pack_f+0x50>
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	96 c0       	rjmp	.+300    	; 0xc5a <__pack_f+0x17c>
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	62 38       	cpi	r22, 0x82	; 130
     b36:	79 07       	cpc	r23, r25
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__pack_f+0x5e>
     b3a:	5b c0       	rjmp	.+182    	; 0xbf2 <__pack_f+0x114>
     b3c:	22 e8       	ldi	r18, 0x82	; 130
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	26 1b       	sub	r18, r22
     b42:	37 0b       	sbc	r19, r23
     b44:	2a 31       	cpi	r18, 0x1A	; 26
     b46:	31 05       	cpc	r19, r1
     b48:	2c f0       	brlt	.+10     	; 0xb54 <__pack_f+0x76>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <__pack_f+0xca>
     b54:	b8 01       	movw	r22, r16
     b56:	a7 01       	movw	r20, r14
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0x86>
     b5c:	76 95       	lsr	r23
     b5e:	67 95       	ror	r22
     b60:	57 95       	ror	r21
     b62:	47 95       	ror	r20
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__pack_f+0x7e>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0x9c>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	2a 95       	dec	r18
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__pack_f+0x94>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	8e 21       	and	r24, r14
     b86:	9f 21       	and	r25, r15
     b88:	a0 23       	and	r26, r16
     b8a:	b1 23       	and	r27, r17
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	21 f0       	breq	.+8      	; 0xb9c <__pack_f+0xbe>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	28 2b       	or	r18, r24
     ba2:	39 2b       	or	r19, r25
     ba4:	4a 2b       	or	r20, r26
     ba6:	5b 2b       	or	r21, r27
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	a0 70       	andi	r26, 0x00	; 0
     bb2:	b0 70       	andi	r27, 0x00	; 0
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <__pack_f+0xee>
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__pack_f+0xf6>
     bc2:	20 5c       	subi	r18, 0xC0	; 192
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__pack_f+0xf6>
     bcc:	21 5c       	subi	r18, 0xC1	; 193
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	3a 07       	cpc	r19, r26
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	4a 07       	cpc	r20, r26
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	5a 07       	cpc	r21, r26
     be6:	10 f0       	brcs	.+4      	; 0xbec <__pack_f+0x10e>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	79 01       	movw	r14, r18
     bee:	8a 01       	movw	r16, r20
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <__pack_f+0x162>
     bf2:	60 38       	cpi	r22, 0x80	; 128
     bf4:	71 05       	cpc	r23, r1
     bf6:	64 f5       	brge	.+88     	; 0xc50 <__pack_f+0x172>
     bf8:	fb 01       	movw	r30, r22
     bfa:	e1 58       	subi	r30, 0x81	; 129
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d8 01       	movw	r26, r16
     c00:	c7 01       	movw	r24, r14
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	a0 70       	andi	r26, 0x00	; 0
     c08:	b0 70       	andi	r27, 0x00	; 0
     c0a:	80 34       	cpi	r24, 0x40	; 64
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <__pack_f+0x144>
     c14:	e7 fe       	sbrs	r14, 7
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__pack_f+0x154>
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x14c>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	0a 1f       	adc	r16, r26
     c30:	1b 1f       	adc	r17, r27
     c32:	17 ff       	sbrs	r17, 7
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x162>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	16 95       	lsr	r17
     c44:	07 95       	ror	r16
     c46:	f7 94       	ror	r15
     c48:	e7 94       	ror	r14
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <__pack_f+0x164>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x17c>
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	ef ef       	ldi	r30, 0xFF	; 255
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	6e 2f       	mov	r22, r30
     c5c:	67 95       	ror	r22
     c5e:	66 27       	eor	r22, r22
     c60:	67 95       	ror	r22
     c62:	90 2f       	mov	r25, r16
     c64:	9f 77       	andi	r25, 0x7F	; 127
     c66:	d7 94       	ror	r13
     c68:	dd 24       	eor	r13, r13
     c6a:	d7 94       	ror	r13
     c6c:	8e 2f       	mov	r24, r30
     c6e:	86 95       	lsr	r24
     c70:	49 2f       	mov	r20, r25
     c72:	46 2b       	or	r20, r22
     c74:	58 2f       	mov	r21, r24
     c76:	5d 29       	or	r21, r13
     c78:	b7 01       	movw	r22, r14
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret

00000c88 <__unpack_f>:
     c88:	fc 01       	movw	r30, r24
     c8a:	db 01       	movw	r26, r22
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	62 2f       	mov	r22, r18
     c94:	6f 77       	andi	r22, 0x7F	; 127
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	22 1f       	adc	r18, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	22 1f       	adc	r18, r18
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	89 2f       	mov	r24, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	82 2b       	or	r24, r18
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 93       	st	X, r25
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	a9 f5       	brne	.+106    	; 0xd26 <__unpack_f+0x9e>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <__unpack_f+0x42>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	37 c0       	rjmp	.+110    	; 0xd38 <__unpack_f+0xb0>
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	9a 01       	movw	r18, r20
     cd8:	ab 01       	movw	r20, r22
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <__unpack_f+0x54>
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8c 93       	st	X, r24
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <__unpack_f+0x80>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 93       	st	X, r25
     d04:	8e 93       	st	-X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	20 30       	cpi	r18, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	38 07       	cpc	r19, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	48 07       	cpc	r20, r24
     d12:	80 e4       	ldi	r24, 0x40	; 64
     d14:	58 07       	cpc	r21, r24
     d16:	58 f3       	brcs	.-42     	; 0xcee <__unpack_f+0x66>
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	2d 93       	st	X+, r18
     d1c:	3d 93       	st	X+, r19
     d1e:	4d 93       	st	X+, r20
     d20:	5c 93       	st	X, r21
     d22:	17 97       	sbiw	r26, 0x07	; 7
     d24:	08 95       	ret
     d26:	2f 3f       	cpi	r18, 0xFF	; 255
     d28:	31 05       	cpc	r19, r1
     d2a:	79 f4       	brne	.+30     	; 0xd4a <__unpack_f+0xc2>
     d2c:	41 15       	cp	r20, r1
     d2e:	51 05       	cpc	r21, r1
     d30:	61 05       	cpc	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <__unpack_f+0xb4>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	08 95       	ret
     d3c:	64 ff       	sbrs	r22, 4
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__unpack_f+0xbe>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__unpack_f+0xe2>
     d46:	1c 92       	st	X, r1
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <__unpack_f+0xe2>
     d4a:	2f 57       	subi	r18, 0x7F	; 127
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	12 97       	sbiw	r26, 0x02	; 2
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8c 93       	st	X, r24
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	d1 f7       	brne	.-12     	; 0xd5c <__unpack_f+0xd4>
     d68:	70 64       	ori	r23, 0x40	; 64
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	4d 93       	st	X+, r20
     d6e:	5d 93       	st	X+, r21
     d70:	6d 93       	st	X+, r22
     d72:	7c 93       	st	X, r23
     d74:	17 97       	sbiw	r26, 0x07	; 7
     d76:	08 95       	ret

00000d78 <__fpcmp_parts_f>:
     d78:	1f 93       	push	r17
     d7a:	dc 01       	movw	r26, r24
     d7c:	fb 01       	movw	r30, r22
     d7e:	9c 91       	ld	r25, X
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__fpcmp_parts_f+0xe>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d86:	80 81       	ld	r24, Z
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__fpcmp_parts_f+0x16>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d8e:	94 30       	cpi	r25, 0x04	; 4
     d90:	51 f4       	brne	.+20     	; 0xda6 <__fpcmp_parts_f+0x2e>
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	1c 91       	ld	r17, X
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	99 f5       	brne	.+102    	; 0xe00 <__fpcmp_parts_f+0x88>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	61 1b       	sub	r22, r17
     da2:	71 09       	sbc	r23, r1
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <__fpcmp_parts_f+0xac>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__fpcmp_parts_f+0x3a>
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	31 f4       	brne	.+12     	; 0xdba <__fpcmp_parts_f+0x42>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	b9 f1       	breq	.+110    	; 0xe20 <__fpcmp_parts_f+0xa8>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	89 f1       	breq	.+98     	; 0xe1a <__fpcmp_parts_f+0xa2>
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <__fpcmp_parts_f+0x9c>
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__fpcmp_parts_f+0x88>
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	18 17       	cp	r17, r24
     dc8:	d9 f4       	brne	.+54     	; 0xe00 <__fpcmp_parts_f+0x88>
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	94 f0       	brlt	.+36     	; 0xe00 <__fpcmp_parts_f+0x88>
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	bc f0       	brlt	.+46     	; 0xe10 <__fpcmp_parts_f+0x98>
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	8d 91       	ld	r24, X+
     de6:	9d 91       	ld	r25, X+
     de8:	0d 90       	ld	r0, X+
     dea:	bc 91       	ld	r27, X
     dec:	a0 2d       	mov	r26, r0
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	35 81       	ldd	r19, Z+5	; 0x05
     df2:	46 81       	ldd	r20, Z+6	; 0x06
     df4:	57 81       	ldd	r21, Z+7	; 0x07
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	4a 07       	cpc	r20, r26
     dfc:	5b 07       	cpc	r21, r27
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <__fpcmp_parts_f+0x8e>
     e00:	11 23       	and	r17, r17
     e02:	41 f0       	breq	.+16     	; 0xe14 <__fpcmp_parts_f+0x9c>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__fpcmp_parts_f+0xa2>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	a4 07       	cpc	r26, r20
     e0c:	b5 07       	cpc	r27, r21
     e0e:	40 f4       	brcc	.+16     	; 0xe20 <__fpcmp_parts_f+0xa8>
     e10:	11 23       	and	r17, r17
     e12:	19 f0       	breq	.+6      	; 0xe1a <__fpcmp_parts_f+0xa2>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__fpcmp_parts_f+0xac>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__fpcmp_parts_f+0xac>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	cb 01       	movw	r24, r22
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <Adc_vidInit>:
 * Return: it has no returns.
 **/
static void Adc_vidClearInterruptFlag(void);

void Adc_vidInit(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	0f 92       	push	r0
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (ADC_CHANNEL|ADC_ADJUSTMENT|ADC_VOLTAGE_REF);
     e34:	e7 e2       	ldi	r30, 0x27	; 39
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 e4       	ldi	r24, 0x40	; 64
     e3a:	80 83       	st	Z, r24
	ADCSRA = (ADC_u8CONTROL|ADC_u8CONVERSION_CONTROL|ADCSRA_AUTO_TRIG_DISABLE|ADC_PRESCALER|ADC_u8INTERRUPT);
     e3c:	e6 e2       	ldi	r30, 0x26	; 38
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8b e8       	ldi	r24, 0x8B	; 139
     e42:	80 83       	st	Z, r24
	SFIOR &=ADC_u8AUTO_TRIGGER_SOURCE ;// I make the macro ones to the bits that I don't need to change its state
     e44:	e0 e5       	ldi	r30, 0x50	; 80
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	e0 e5       	ldi	r30, 0x50	; 80
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	10 82       	st	Z, r1
									  // so I use &
}
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <Adc_vidControl>:

void Adc_vidControl(u8 copy_control)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	89 83       	std	Y+1, r24	; 0x01
#if ADC_u8CONTROL == ADC_u8ENABLE
	SET_BIT(ADCSRA,7);
     e64:	a6 e2       	ldi	r26, 0x26	; 38
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e6 e2       	ldi	r30, 0x26	; 38
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 68       	ori	r24, 0x80	; 128
     e70:	8c 93       	st	X, r24
#elif ADC_u8CONTROL == ADC_u8DISABLE
	CLR_BIT(ADCSRA,7);

#endif
}
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <Adc_vidStartConversion>:

void Adc_vidStartConversion(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
//	SET_BIT(PORTA,1);
	SET_BIT(ADCSRA,ADC_u8START_CONVERSION);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	8c 93       	st	X, r24
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <Adc_u16GetResult>:

u16 Adc_u16GetResult(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <Adc_u16GetResult+0x6>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
	while(Adc_u8GetInterruptFlagValue()==0);
     ea0:	0e 94 6d 07 	call	0xeda	; 0xeda <Adc_u8GetInterruptFlagValue>
     ea4:	88 23       	and	r24, r24
     ea6:	e1 f3       	breq	.-8      	; 0xea0 <Adc_u16GetResult+0xa>
//	SET_BIT(PORTA,1);
	Adc_vidClearInterruptFlag();
     ea8:	0e 94 7a 07 	call	0xef4	; 0xef4 <Adc_vidClearInterruptFlag>
	u16 Loc_RegValue = (ADCL | (ADCH <<8)) ;
     eac:	e4 e2       	ldi	r30, 0x24	; 36
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	e5 e2       	ldi	r30, 0x25	; 37
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	98 2f       	mov	r25, r24
     ec2:	88 27       	eor	r24, r24
     ec4:	82 2b       	or	r24, r18
     ec6:	93 2b       	or	r25, r19
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
	return Loc_RegValue;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <Adc_u8GetInterruptFlagValue>:

u8 Adc_u8GetInterruptFlagValue(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(ADCSRA,4);
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 95       	swap	r24
     eea:	8f 70       	andi	r24, 0x0F	; 15
     eec:	81 70       	andi	r24, 0x01	; 1
}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <Adc_vidClearInterruptFlag>:

static void Adc_vidClearInterruptFlag(void)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,4);
     efc:	a6 e2       	ldi	r26, 0x26	; 38
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e6 e2       	ldi	r30, 0x26	; 38
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	8c 93       	st	X, r24
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <Dio_enuWriteChannelId>:
  Write on pin
  take two args Copy_u8ChannedId and Copy_u8Level
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuWriteChannelId(u8 Copy_u8ChannedId,u8 Copy_u8Level)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	27 97       	sbiw	r28, 0x07	; 7
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	8c 83       	std	Y+4, r24	; 0x04
     f26:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port = Copy_u8ChannedId/8 ;
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	86 95       	lsr	r24
     f30:	86 95       	lsr	r24
     f32:	86 95       	lsr	r24
     f34:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Pin = (Copy_u8ChannedId%8) ;
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	87 70       	andi	r24, 0x07	; 7
     f3a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8ChannedId<=32)
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	81 32       	cpi	r24, 0x21	; 33
     f40:	08 f0       	brcs	.+2      	; 0xf44 <Dio_enuWriteChannelId+0x34>
     f42:	e1 c0       	rjmp	.+450    	; 0x1106 <Dio_enuWriteChannelId+0x1f6>
	{
		switch (Loc_u8Port)
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	3f 83       	std	Y+7, r19	; 0x07
     f4c:	2e 83       	std	Y+6, r18	; 0x06
     f4e:	8e 81       	ldd	r24, Y+6	; 0x06
     f50:	9f 81       	ldd	r25, Y+7	; 0x07
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	91 05       	cpc	r25, r1
     f56:	09 f4       	brne	.+2      	; 0xf5a <Dio_enuWriteChannelId+0x4a>
     f58:	47 c0       	rjmp	.+142    	; 0xfe8 <Dio_enuWriteChannelId+0xd8>
     f5a:	2e 81       	ldd	r18, Y+6	; 0x06
     f5c:	3f 81       	ldd	r19, Y+7	; 0x07
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	2c f4       	brge	.+10     	; 0xf6e <Dio_enuWriteChannelId+0x5e>
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	71 f0       	breq	.+28     	; 0xf88 <Dio_enuWriteChannelId+0x78>
     f6c:	ce c0       	rjmp	.+412    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
     f6e:	2e 81       	ldd	r18, Y+6	; 0x06
     f70:	3f 81       	ldd	r19, Y+7	; 0x07
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <Dio_enuWriteChannelId+0x6a>
     f78:	67 c0       	rjmp	.+206    	; 0x1048 <Dio_enuWriteChannelId+0x138>
     f7a:	8e 81       	ldd	r24, Y+6	; 0x06
     f7c:	9f 81       	ldd	r25, Y+7	; 0x07
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	91 05       	cpc	r25, r1
     f82:	09 f4       	brne	.+2      	; 0xf86 <Dio_enuWriteChannelId+0x76>
     f84:	91 c0       	rjmp	.+290    	; 0x10a8 <Dio_enuWriteChannelId+0x198>
     f86:	c1 c0       	rjmp	.+386    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
		{
		case PORT_A:

			if(Copy_u8Level==DIO_u8HIGH)
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	a1 f4       	brne	.+40     	; 0xfb6 <Dio_enuWriteChannelId+0xa6>
			{
				SET_BIT(PORTA,Loc_u8Pin);
     f8e:	ab e3       	ldi	r26, 0x3B	; 59
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	eb e3       	ldi	r30, 0x3B	; 59
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <Dio_enuWriteChannelId+0x9c>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <Dio_enuWriteChannelId+0x98>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	aa c0       	rjmp	.+340    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	88 23       	and	r24, r24
     fba:	09 f0       	breq	.+2      	; 0xfbe <Dio_enuWriteChannelId+0xae>
     fbc:	a6 c0       	rjmp	.+332    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTA,Loc_u8Pin);
     fbe:	ab e3       	ldi	r26, 0x3B	; 59
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	eb e3       	ldi	r30, 0x3B	; 59
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <Dio_enuWriteChannelId+0xcc>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <Dio_enuWriteChannelId+0xc8>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	91 c0       	rjmp	.+290    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			}

			break;
		case PORT_B:
			if(Copy_u8Level==DIO_u8HIGH)
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	a1 f4       	brne	.+40     	; 0x1016 <Dio_enuWriteChannelId+0x106>
			{
				SET_BIT(PORTB,Loc_u8Pin);
     fee:	a8 e3       	ldi	r26, 0x38	; 56
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e8 e3       	ldi	r30, 0x38	; 56
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <Dio_enuWriteChannelId+0xfc>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <Dio_enuWriteChannelId+0xf8>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	7a c0       	rjmp	.+244    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	88 23       	and	r24, r24
    101a:	09 f0       	breq	.+2      	; 0x101e <Dio_enuWriteChannelId+0x10e>
    101c:	76 c0       	rjmp	.+236    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTB,Loc_u8Pin);
    101e:	a8 e3       	ldi	r26, 0x38	; 56
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e8 e3       	ldi	r30, 0x38	; 56
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <Dio_enuWriteChannelId+0x12c>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <Dio_enuWriteChannelId+0x128>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	61 c0       	rjmp	.+194    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_C:
			if(Copy_u8Level==DIO_u8HIGH)
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	a1 f4       	brne	.+40     	; 0x1076 <Dio_enuWriteChannelId+0x166>
			{
				SET_BIT(PORTC,Loc_u8Pin);
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <Dio_enuWriteChannelId+0x15c>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <Dio_enuWriteChannelId+0x158>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	4a c0       	rjmp	.+148    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	88 23       	and	r24, r24
    107a:	09 f0       	breq	.+2      	; 0x107e <Dio_enuWriteChannelId+0x16e>
    107c:	46 c0       	rjmp	.+140    	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTC,Loc_u8Pin);
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <Dio_enuWriteChannelId+0x18c>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <Dio_enuWriteChannelId+0x188>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	31 c0       	rjmp	.+98     	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_D:
			if(Copy_u8Level==DIO_u8HIGH)
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	a1 f4       	brne	.+40     	; 0x10d6 <Dio_enuWriteChannelId+0x1c6>
			{
				SET_BIT(PORTD,Loc_u8Pin);
    10ae:	a2 e3       	ldi	r26, 0x32	; 50
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e2 e3       	ldi	r30, 0x32	; 50
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <Dio_enuWriteChannelId+0x1bc>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <Dio_enuWriteChannelId+0x1b8>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	1a c0       	rjmp	.+52     	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	88 23       	and	r24, r24
    10da:	b9 f4       	brne	.+46     	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTD,Loc_u8Pin);
    10dc:	a2 e3       	ldi	r26, 0x32	; 50
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e2 e3       	ldi	r30, 0x32	; 50
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <Dio_enuWriteChannelId+0x1ea>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <Dio_enuWriteChannelId+0x1e6>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	02 c0       	rjmp	.+4      	; 0x110a <Dio_enuWriteChannelId+0x1fa>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =  Dio_enuPortError ;
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	8b 83       	std	Y+3, r24	; 0x03

	}
	return Loc_enuReturnStatus;
    110a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    110c:	27 96       	adiw	r28, 0x07	; 7
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <Dio_enuReadChannelId>:
  Read from pin
  take two args Copy_u8ChannedId and Add_pu8ChannelLevel
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadChannelId(u8 Copy_u8ChannedId, pu8 Add_pu8ChannelLevel)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	28 97       	sbiw	r28, 0x08	; 8
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	8c 83       	std	Y+4, r24	; 0x04
    1134:	7e 83       	std	Y+6, r23	; 0x06
    1136:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	81 32       	cpi	r24, 0x21	; 33
    1140:	08 f0       	brcs	.+2      	; 0x1144 <Dio_enuReadChannelId+0x26>
    1142:	79 c0       	rjmp	.+242    	; 0x1236 <Dio_enuReadChannelId+0x118>
	{
		u8 Loc_u8Port = (Copy_u8ChannedId/8) ;
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	86 95       	lsr	r24
    1148:	86 95       	lsr	r24
    114a:	86 95       	lsr	r24
    114c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = (Copy_u8ChannedId%8)  ;
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	87 70       	andi	r24, 0x07	; 7
    1152:	89 83       	std	Y+1, r24	; 0x01

		switch (Loc_u8Port)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	38 87       	std	Y+8, r19	; 0x08
    115c:	2f 83       	std	Y+7, r18	; 0x07
    115e:	4f 81       	ldd	r20, Y+7	; 0x07
    1160:	58 85       	ldd	r21, Y+8	; 0x08
    1162:	41 30       	cpi	r20, 0x01	; 1
    1164:	51 05       	cpc	r21, r1
    1166:	59 f1       	breq	.+86     	; 0x11be <Dio_enuReadChannelId+0xa0>
    1168:	8f 81       	ldd	r24, Y+7	; 0x07
    116a:	98 85       	ldd	r25, Y+8	; 0x08
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	91 05       	cpc	r25, r1
    1170:	34 f4       	brge	.+12     	; 0x117e <Dio_enuReadChannelId+0x60>
    1172:	2f 81       	ldd	r18, Y+7	; 0x07
    1174:	38 85       	ldd	r19, Y+8	; 0x08
    1176:	21 15       	cp	r18, r1
    1178:	31 05       	cpc	r19, r1
    117a:	69 f0       	breq	.+26     	; 0x1196 <Dio_enuReadChannelId+0x78>
    117c:	5e c0       	rjmp	.+188    	; 0x123a <Dio_enuReadChannelId+0x11c>
    117e:	4f 81       	ldd	r20, Y+7	; 0x07
    1180:	58 85       	ldd	r21, Y+8	; 0x08
    1182:	42 30       	cpi	r20, 0x02	; 2
    1184:	51 05       	cpc	r21, r1
    1186:	79 f1       	breq	.+94     	; 0x11e6 <Dio_enuReadChannelId+0xc8>
    1188:	8f 81       	ldd	r24, Y+7	; 0x07
    118a:	98 85       	ldd	r25, Y+8	; 0x08
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <Dio_enuReadChannelId+0x76>
    1192:	3d c0       	rjmp	.+122    	; 0x120e <Dio_enuReadChannelId+0xf0>
    1194:	52 c0       	rjmp	.+164    	; 0x123a <Dio_enuReadChannelId+0x11c>
		{
		case PORT_A:
			*Add_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
    1196:	e9 e3       	ldi	r30, 0x39	; 57
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <Dio_enuReadChannelId+0x90>
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <Dio_enuReadChannelId+0x8c>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	80 83       	st	Z, r24
    11bc:	3e c0       	rjmp	.+124    	; 0x123a <Dio_enuReadChannelId+0x11c>
			break;
		case PORT_B:
			*Add_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
    11be:	e6 e3       	ldi	r30, 0x36	; 54
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a9 01       	movw	r20, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <Dio_enuReadChannelId+0xb8>
    11d2:	55 95       	asr	r21
    11d4:	47 95       	ror	r20
    11d6:	8a 95       	dec	r24
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <Dio_enuReadChannelId+0xb4>
    11da:	ca 01       	movw	r24, r20
    11dc:	81 70       	andi	r24, 0x01	; 1
    11de:	ed 81       	ldd	r30, Y+5	; 0x05
    11e0:	fe 81       	ldd	r31, Y+6	; 0x06
    11e2:	80 83       	st	Z, r24
    11e4:	2a c0       	rjmp	.+84     	; 0x123a <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_C:
			*Add_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
    11e6:	e3 e3       	ldi	r30, 0x33	; 51
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <Dio_enuReadChannelId+0xe0>
    11fa:	55 95       	asr	r21
    11fc:	47 95       	ror	r20
    11fe:	8a 95       	dec	r24
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <Dio_enuReadChannelId+0xdc>
    1202:	ca 01       	movw	r24, r20
    1204:	81 70       	andi	r24, 0x01	; 1
    1206:	ed 81       	ldd	r30, Y+5	; 0x05
    1208:	fe 81       	ldd	r31, Y+6	; 0x06
    120a:	80 83       	st	Z, r24
    120c:	16 c0       	rjmp	.+44     	; 0x123a <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_D:
			*Add_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
    120e:	e0 e3       	ldi	r30, 0x30	; 48
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <Dio_enuReadChannelId+0x108>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <Dio_enuReadChannelId+0x104>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	ed 81       	ldd	r30, Y+5	; 0x05
    1230:	fe 81       	ldd	r31, Y+6	; 0x06
    1232:	80 83       	st	Z, r24
    1234:	02 c0       	rjmp	.+4      	; 0x123a <Dio_enuReadChannelId+0x11c>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
    123a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    123c:	28 96       	adiw	r28, 0x08	; 8
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <Dio_enuWritePort>:
  take two args Copy_u8PortID and Copy_u8Level
  return Dio_tenuErrorStatus
 */

Dio_tenuErrorStatus Dio_enuWritePort(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <Dio_enuWritePort+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <Dio_enuWritePort+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8a 83       	std	Y+2, r24	; 0x02
    125e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID<=PORT_SIZE)
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	85 30       	cpi	r24, 0x05	; 5
    1268:	98 f5       	brcc	.+102    	; 0x12d0 <Dio_enuWritePort+0x82>
	{
		switch (Copy_u8PortID)
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3d 83       	std	Y+5, r19	; 0x05
    1272:	2c 83       	std	Y+4, r18	; 0x04
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	d1 f0       	breq	.+52     	; 0x12b2 <Dio_enuWritePort+0x64>
    127e:	2c 81       	ldd	r18, Y+4	; 0x04
    1280:	3d 81       	ldd	r19, Y+5	; 0x05
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <Dio_enuWritePort+0x44>
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	61 f0       	breq	.+24     	; 0x12a8 <Dio_enuWritePort+0x5a>
    1290:	21 c0       	rjmp	.+66     	; 0x12d4 <Dio_enuWritePort+0x86>
    1292:	2c 81       	ldd	r18, Y+4	; 0x04
    1294:	3d 81       	ldd	r19, Y+5	; 0x05
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	81 f0       	breq	.+32     	; 0x12bc <Dio_enuWritePort+0x6e>
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <Dio_enuWritePort+0x78>
    12a6:	16 c0       	rjmp	.+44     	; 0x12d4 <Dio_enuWritePort+0x86>
		{
		case PORT_A:
			ASSIGN_REG(PORTA,Copy_u8Value);
    12a8:	eb e3       	ldi	r30, 0x3B	; 59
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	80 83       	st	Z, r24
    12b0:	11 c0       	rjmp	.+34     	; 0x12d4 <Dio_enuWritePort+0x86>
			break;
		case PORT_B:
			ASSIGN_REG(PORTB,Copy_u8Value);
    12b2:	e8 e3       	ldi	r30, 0x38	; 56
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	80 83       	st	Z, r24
    12ba:	0c c0       	rjmp	.+24     	; 0x12d4 <Dio_enuWritePort+0x86>
			break ;
		case PORT_C:
			ASSIGN_REG(PORTC,Copy_u8Value);
    12bc:	e5 e3       	ldi	r30, 0x35	; 53
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	80 83       	st	Z, r24
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <Dio_enuWritePort+0x86>
			break ;
		case PORT_D:
			ASSIGN_REG(PORTD,Copy_u8Value);
    12c6:	e2 e3       	ldi	r30, 0x32	; 50
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	80 83       	st	Z, r24
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <Dio_enuWritePort+0x86>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPortError;
    12d0:	83 e0       	ldi	r24, 0x03	; 3
    12d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <Dio_enuReadPort>:
  Read from port
  take two args Copy_u8PortID and Add_pu8PortValue
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadPort(u8 Copy_u8PortId, pu8 Add_pu8PortValue)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <Dio_enuReadPort+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <Dio_enuReadPort+0x8>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <Dio_enuReadPort+0xa>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	7c 83       	std	Y+4, r23	; 0x04
    12f8:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<=PORT_SIZE)
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	85 30       	cpi	r24, 0x05	; 5
    1302:	d8 f5       	brcc	.+118    	; 0x137a <Dio_enuReadPort+0x94>
	{

		switch (Copy_u8PortId)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	3e 83       	std	Y+6, r19	; 0x06
    130c:	2d 83       	std	Y+5, r18	; 0x05
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	e1 f0       	breq	.+56     	; 0x1350 <Dio_enuReadPort+0x6a>
    1318:	2d 81       	ldd	r18, Y+5	; 0x05
    131a:	3e 81       	ldd	r19, Y+6	; 0x06
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	2c f4       	brge	.+10     	; 0x132c <Dio_enuReadPort+0x46>
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	61 f0       	breq	.+24     	; 0x1342 <Dio_enuReadPort+0x5c>
    132a:	29 c0       	rjmp	.+82     	; 0x137e <Dio_enuReadPort+0x98>
    132c:	2d 81       	ldd	r18, Y+5	; 0x05
    132e:	3e 81       	ldd	r19, Y+6	; 0x06
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	a1 f0       	breq	.+40     	; 0x135e <Dio_enuReadPort+0x78>
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	b1 f0       	breq	.+44     	; 0x136c <Dio_enuReadPort+0x86>
    1340:	1e c0       	rjmp	.+60     	; 0x137e <Dio_enuReadPort+0x98>
		{
		case PORT_A:
			*Add_pu8PortValue = PORTA;
    1342:	eb e3       	ldi	r30, 0x3B	; 59
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	eb 81       	ldd	r30, Y+3	; 0x03
    134a:	fc 81       	ldd	r31, Y+4	; 0x04
    134c:	80 83       	st	Z, r24
    134e:	17 c0       	rjmp	.+46     	; 0x137e <Dio_enuReadPort+0x98>
			break;
		case PORT_B:
			*Add_pu8PortValue = PORTB;
    1350:	e8 e3       	ldi	r30, 0x38	; 56
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	eb 81       	ldd	r30, Y+3	; 0x03
    1358:	fc 81       	ldd	r31, Y+4	; 0x04
    135a:	80 83       	st	Z, r24
    135c:	10 c0       	rjmp	.+32     	; 0x137e <Dio_enuReadPort+0x98>
			break ;
		case PORT_C:
			*Add_pu8PortValue = PORTC;
    135e:	e5 e3       	ldi	r30, 0x35	; 53
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	eb 81       	ldd	r30, Y+3	; 0x03
    1366:	fc 81       	ldd	r31, Y+4	; 0x04
    1368:	80 83       	st	Z, r24
    136a:	09 c0       	rjmp	.+18     	; 0x137e <Dio_enuReadPort+0x98>
			break ;
		case PORT_D:
			*Add_pu8PortValue =PORTD;
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	eb 81       	ldd	r30, Y+3	; 0x03
    1374:	fc 81       	ldd	r31, Y+4	; 0x04
    1376:	80 83       	st	Z, r24
    1378:	02 c0       	rjmp	.+4      	; 0x137e <Dio_enuReadPort+0x98>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
    137e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1380:	26 96       	adiw	r28, 0x06	; 6
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <Dio_enuFlipChannel>:
  Toggle Pin
  take one arg Copy_u8ChannedId
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannedId)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <Dio_enuFlipChannel+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <Dio_enuFlipChannel+0x8>
    139a:	00 d0       	rcall	.+0      	; 0x139c <Dio_enuFlipChannel+0xa>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	81 32       	cpi	r24, 0x21	; 33
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <Dio_enuFlipChannel+0x1c>
    13ac:	77 c0       	rjmp	.+238    	; 0x149c <Dio_enuFlipChannel+0x10a>
	{
		u8 Loc_u8Port= Copy_u8ChannedId/8 ;
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	86 95       	lsr	r24
    13b2:	86 95       	lsr	r24
    13b4:	86 95       	lsr	r24
    13b6:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = Copy_u8ChannedId%8 ;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	87 70       	andi	r24, 0x07	; 7
    13bc:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8Port)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	3e 83       	std	Y+6, r19	; 0x06
    13c6:	2d 83       	std	Y+5, r18	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	91 05       	cpc	r25, r1
    13d0:	49 f1       	breq	.+82     	; 0x1424 <Dio_enuFlipChannel+0x92>
    13d2:	2d 81       	ldd	r18, Y+5	; 0x05
    13d4:	3e 81       	ldd	r19, Y+6	; 0x06
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	2c f4       	brge	.+10     	; 0x13e6 <Dio_enuFlipChannel+0x54>
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	61 f0       	breq	.+24     	; 0x13fc <Dio_enuFlipChannel+0x6a>
    13e4:	5d c0       	rjmp	.+186    	; 0x14a0 <Dio_enuFlipChannel+0x10e>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	71 f1       	breq	.+92     	; 0x144c <Dio_enuFlipChannel+0xba>
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	91 05       	cpc	r25, r1
    13f8:	e9 f1       	breq	.+122    	; 0x1474 <Dio_enuFlipChannel+0xe2>
    13fa:	52 c0       	rjmp	.+164    	; 0x14a0 <Dio_enuFlipChannel+0x10e>
		{
		case PORT_A:
			TGL_BIT(PORTA,Loc_u8Pin);
    13fc:	ab e3       	ldi	r26, 0x3B	; 59
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	eb e3       	ldi	r30, 0x3B	; 59
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <Dio_enuFlipChannel+0x88>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <Dio_enuFlipChannel+0x84>
    141e:	84 27       	eor	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	3e c0       	rjmp	.+124    	; 0x14a0 <Dio_enuFlipChannel+0x10e>
			break;
		case PORT_B:
			TGL_BIT(PORTA,Loc_u8Pin);
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <Dio_enuFlipChannel+0xb0>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <Dio_enuFlipChannel+0xac>
    1446:	84 27       	eor	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	2a c0       	rjmp	.+84     	; 0x14a0 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_C:
			TGL_BIT(PORTA,Loc_u8Pin);
    144c:	ab e3       	ldi	r26, 0x3B	; 59
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e3       	ldi	r30, 0x3B	; 59
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <Dio_enuFlipChannel+0xd8>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <Dio_enuFlipChannel+0xd4>
    146e:	84 27       	eor	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	16 c0       	rjmp	.+44     	; 0x14a0 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_D:
			TGL_BIT(PORTA,Loc_u8Pin);
    1474:	ab e3       	ldi	r26, 0x3B	; 59
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	eb e3       	ldi	r30, 0x3B	; 59
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <Dio_enuFlipChannel+0x100>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <Dio_enuFlipChannel+0xfc>
    1496:	84 27       	eor	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <Dio_enuFlipChannel+0x10e>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03

}
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <Port_enuSetPinDir>:
#include "Port_cfg.h"
#include "Port.h"


Port_tenuErrorStatus Port_enuSetPinDir(u8 copy_u8PinNum, u8 copy_u8PinDir)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	27 97       	sbiw	r28, 0x07	; 7
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	8c 83       	std	Y+4, r24	; 0x04
    14ca:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	8b 83       	std	Y+3, r24	; 0x03

	/*make the checking before the logic bec. if there is an error we will return from the function*/
	/*if the number of pins exceed the number of the HW pins*/
	if (copy_u8PinNum>MAX_PIN_NUM)
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	80 32       	cpi	r24, 0x20	; 32
    14d4:	10 f0       	brcs	.+4      	; 0x14da <Port_enuSetPinDir+0x26>
	{
		/*pin number error */
		Loc_ErrorStatus = Port_enuPinError;
    14d6:	1b 82       	std	Y+3, r1	; 0x03
    14d8:	df c0       	rjmp	.+446    	; 0x1698 <Port_enuSetPinDir+0x1e4>
	}
	/*if the user pass parameter other than the two directions (input/output)*/
	else if(copy_u8PinDir > 1)
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <Port_enuSetPinDir+0x32>
	{
		/*Direction error*/
		Loc_ErrorStatus = Port_enuPortError;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	d9 c0       	rjmp	.+434    	; 0x1698 <Port_enuSetPinDir+0x1e4>
	}

	else
	{
		u8 Loc_u8PinIndex = copy_u8PinNum%PIN_AND_PORT_DIVISOR;
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	87 70       	andi	r24, 0x07	; 7
    14ea:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PortIndex = copy_u8PinNum/PIN_AND_PORT_DIVISOR;
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	86 95       	lsr	r24
    14f0:	86 95       	lsr	r24
    14f2:	86 95       	lsr	r24
    14f4:	89 83       	std	Y+1, r24	; 0x01
		/* switch on the port index and according to the pin Dir the pin will be set or cleared*/
		switch (Loc_u8PortIndex)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3f 83       	std	Y+7, r19	; 0x07
    14fe:	2e 83       	std	Y+6, r18	; 0x06
    1500:	8e 81       	ldd	r24, Y+6	; 0x06
    1502:	9f 81       	ldd	r25, Y+7	; 0x07
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <Port_enuSetPinDir+0x58>
    150a:	43 c0       	rjmp	.+134    	; 0x1592 <Port_enuSetPinDir+0xde>
    150c:	2e 81       	ldd	r18, Y+6	; 0x06
    150e:	3f 81       	ldd	r19, Y+7	; 0x07
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <Port_enuSetPinDir+0x6c>
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	9f 81       	ldd	r25, Y+7	; 0x07
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	71 f0       	breq	.+28     	; 0x153a <Port_enuSetPinDir+0x86>
    151e:	bc c0       	rjmp	.+376    	; 0x1698 <Port_enuSetPinDir+0x1e4>
    1520:	2e 81       	ldd	r18, Y+6	; 0x06
    1522:	3f 81       	ldd	r19, Y+7	; 0x07
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <Port_enuSetPinDir+0x78>
    152a:	5f c0       	rjmp	.+190    	; 0x15ea <Port_enuSetPinDir+0x136>
    152c:	8e 81       	ldd	r24, Y+6	; 0x06
    152e:	9f 81       	ldd	r25, Y+7	; 0x07
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <Port_enuSetPinDir+0x84>
    1536:	85 c0       	rjmp	.+266    	; 0x1642 <Port_enuSetPinDir+0x18e>
    1538:	af c0       	rjmp	.+350    	; 0x1698 <Port_enuSetPinDir+0x1e4>
		{
		case PORT_A:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	a1 f4       	brne	.+40     	; 0x1568 <Port_enuSetPinDir+0xb4>
			{
				SET_BIT(DDRA,Loc_u8PinIndex);
    1540:	aa e3       	ldi	r26, 0x3A	; 58
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <Port_enuSetPinDir+0xaa>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <Port_enuSetPinDir+0xa6>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	98 c0       	rjmp	.+304    	; 0x1698 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1568:	aa e3       	ldi	r26, 0x3A	; 58
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <Port_enuSetPinDir+0xd2>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <Port_enuSetPinDir+0xce>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	83 c0       	rjmp	.+262    	; 0x1698 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_B:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	a1 f4       	brne	.+40     	; 0x15c0 <Port_enuSetPinDir+0x10c>
			{
				SET_BIT(DDRB,Loc_u8PinIndex);
    1598:	a7 e3       	ldi	r26, 0x37	; 55
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <Port_enuSetPinDir+0x102>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <Port_enuSetPinDir+0xfe>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	6c c0       	rjmp	.+216    	; 0x1698 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRB,Loc_u8PinIndex);
    15c0:	a7 e3       	ldi	r26, 0x37	; 55
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e7 e3       	ldi	r30, 0x37	; 55
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <Port_enuSetPinDir+0x12a>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <Port_enuSetPinDir+0x126>
    15e2:	80 95       	com	r24
    15e4:	84 23       	and	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	57 c0       	rjmp	.+174    	; 0x1698 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_C:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <Port_enuSetPinDir+0x164>
			{
				SET_BIT(DDRC,Loc_u8PinIndex);
    15f0:	a4 e3       	ldi	r26, 0x34	; 52
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e4 e3       	ldi	r30, 0x34	; 52
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <Port_enuSetPinDir+0x15a>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <Port_enuSetPinDir+0x156>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	40 c0       	rjmp	.+128    	; 0x1698 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRC,Loc_u8PinIndex);
    1618:	a4 e3       	ldi	r26, 0x34	; 52
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e4 e3       	ldi	r30, 0x34	; 52
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <Port_enuSetPinDir+0x182>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <Port_enuSetPinDir+0x17e>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	2b c0       	rjmp	.+86     	; 0x1698 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_D:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	a1 f4       	brne	.+40     	; 0x1670 <Port_enuSetPinDir+0x1bc>
			{
				SET_BIT(DDRD,Loc_u8PinIndex);
    1648:	a1 e3       	ldi	r26, 0x31	; 49
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e1 e3       	ldi	r30, 0x31	; 49
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <Port_enuSetPinDir+0x1b2>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <Port_enuSetPinDir+0x1ae>
    166a:	84 2b       	or	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRD,Loc_u8PinIndex);
    1670:	a1 e3       	ldi	r26, 0x31	; 49
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e1 e3       	ldi	r30, 0x31	; 49
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <Port_enuSetPinDir+0x1da>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <Port_enuSetPinDir+0x1d6>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
		default:
			/*Do nothing*/
			break;
		}
	}
	return Loc_ErrorStatus;
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
}
    169a:	27 96       	adiw	r28, 0x07	; 7
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 copy_u8PinNum, Port_tenuPinMode enu_PinMode)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	2f 97       	sbiw	r28, 0x0f	; 15
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	8c 83       	std	Y+4, r24	; 0x04
    16c2:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	8b 83       	std	Y+3, r24	; 0x03
	if(enu_PinMode>NUMBER_OF_MODES)
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	85 30       	cpi	r24, 0x05	; 5
    16cc:	18 f0       	brcs	.+6      	; 0x16d4 <Port_enuSetPinMode+0x28>
	{
		Loc_ErrorStatus = Port_enuModeError;
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	23 c3       	rjmp	.+1606   	; 0x1d1a <Port_enuSetPinMode+0x66e>
	}
	else if(copy_u8PinNum>MAX_PIN_NUM)
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	80 32       	cpi	r24, 0x20	; 32
    16d8:	10 f0       	brcs	.+4      	; 0x16de <Port_enuSetPinMode+0x32>
	{
		Loc_ErrorStatus = Port_enuPinError;
    16da:	1b 82       	std	Y+3, r1	; 0x03
    16dc:	1e c3       	rjmp	.+1596   	; 0x1d1a <Port_enuSetPinMode+0x66e>
	}
	else
	{
		u8 Loc_u8PortIndex = (copy_u8PinNum /PIN_AND_PORT_DIVISOR);
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	86 95       	lsr	r24
    16e2:	86 95       	lsr	r24
    16e4:	86 95       	lsr	r24
    16e6:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PinIndex  = (copy_u8PinNum %PIN_AND_PORT_DIVISOR);
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	87 70       	andi	r24, 0x07	; 7
    16ec:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8PortIndex)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3f 87       	std	Y+15, r19	; 0x0f
    16f6:	2e 87       	std	Y+14, r18	; 0x0e
    16f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	91 05       	cpc	r25, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <Port_enuSetPinMode+0x58>
    1702:	d4 c0       	rjmp	.+424    	; 0x18ac <Port_enuSetPinMode+0x200>
    1704:	2e 85       	ldd	r18, Y+14	; 0x0e
    1706:	3f 85       	ldd	r19, Y+15	; 0x0f
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	2c f4       	brge	.+10     	; 0x1718 <Port_enuSetPinMode+0x6c>
    170e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1710:	9f 85       	ldd	r25, Y+15	; 0x0f
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	71 f0       	breq	.+28     	; 0x1732 <Port_enuSetPinMode+0x86>
    1716:	01 c3       	rjmp	.+1538   	; 0x1d1a <Port_enuSetPinMode+0x66e>
    1718:	2e 85       	ldd	r18, Y+14	; 0x0e
    171a:	3f 85       	ldd	r19, Y+15	; 0x0f
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <Port_enuSetPinMode+0x78>
    1722:	81 c1       	rjmp	.+770    	; 0x1a26 <Port_enuSetPinMode+0x37a>
    1724:	8e 85       	ldd	r24, Y+14	; 0x0e
    1726:	9f 85       	ldd	r25, Y+15	; 0x0f
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <Port_enuSetPinMode+0x84>
    172e:	39 c2       	rjmp	.+1138   	; 0x1ba2 <Port_enuSetPinMode+0x4f6>
    1730:	f4 c2       	rjmp	.+1512   	; 0x1d1a <Port_enuSetPinMode+0x66e>
		{
		case PORT_A:
			switch(enu_PinMode)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3d 87       	std	Y+13, r19	; 0x0d
    173a:	2c 87       	std	Y+12, r18	; 0x0c
    173c:	8c 85       	ldd	r24, Y+12	; 0x0c
    173e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	b9 f0       	breq	.+46     	; 0x1774 <Port_enuSetPinMode+0xc8>
    1746:	2c 85       	ldd	r18, Y+12	; 0x0c
    1748:	3d 85       	ldd	r19, Y+13	; 0x0d
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <Port_enuSetPinMode+0xae>
    1750:	8c 85       	ldd	r24, Y+12	; 0x0c
    1752:	9d 85       	ldd	r25, Y+13	; 0x0d
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	a1 f1       	breq	.+104    	; 0x17c0 <Port_enuSetPinMode+0x114>
    1758:	e0 c2       	rjmp	.+1472   	; 0x1d1a <Port_enuSetPinMode+0x66e>
    175a:	2c 85       	ldd	r18, Y+12	; 0x0c
    175c:	3d 85       	ldd	r19, Y+13	; 0x0d
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <Port_enuSetPinMode+0xba>
    1764:	54 c0       	rjmp	.+168    	; 0x180e <Port_enuSetPinMode+0x162>
    1766:	8c 85       	ldd	r24, Y+12	; 0x0c
    1768:	9d 85       	ldd	r25, Y+13	; 0x0d
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <Port_enuSetPinMode+0xc6>
    1770:	75 c0       	rjmp	.+234    	; 0x185c <Port_enuSetPinMode+0x1b0>
    1772:	d3 c2       	rjmp	.+1446   	; 0x1d1a <Port_enuSetPinMode+0x66e>
			{
			case Output_enuHigh:
				SET_BIT(DDRA,Loc_u8PinIndex);
    1774:	aa e3       	ldi	r26, 0x3A	; 58
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ea e3       	ldi	r30, 0x3A	; 58
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <Port_enuSetPinMode+0xe4>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	2a 95       	dec	r18
    1792:	e2 f7       	brpl	.-8      	; 0x178c <Port_enuSetPinMode+0xe0>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    1798:	ab e3       	ldi	r26, 0x3B	; 59
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <Port_enuSetPinMode+0x10a>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <Port_enuSetPinMode+0x106>
    17ba:	84 2b       	or	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	ad c2       	rjmp	.+1370   	; 0x1d1a <Port_enuSetPinMode+0x66e>
				break;
			case Output_enuLow:
				SET_BIT(DDRA,Loc_u8PinIndex);
    17c0:	aa e3       	ldi	r26, 0x3A	; 58
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	ea e3       	ldi	r30, 0x3A	; 58
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <Port_enuSetPinMode+0x130>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	2a 95       	dec	r18
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <Port_enuSetPinMode+0x12c>
    17e0:	84 2b       	or	r24, r20
    17e2:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    17e4:	ab e3       	ldi	r26, 0x3B	; 59
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	eb e3       	ldi	r30, 0x3B	; 59
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <Port_enuSetPinMode+0x156>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <Port_enuSetPinMode+0x152>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	86 c2       	rjmp	.+1292   	; 0x1d1a <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuPullup:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    180e:	aa e3       	ldi	r26, 0x3A	; 58
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ea e3       	ldi	r30, 0x3A	; 58
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <Port_enuSetPinMode+0x17e>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	2a 95       	dec	r18
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <Port_enuSetPinMode+0x17a>
    182e:	80 95       	com	r24
    1830:	84 23       	and	r24, r20
    1832:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    1834:	ab e3       	ldi	r26, 0x3B	; 59
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	eb e3       	ldi	r30, 0x3B	; 59
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <Port_enuSetPinMode+0x1a6>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <Port_enuSetPinMode+0x1a2>
    1856:	84 2b       	or	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	5f c2       	rjmp	.+1214   	; 0x1d1a <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuHighImpedence:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    185c:	aa e3       	ldi	r26, 0x3A	; 58
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ea e3       	ldi	r30, 0x3A	; 58
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <Port_enuSetPinMode+0x1cc>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	2a 95       	dec	r18
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <Port_enuSetPinMode+0x1c8>
    187c:	80 95       	com	r24
    187e:	84 23       	and	r24, r20
    1880:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    1882:	ab e3       	ldi	r26, 0x3B	; 59
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	eb e3       	ldi	r30, 0x3B	; 59
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <Port_enuSetPinMode+0x1f4>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <Port_enuSetPinMode+0x1f0>
    18a4:	80 95       	com	r24
    18a6:	84 23       	and	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	37 c2       	rjmp	.+1134   	; 0x1d1a <Port_enuSetPinMode+0x66e>
				/*do nothing*/
				break;
			}
			break;
			case PORT_B:
				switch(enu_PinMode)
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3b 87       	std	Y+11, r19	; 0x0b
    18b4:	2a 87       	std	Y+10, r18	; 0x0a
    18b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	b9 f0       	breq	.+46     	; 0x18ee <Port_enuSetPinMode+0x242>
    18c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    18c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <Port_enuSetPinMode+0x228>
    18ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    18cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	a1 f1       	breq	.+104    	; 0x193a <Port_enuSetPinMode+0x28e>
    18d2:	23 c2       	rjmp	.+1094   	; 0x1d1a <Port_enuSetPinMode+0x66e>
    18d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    18d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <Port_enuSetPinMode+0x234>
    18de:	54 c0       	rjmp	.+168    	; 0x1988 <Port_enuSetPinMode+0x2dc>
    18e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <Port_enuSetPinMode+0x240>
    18ea:	75 c0       	rjmp	.+234    	; 0x19d6 <Port_enuSetPinMode+0x32a>
    18ec:	16 c2       	rjmp	.+1068   	; 0x1d1a <Port_enuSetPinMode+0x66e>
				{
				case Output_enuHigh:
					SET_BIT(DDRB,Loc_u8PinIndex);
    18ee:	a7 e3       	ldi	r26, 0x37	; 55
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e7 e3       	ldi	r30, 0x37	; 55
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <Port_enuSetPinMode+0x25e>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	2a 95       	dec	r18
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <Port_enuSetPinMode+0x25a>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    1912:	a8 e3       	ldi	r26, 0x38	; 56
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e8 e3       	ldi	r30, 0x38	; 56
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <Port_enuSetPinMode+0x284>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <Port_enuSetPinMode+0x280>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	f0 c1       	rjmp	.+992    	; 0x1d1a <Port_enuSetPinMode+0x66e>
					break;
				case Output_enuLow:
					SET_BIT(DDRB,Loc_u8PinIndex);
    193a:	a7 e3       	ldi	r26, 0x37	; 55
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e7 e3       	ldi	r30, 0x37	; 55
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <Port_enuSetPinMode+0x2aa>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	2a 95       	dec	r18
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <Port_enuSetPinMode+0x2a6>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    195e:	a8 e3       	ldi	r26, 0x38	; 56
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e8 e3       	ldi	r30, 0x38	; 56
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <Port_enuSetPinMode+0x2d0>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <Port_enuSetPinMode+0x2cc>
    1980:	80 95       	com	r24
    1982:	84 23       	and	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	c9 c1       	rjmp	.+914    	; 0x1d1a <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuPullup:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    1988:	a7 e3       	ldi	r26, 0x37	; 55
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e3       	ldi	r30, 0x37	; 55
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <Port_enuSetPinMode+0x2f8>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	2a 95       	dec	r18
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <Port_enuSetPinMode+0x2f4>
    19a8:	80 95       	com	r24
    19aa:	84 23       	and	r24, r20
    19ac:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    19ae:	a8 e3       	ldi	r26, 0x38	; 56
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e8 e3       	ldi	r30, 0x38	; 56
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <Port_enuSetPinMode+0x320>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <Port_enuSetPinMode+0x31c>
    19d0:	84 2b       	or	r24, r20
    19d2:	8c 93       	st	X, r24
    19d4:	a2 c1       	rjmp	.+836    	; 0x1d1a <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuHighImpedence:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    19d6:	a7 e3       	ldi	r26, 0x37	; 55
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e7 e3       	ldi	r30, 0x37	; 55
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <Port_enuSetPinMode+0x346>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	2a 95       	dec	r18
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <Port_enuSetPinMode+0x342>
    19f6:	80 95       	com	r24
    19f8:	84 23       	and	r24, r20
    19fa:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    19fc:	a8 e3       	ldi	r26, 0x38	; 56
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <Port_enuSetPinMode+0x36e>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <Port_enuSetPinMode+0x36a>
    1a1e:	80 95       	com	r24
    1a20:	84 23       	and	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	7a c1       	rjmp	.+756    	; 0x1d1a <Port_enuSetPinMode+0x66e>
					/*do nothing*/
					break;
				}
				break ;
				case PORT_C:
					switch(enu_PinMode)
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	39 87       	std	Y+9, r19	; 0x09
    1a2e:	28 87       	std	Y+8, r18	; 0x08
    1a30:	88 85       	ldd	r24, Y+8	; 0x08
    1a32:	99 85       	ldd	r25, Y+9	; 0x09
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	b9 f0       	breq	.+46     	; 0x1a68 <Port_enuSetPinMode+0x3bc>
    1a3a:	28 85       	ldd	r18, Y+8	; 0x08
    1a3c:	39 85       	ldd	r19, Y+9	; 0x09
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <Port_enuSetPinMode+0x3a2>
    1a44:	88 85       	ldd	r24, Y+8	; 0x08
    1a46:	99 85       	ldd	r25, Y+9	; 0x09
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	a1 f1       	breq	.+104    	; 0x1ab4 <Port_enuSetPinMode+0x408>
    1a4c:	66 c1       	rjmp	.+716    	; 0x1d1a <Port_enuSetPinMode+0x66e>
    1a4e:	28 85       	ldd	r18, Y+8	; 0x08
    1a50:	39 85       	ldd	r19, Y+9	; 0x09
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <Port_enuSetPinMode+0x3ae>
    1a58:	55 c0       	rjmp	.+170    	; 0x1b04 <Port_enuSetPinMode+0x458>
    1a5a:	88 85       	ldd	r24, Y+8	; 0x08
    1a5c:	99 85       	ldd	r25, Y+9	; 0x09
    1a5e:	83 30       	cpi	r24, 0x03	; 3
    1a60:	91 05       	cpc	r25, r1
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <Port_enuSetPinMode+0x3ba>
    1a64:	76 c0       	rjmp	.+236    	; 0x1b52 <Port_enuSetPinMode+0x4a6>
    1a66:	59 c1       	rjmp	.+690    	; 0x1d1a <Port_enuSetPinMode+0x66e>
					{
					case Output_enuHigh:
						SET_BIT(DDRC,Loc_u8PinIndex);
    1a68:	a4 e3       	ldi	r26, 0x34	; 52
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e4 e3       	ldi	r30, 0x34	; 52
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <Port_enuSetPinMode+0x3d8>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	2a 95       	dec	r18
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <Port_enuSetPinMode+0x3d4>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    1a8c:	a5 e3       	ldi	r26, 0x35	; 53
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e5 e3       	ldi	r30, 0x35	; 53
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <Port_enuSetPinMode+0x3fe>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <Port_enuSetPinMode+0x3fa>
    1aae:	84 2b       	or	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	33 c1       	rjmp	.+614    	; 0x1d1a <Port_enuSetPinMode+0x66e>
						break;
					case Output_enuLow:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    1ab4:	a4 e3       	ldi	r26, 0x34	; 52
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e4 e3       	ldi	r30, 0x34	; 52
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <Port_enuSetPinMode+0x424>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	2a 95       	dec	r18
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <Port_enuSetPinMode+0x420>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    1ada:	a5 e3       	ldi	r26, 0x35	; 53
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e5 e3       	ldi	r30, 0x35	; 53
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <Port_enuSetPinMode+0x44c>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <Port_enuSetPinMode+0x448>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	0b c1       	rjmp	.+534    	; 0x1d1a <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuPullup:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    1b04:	a4 e3       	ldi	r26, 0x34	; 52
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e4 e3       	ldi	r30, 0x34	; 52
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <Port_enuSetPinMode+0x474>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	2a 95       	dec	r18
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <Port_enuSetPinMode+0x470>
    1b24:	80 95       	com	r24
    1b26:	84 23       	and	r24, r20
    1b28:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    1b2a:	a5 e3       	ldi	r26, 0x35	; 53
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e3       	ldi	r30, 0x35	; 53
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <Port_enuSetPinMode+0x49c>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <Port_enuSetPinMode+0x498>
    1b4c:	84 2b       	or	r24, r20
    1b4e:	8c 93       	st	X, r24
    1b50:	e4 c0       	rjmp	.+456    	; 0x1d1a <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuHighImpedence:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    1b52:	a4 e3       	ldi	r26, 0x34	; 52
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e4 e3       	ldi	r30, 0x34	; 52
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <Port_enuSetPinMode+0x4c2>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	2a 95       	dec	r18
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <Port_enuSetPinMode+0x4be>
    1b72:	80 95       	com	r24
    1b74:	84 23       	and	r24, r20
    1b76:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    1b78:	a5 e3       	ldi	r26, 0x35	; 53
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <Port_enuSetPinMode+0x4ea>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <Port_enuSetPinMode+0x4e6>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	bc c0       	rjmp	.+376    	; 0x1d1a <Port_enuSetPinMode+0x66e>
						/*do nothing*/
						break;
					}
					break ;
					case PORT_D:
						switch(enu_PinMode)
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3f 83       	std	Y+7, r19	; 0x07
    1baa:	2e 83       	std	Y+6, r18	; 0x06
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	b9 f0       	breq	.+46     	; 0x1be4 <Port_enuSetPinMode+0x538>
    1bb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <Port_enuSetPinMode+0x51e>
    1bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	a1 f1       	breq	.+104    	; 0x1c30 <Port_enuSetPinMode+0x584>
    1bc8:	a8 c0       	rjmp	.+336    	; 0x1d1a <Port_enuSetPinMode+0x66e>
    1bca:	2e 81       	ldd	r18, Y+6	; 0x06
    1bcc:	3f 81       	ldd	r19, Y+7	; 0x07
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <Port_enuSetPinMode+0x52a>
    1bd4:	54 c0       	rjmp	.+168    	; 0x1c7e <Port_enuSetPinMode+0x5d2>
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <Port_enuSetPinMode+0x536>
    1be0:	75 c0       	rjmp	.+234    	; 0x1ccc <Port_enuSetPinMode+0x620>
    1be2:	9b c0       	rjmp	.+310    	; 0x1d1a <Port_enuSetPinMode+0x66e>
						{
						case Output_enuHigh:
							SET_BIT(DDRD,Loc_u8PinIndex);
    1be4:	a1 e3       	ldi	r26, 0x31	; 49
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e1 e3       	ldi	r30, 0x31	; 49
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <Port_enuSetPinMode+0x554>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	2a 95       	dec	r18
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <Port_enuSetPinMode+0x550>
    1c04:	84 2b       	or	r24, r20
    1c06:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8PinIndex);
    1c08:	a2 e3       	ldi	r26, 0x32	; 50
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e2 e3       	ldi	r30, 0x32	; 50
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <Port_enuSetPinMode+0x57a>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <Port_enuSetPinMode+0x576>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	75 c0       	rjmp	.+234    	; 0x1d1a <Port_enuSetPinMode+0x66e>
							break;
						case Output_enuLow:
							SET_BIT(DDRD,Loc_u8PinIndex);
    1c30:	a1 e3       	ldi	r26, 0x31	; 49
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e1 e3       	ldi	r30, 0x31	; 49
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <Port_enuSetPinMode+0x5a0>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	2a 95       	dec	r18
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <Port_enuSetPinMode+0x59c>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    1c54:	a2 e3       	ldi	r26, 0x32	; 50
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e2 e3       	ldi	r30, 0x32	; 50
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <Port_enuSetPinMode+0x5c6>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <Port_enuSetPinMode+0x5c2>
    1c76:	80 95       	com	r24
    1c78:	84 23       	and	r24, r20
    1c7a:	8c 93       	st	X, r24
    1c7c:	4e c0       	rjmp	.+156    	; 0x1d1a <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuPullup:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    1c7e:	a1 e3       	ldi	r26, 0x31	; 49
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e1 e3       	ldi	r30, 0x31	; 49
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <Port_enuSetPinMode+0x5ee>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	2a 95       	dec	r18
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <Port_enuSetPinMode+0x5ea>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8PinIndex);
    1ca4:	ab e3       	ldi	r26, 0x3B	; 59
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	eb e3       	ldi	r30, 0x3B	; 59
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 2e       	mov	r0, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <Port_enuSetPinMode+0x616>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <Port_enuSetPinMode+0x612>
    1cc6:	84 2b       	or	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	27 c0       	rjmp	.+78     	; 0x1d1a <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuHighImpedence:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    1ccc:	a1 e3       	ldi	r26, 0x31	; 49
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e1 e3       	ldi	r30, 0x31	; 49
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <Port_enuSetPinMode+0x63c>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	2a 95       	dec	r18
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <Port_enuSetPinMode+0x638>
    1cec:	80 95       	com	r24
    1cee:	84 23       	and	r24, r20
    1cf0:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    1cf2:	a2 e3       	ldi	r26, 0x32	; 50
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e2 e3       	ldi	r30, 0x32	; 50
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <Port_enuSetPinMode+0x664>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <Port_enuSetPinMode+0x660>
    1d14:	80 95       	com	r24
    1d16:	84 23       	and	r24, r20
    1d18:	8c 93       	st	X, r24
							/*do nothing*/
							break;
		}

	}
	return Loc_ErrorStatus;
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d1c:	2f 96       	adiw	r28, 0x0f	; 15
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <Port_vidInit>:

void Port_vidInit(void)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
#define b7_DDRA		1
#define b7_PORTA	0
#endif


	DDRA=CONC(b7_DDRA,b6_DDRA,b5_DDRA,b4_DDRA,b3_DDRA,b2_DDRA,b1_DDRA,b0_DDRA);
    1d36:	ea e3       	ldi	r30, 0x3A	; 58
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8e ef       	ldi	r24, 0xFE	; 254
    1d3c:	80 83       	st	Z, r24
	PORTA=CONC(b7_PORTA,b6_PORTA,b5_PORTA,b4_PORTA,b3_PORTA,b2_PORTA,b1_PORTA,b0_PORTA);
    1d3e:	eb e3       	ldi	r30, 0x3B	; 59
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	80 83       	st	Z, r24
#elif PORT_PIN_15_INIT_CFG == OUTPUT_LOW
#define b15_DDRB		1
#define b15_PORTB		0
#endif

	DDRB=CONC(b15_DDRB,b14_DDRB,b13_DDRB,b12_DDRB,b11_DDRB,b10_DDRB,b9_DDRB,b8_DDRB);
    1d46:	e7 e3       	ldi	r30, 0x37	; 55
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	80 83       	st	Z, r24
	PORTB=CONC(b15_PORTB,b14_PORTB,b13_PORTB,b12_PORTB,b11_PORTB,b10_PORTB,b9_PORTB,b8_PORTB);
    1d4e:	e8 e3       	ldi	r30, 0x38	; 56
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	80 83       	st	Z, r24
#elif PORT_PIN_23_INIT_CFG == OUTPUT_LOW
#define b23_DDRC		1
#define b23_PORTC		0
#endif

	DDRC=CONC(b23_DDRC,b22_DDRC,b21_DDRC,b20_DDRC,b19_DDRC,b18_DDRC,b17_DDRC,b16_DDRC);
    1d56:	e4 e3       	ldi	r30, 0x34	; 52
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	80 83       	st	Z, r24
	PORTC=CONC(b23_PORTC,b22_PORTC,b21_PORTC,b20_PORTC,b19_PORTC,b18_PORTC,b17_PORTC,b16_PORTC);
    1d5e:	e5 e3       	ldi	r30, 0x35	; 53
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	10 82       	st	Z, r1
#elif PORT_PIN_31_INIT_CFG == OUTPUT_LOW
#define b31_DDRD		1
#define b31_PORTD		0
#endif

	DDRD=CONC(b31_DDRD,b30_DDRD,b29_DDRD,b28_DDRD,b27_DDRD,b26_DDRD,b25_DDRD,b24_DDRD);
    1d64:	e1 e3       	ldi	r30, 0x31	; 49
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	80 83       	st	Z, r24
	PORTD=CONC(b31_PORTD,b30_PORTD,b29_PORTD,b28_PORTD,b27_PORTD,b26_PORTD,b25_PORTD,b24_PORTD);
    1d6c:	e2 e3       	ldi	r30, 0x32	; 50
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8f ee       	ldi	r24, 0xEF	; 239
    1d72:	80 83       	st	Z, r24
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <Pwm_vidInit>:
static u8 Pwm_u8CtcModeFlag[3]={0};
static pfunc Ovf_CallBackfunc[MAX_NUM_OF_OVF_CHANNELS];
static pfunc Ocm_CallBackfunc[MAX_NUM_OF_OCM_CHANNELS];

Pwm_tenuErrorStatus Pwm_vidInit(Pwm_ConfigType* copy_TimeCfg)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <Pwm_vidInit+0x6>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <Pwm_vidInit+0x8>
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <Pwm_vidInit+0xa>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_tenuErrorStatus Loc_enuErrorStatus;
	u8 TempVar;
	if (copy_TimeCfg == NULL)
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <Pwm_vidInit+0x1e>
	{
		Loc_enuErrorStatus = Pwm_enuNullPtr;
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	8a 83       	std	Y+2, r24	; 0x02
	}

	switch(copy_TimeCfg->Pwm_SourceNo)
    1d98:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9c:	87 81       	ldd	r24, Z+7	; 0x07
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3e 83       	std	Y+6, r19	; 0x06
    1da4:	2d 83       	std	Y+5, r18	; 0x05
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	c1 f1       	breq	.+112    	; 0x1e20 <Pwm_vidInit+0xa6>
    1db0:	2d 81       	ldd	r18, Y+5	; 0x05
    1db2:	3e 81       	ldd	r19, Y+6	; 0x06
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <Pwm_vidInit+0x42>
    1dba:	62 c0       	rjmp	.+196    	; 0x1e80 <Pwm_vidInit+0x106>
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <Pwm_vidInit+0x4c>
    1dc4:	89 c0       	rjmp	.+274    	; 0x1ed8 <Pwm_vidInit+0x15e>
	{
	case Pwm_enuSource0:
		TempVar = TCCR0;
    1dc6:	e3 e5       	ldi	r30, 0x53	; 83
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	89 83       	std	Y+1, r24	; 0x01
		TempVar &= MODE_CLEAR_MASK ;	// will be &=
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	87 7b       	andi	r24, 0xB7	; 183
    1dd2:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_u16CompareOutputMode|copy_TimeCfg->Pwm_WaveGenerationMode);
    1dd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd8:	83 81       	ldd	r24, Z+3	; 0x03
    1dda:	94 81       	ldd	r25, Z+4	; 0x04
    1ddc:	28 2f       	mov	r18, r24
    1dde:	eb 81       	ldd	r30, Y+3	; 0x03
    1de0:	fc 81       	ldd	r31, Y+4	; 0x04
    1de2:	85 81       	ldd	r24, Z+5	; 0x05
    1de4:	96 81       	ldd	r25, Z+6	; 0x06
    1de6:	92 2f       	mov	r25, r18
    1de8:	98 2b       	or	r25, r24
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	89 2b       	or	r24, r25
    1dee:	89 83       	std	Y+1, r24	; 0x01
		TCCR0 = TempVar;
    1df0:	e3 e5       	ldi	r30, 0x53	; 83
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	80 83       	st	Z, r24
		TIMSK |=(copy_TimeCfg->Pwm_u8OvfInterruptControl|copy_TimeCfg->Pwm_u8OcmInterruptControl);
    1df8:	a9 e5       	ldi	r26, 0x59	; 89
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e9 e5       	ldi	r30, 0x59	; 89
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	20 81       	ld	r18, Z
    1e02:	eb 81       	ldd	r30, Y+3	; 0x03
    1e04:	fc 81       	ldd	r31, Y+4	; 0x04
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	eb 81       	ldd	r30, Y+3	; 0x03
    1e0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	89 2b       	or	r24, r25
    1e10:	82 2b       	or	r24, r18
    1e12:	8c 93       	st	X, r24
		Pwm_u8arrClk_Prescaler[Pwm_enuSource0]=copy_TimeCfg->Pwm_u8Clk;
    1e14:	eb 81       	ldd	r30, Y+3	; 0x03
    1e16:	fc 81       	ldd	r31, Y+4	; 0x04
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 93 6d 01 	sts	0x016D, r24
    1e1e:	5c c0       	rjmp	.+184    	; 0x1ed8 <Pwm_vidInit+0x15e>
		break;
	case Pwm_enuSource1:
		TempVar = TCCR1A ;
    1e20:	ef e4       	ldi	r30, 0x4F	; 79
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_WaveGenerationMode&PWM_TCCR1A_WGM_CLEAR_MASK);
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	85 81       	ldd	r24, Z+5	; 0x05
    1e2e:	96 81       	ldd	r25, Z+6	; 0x06
    1e30:	98 2f       	mov	r25, r24
    1e32:	97 7e       	andi	r25, 0xE7	; 231
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	89 2b       	or	r24, r25
    1e38:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_u16CompareOutputMode);
    1e3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3e:	83 81       	ldd	r24, Z+3	; 0x03
    1e40:	94 81       	ldd	r25, Z+4	; 0x04
    1e42:	98 2f       	mov	r25, r24
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	89 2b       	or	r24, r25
    1e48:	89 83       	std	Y+1, r24	; 0x01
		TCCR1A = TempVar;
    1e4a:	ef e4       	ldi	r30, 0x4F	; 79
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	80 83       	st	Z, r24
		TempVar = TCCR1B;
    1e52:	ee e4       	ldi	r30, 0x4E	; 78
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_WaveGenerationMode&PWM_TCCR1B_WGM_CLEAR_MASK);
    1e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5e:	85 81       	ldd	r24, Z+5	; 0x05
    1e60:	96 81       	ldd	r25, Z+6	; 0x06
    1e62:	98 2f       	mov	r25, r24
    1e64:	9c 7f       	andi	r25, 0xFC	; 252
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	89 2b       	or	r24, r25
    1e6a:	89 83       	std	Y+1, r24	; 0x01
		Pwm_u8arrClk_Prescaler[Pwm_enuSource1]=copy_TimeCfg->Pwm_u8Clk;
    1e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e70:	80 81       	ld	r24, Z
    1e72:	80 93 6e 01 	sts	0x016E, r24
		TCCR1B=TempVar;
    1e76:	ee e4       	ldi	r30, 0x4E	; 78
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	80 83       	st	Z, r24
    1e7e:	2c c0       	rjmp	.+88     	; 0x1ed8 <Pwm_vidInit+0x15e>
		break;
	case Pwm_enuSource2:
		TempVar = TCCR2;
    1e80:	e5 e4       	ldi	r30, 0x45	; 69
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	89 83       	std	Y+1, r24	; 0x01
		TempVar &= MODE_CLEAR_MASK ;	// will be &=
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	87 7b       	andi	r24, 0xB7	; 183
    1e8c:	89 83       	std	Y+1, r24	; 0x01
		TempVar |= (copy_TimeCfg->Pwm_u16CompareOutputMode|copy_TimeCfg->Pwm_WaveGenerationMode);
    1e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e90:	fc 81       	ldd	r31, Y+4	; 0x04
    1e92:	83 81       	ldd	r24, Z+3	; 0x03
    1e94:	94 81       	ldd	r25, Z+4	; 0x04
    1e96:	28 2f       	mov	r18, r24
    1e98:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e9c:	85 81       	ldd	r24, Z+5	; 0x05
    1e9e:	96 81       	ldd	r25, Z+6	; 0x06
    1ea0:	92 2f       	mov	r25, r18
    1ea2:	98 2b       	or	r25, r24
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	89 2b       	or	r24, r25
    1ea8:	89 83       	std	Y+1, r24	; 0x01
		TCCR2 = TempVar;
    1eaa:	e5 e4       	ldi	r30, 0x45	; 69
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	80 83       	st	Z, r24
		TIMSK |=(copy_TimeCfg->Pwm_u8OvfInterruptControl|copy_TimeCfg->Pwm_u8OcmInterruptControl);
    1eb2:	a9 e5       	ldi	r26, 0x59	; 89
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e9 e5       	ldi	r30, 0x59	; 89
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	20 81       	ld	r18, Z
    1ebc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ebe:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	89 2b       	or	r24, r25
    1eca:	82 2b       	or	r24, r18
    1ecc:	8c 93       	st	X, r24
		Pwm_u8arrClk_Prescaler[Pwm_enuSource2]=copy_TimeCfg->Pwm_u8Clk;
    1ece:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 93 6f 01 	sts	0x016F, r24
		break;
	}

	return Loc_enuErrorStatus;
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1eda:	26 96       	adiw	r28, 0x06	; 6
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <Pwm_StartTimer>:

Pwm_tenuErrorStatus Pwm_StartTimer(Pwm_ChannelNum copy_enuCh_Num,  u16 Value)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	27 97       	sbiw	r28, 0x07	; 7
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    1f02:	7d 83       	std	Y+5, r23	; 0x05
    1f04:	6c 83       	std	Y+4, r22	; 0x04
	Pwm_tenuErrorStatus Loc_enuErrorStatus;
	u8 TempVar;

	switch(copy_enuCh_Num)
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	3f 83       	std	Y+7, r19	; 0x07
    1f0e:	2e 83       	std	Y+6, r18	; 0x06
    1f10:	8e 81       	ldd	r24, Y+6	; 0x06
    1f12:	9f 81       	ldd	r25, Y+7	; 0x07
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	91 05       	cpc	r25, r1
    1f18:	a1 f1       	breq	.+104    	; 0x1f82 <Pwm_StartTimer+0x96>
    1f1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f1e:	22 30       	cpi	r18, 0x02	; 2
    1f20:	31 05       	cpc	r19, r1
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <Pwm_StartTimer+0x42>
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f0       	breq	.+26     	; 0x1f46 <Pwm_StartTimer+0x5a>
    1f2c:	75 c0       	rjmp	.+234    	; 0x2018 <Pwm_StartTimer+0x12c>
    1f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f30:	3f 81       	ldd	r19, Y+7	; 0x07
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	e1 f1       	breq	.+120    	; 0x1fb0 <Pwm_StartTimer+0xc4>
    1f38:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	91 05       	cpc	r25, r1
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <Pwm_StartTimer+0x58>
    1f42:	4d c0       	rjmp	.+154    	; 0x1fde <Pwm_StartTimer+0xf2>
    1f44:	69 c0       	rjmp	.+210    	; 0x2018 <Pwm_StartTimer+0x12c>
	{
	case Channel_0:
		if(Value > MAX_VALUE_TIMER0)
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	21 f0       	breq	.+8      	; 0x1f58 <Pwm_StartTimer+0x6c>
    1f50:	18 f0       	brcs	.+6      	; 0x1f58 <Pwm_StartTimer+0x6c>
		{
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    1f56:	60 c0       	rjmp	.+192    	; 0x2018 <Pwm_StartTimer+0x12c>
		}
		else
		{

			OCR0 = Value;
    1f58:	ec e5       	ldi	r30, 0x5C	; 92
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	80 83       	st	Z, r24
			TempVar = TCCR0;
    1f60:	e3 e5       	ldi	r30, 0x53	; 83
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	89 83       	std	Y+1, r24	; 0x01
			TempVar &=~ CLK_CLEAR_MASK;
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	88 7f       	andi	r24, 0xF8	; 248
    1f6c:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource0];
    1f6e:	90 91 6d 01 	lds	r25, 0x016D
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	89 2b       	or	r24, r25
    1f76:	89 83       	std	Y+1, r24	; 0x01
			TCCR0 = TempVar;
    1f78:	e3 e5       	ldi	r30, 0x53	; 83
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	4b c0       	rjmp	.+150    	; 0x2018 <Pwm_StartTimer+0x12c>
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
		}
		else
		{
//			SET_BIT(PORTA,0);
			OCR1A = Value;
    1f82:	ea e4       	ldi	r30, 0x4A	; 74
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
    1f88:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
			TempVar=TCCR1B;// this Reg which have the CLK bits
    1f8e:	ee e4       	ldi	r30, 0x4E	; 78
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	89 83       	std	Y+1, r24	; 0x01
			TempVar&=~CLK_CLEAR_MASK;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	88 7f       	andi	r24, 0xF8	; 248
    1f9a:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource1];
    1f9c:	90 91 6e 01 	lds	r25, 0x016E
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	89 2b       	or	r24, r25
    1fa4:	89 83       	std	Y+1, r24	; 0x01
			TCCR1B=TempVar;
    1fa6:	ee e4       	ldi	r30, 0x4E	; 78
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	34 c0       	rjmp	.+104    	; 0x2018 <Pwm_StartTimer+0x12c>
		{
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
		}
		else
		{
			OCR1B = Value;
    1fb0:	e8 e4       	ldi	r30, 0x48	; 72
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
			TempVar=TCCR1B;// this Reg which have the CLK bits
    1fbc:	ee e4       	ldi	r30, 0x4E	; 78
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	89 83       	std	Y+1, r24	; 0x01
			TempVar&=~CLK_CLEAR_MASK;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	88 7f       	andi	r24, 0xF8	; 248
    1fc8:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource1];
    1fca:	90 91 6e 01 	lds	r25, 0x016E
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	89 2b       	or	r24, r25
    1fd2:	89 83       	std	Y+1, r24	; 0x01
			TCCR1B=TempVar;
    1fd4:	ee e4       	ldi	r30, 0x4E	; 78
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	80 83       	st	Z, r24
    1fdc:	1d c0       	rjmp	.+58     	; 0x2018 <Pwm_StartTimer+0x12c>

		}
		break;

	case Channel_2:
		if(Value > MAX_VALUE_TIMER2)
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	21 f0       	breq	.+8      	; 0x1ff0 <Pwm_StartTimer+0x104>
    1fe8:	18 f0       	brcs	.+6      	; 0x1ff0 <Pwm_StartTimer+0x104>
		{
			Loc_enuErrorStatus = Pwm_enuWrongParamValue;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	8a 83       	std	Y+2, r24	; 0x02
    1fee:	14 c0       	rjmp	.+40     	; 0x2018 <Pwm_StartTimer+0x12c>
		}
		else
		{
			OCR2 = Value;
    1ff0:	e3 e4       	ldi	r30, 0x43	; 67
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	80 83       	st	Z, r24
			TempVar = TCCR2;
    1ff8:	e5 e4       	ldi	r30, 0x45	; 69
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	89 83       	std	Y+1, r24	; 0x01
			TempVar &=~ CLK_CLEAR_MASK;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	88 7f       	andi	r24, 0xF8	; 248
    2004:	89 83       	std	Y+1, r24	; 0x01
			TempVar |= Pwm_u8arrClk_Prescaler[Pwm_enuSource2];
    2006:	90 91 6f 01 	lds	r25, 0x016F
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	89 2b       	or	r24, r25
    200e:	89 83       	std	Y+1, r24	; 0x01
			TCCR2 = TempVar;
    2010:	e5 e4       	ldi	r30, 0x45	; 69
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	80 83       	st	Z, r24

	default:

		break;
	}
	return Loc_enuErrorStatus;
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
}
    201a:	27 96       	adiw	r28, 0x07	; 7
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <Pwm_enuSetOutCompareMatchVal>:

Pwm_tenuErrorStatus Pwm_enuSetOutCompareMatchVal(Pwm_ChannelNum copy_enuCh_Num,  u16 Value)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <Pwm_enuSetOutCompareMatchVal+0x6>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <Pwm_enuSetOutCompareMatchVal+0x8>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <Pwm_enuSetOutCompareMatchVal+0xa>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	8a 83       	std	Y+2, r24	; 0x02
    203c:	7c 83       	std	Y+4, r23	; 0x04
    203e:	6b 83       	std	Y+3, r22	; 0x03
	Pwm_tenuErrorStatus Loc_enuErrorStatus= Pwm_enuOk;
    2040:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_enuCh_Num)
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	3e 83       	std	Y+6, r19	; 0x06
    204a:	2d 83       	std	Y+5, r18	; 0x05
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	91 05       	cpc	r25, r1
    2054:	d1 f0       	breq	.+52     	; 0x208a <Pwm_enuSetOutCompareMatchVal+0x5e>
    2056:	2d 81       	ldd	r18, Y+5	; 0x05
    2058:	3e 81       	ldd	r19, Y+6	; 0x06
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	2c f4       	brge	.+10     	; 0x206a <Pwm_enuSetOutCompareMatchVal+0x3e>
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	61 f0       	breq	.+24     	; 0x2080 <Pwm_enuSetOutCompareMatchVal+0x54>
    2068:	22 c0       	rjmp	.+68     	; 0x20ae <Pwm_enuSetOutCompareMatchVal+0x82>
    206a:	2d 81       	ldd	r18, Y+5	; 0x05
    206c:	3e 81       	ldd	r19, Y+6	; 0x06
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	91 f0       	breq	.+36     	; 0x2098 <Pwm_enuSetOutCompareMatchVal+0x6c>
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	91 05       	cpc	r25, r1
    207c:	a1 f0       	breq	.+40     	; 0x20a6 <Pwm_enuSetOutCompareMatchVal+0x7a>
    207e:	17 c0       	rjmp	.+46     	; 0x20ae <Pwm_enuSetOutCompareMatchVal+0x82>
	{
	case Channel_0:
		OCR0 = (u8)Value;
    2080:	ec e5       	ldi	r30, 0x5C	; 92
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	80 83       	st	Z, r24
    2088:	12 c0       	rjmp	.+36     	; 0x20ae <Pwm_enuSetOutCompareMatchVal+0x82>
		break;
	case Channel_1A:
		OCR1A = Value;
    208a:	ea e4       	ldi	r30, 0x4A	; 74
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	0b c0       	rjmp	.+22     	; 0x20ae <Pwm_enuSetOutCompareMatchVal+0x82>
		break;
	case Channel_1B:
		OCR1B = Value;
    2098:	e8 e4       	ldi	r30, 0x48	; 72
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	04 c0       	rjmp	.+8      	; 0x20ae <Pwm_enuSetOutCompareMatchVal+0x82>
		break;
	case Channel_2:
		OCR2 = (u8)Value;
    20a6:	e3 e4       	ldi	r30, 0x43	; 67
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	80 83       	st	Z, r24
		break;
	}
	return Loc_enuErrorStatus;
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b0:	26 96       	adiw	r28, 0x06	; 6
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <Pwm_enuSetIcrVal>:


void Pwm_enuSetIcrVal(u16 Copy_u16Val)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <Pwm_enuSetIcrVal+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16Val;
    20d0:	e6 e4       	ldi	r30, 0x46	; 70
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <Pwm_StopTimer>:


void Pwm_StopTimer(Pwm_enuSourceNum Channel)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <Pwm_StopTimer+0x6>
    20ec:	0f 92       	push	r0
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	89 83       	std	Y+1, r24	; 0x01
	switch(Channel)
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	3b 83       	std	Y+3, r19	; 0x03
    20fc:	2a 83       	std	Y+2, r18	; 0x02
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	91 05       	cpc	r25, r1
    2106:	89 f0       	breq	.+34     	; 0x212a <Pwm_StopTimer+0x44>
    2108:	2a 81       	ldd	r18, Y+2	; 0x02
    210a:	3b 81       	ldd	r19, Y+3	; 0x03
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	31 05       	cpc	r19, r1
    2110:	a1 f0       	breq	.+40     	; 0x213a <Pwm_StopTimer+0x54>
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	b9 f4       	brne	.+46     	; 0x2148 <Pwm_StopTimer+0x62>
	{
	case Pwm_enuSource0:
		TCCR0 &=~(CLK_CLEAR_MASK);
    211a:	a3 e5       	ldi	r26, 0x53	; 83
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e3 e5       	ldi	r30, 0x53	; 83
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	88 7f       	andi	r24, 0xF8	; 248
    2126:	8c 93       	st	X, r24
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <Pwm_StopTimer+0x62>
		break;
	case Pwm_enuSource1:
		TCCR1B &=~(CLK_CLEAR_MASK);
    212a:	ae e4       	ldi	r26, 0x4E	; 78
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ee e4       	ldi	r30, 0x4E	; 78
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	88 7f       	andi	r24, 0xF8	; 248
    2136:	8c 93       	st	X, r24
    2138:	07 c0       	rjmp	.+14     	; 0x2148 <Pwm_StopTimer+0x62>
		break;
	case Pwm_enuSource2:
		TCCR2 &=~(CLK_CLEAR_MASK);
    213a:	a5 e4       	ldi	r26, 0x45	; 69
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e5 e4       	ldi	r30, 0x45	; 69
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	88 7f       	andi	r24, 0xF8	; 248
    2146:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <Pwm_enuRegisterOvfCbf>:

Pwm_tenuErrorStatus Pwm_enuRegisterOvfCbf(pfunc CallBackFn,Pwm_enuSourceNum Pwm_SrcNum)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <Pwm_enuRegisterOvfCbf+0x6>
    215a:	00 d0       	rcall	.+0      	; 0x215c <Pwm_enuRegisterOvfCbf+0x8>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	9b 83       	std	Y+3, r25	; 0x03
    2162:	8a 83       	std	Y+2, r24	; 0x02
    2164:	6c 83       	std	Y+4, r22	; 0x04
	Pwm_tenuErrorStatus Loc_enuStatusError = Pwm_enuOk;
    2166:	19 82       	std	Y+1, r1	; 0x01

	if(CallBackFn)
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	9b 81       	ldd	r25, Y+3	; 0x03
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f0       	breq	.+26     	; 0x218a <Pwm_enuRegisterOvfCbf+0x36>
	{

		Ovf_CallBackfunc[Pwm_SrcNum] = CallBackFn;
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	fc 01       	movw	r30, r24
    217c:	e0 59       	subi	r30, 0x90	; 144
    217e:	fe 4f       	sbci	r31, 0xFE	; 254
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	80 83       	st	Z, r24
    2188:	02 c0       	rjmp	.+4      	; 0x218e <Pwm_enuRegisterOvfCbf+0x3a>
	}
	else
	{
		Loc_enuStatusError = Pwm_enuNullPtr;
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuStatusError ;
    218e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <Pwm_enuRegisterOcmCbf>:

Pwm_tenuErrorStatus Pwm_enuRegisterOcmCbf(pfunc CallBackFn,Pwm_ChannelNum Pwm_SrcNum)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <Pwm_enuRegisterOcmCbf+0x6>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <Pwm_enuRegisterOcmCbf+0x8>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9b 83       	std	Y+3, r25	; 0x03
    21ac:	8a 83       	std	Y+2, r24	; 0x02
    21ae:	6c 83       	std	Y+4, r22	; 0x04
	Pwm_tenuErrorStatus Loc_enuStatusError = Pwm_enuOk;
    21b0:	19 82       	std	Y+1, r1	; 0x01

	if(CallBackFn)
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	69 f0       	breq	.+26     	; 0x21d4 <Pwm_enuRegisterOcmCbf+0x36>
	{

		Ocm_CallBackfunc[Pwm_SrcNum] = CallBackFn;
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	fc 01       	movw	r30, r24
    21c6:	ea 58       	subi	r30, 0x8A	; 138
    21c8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <Pwm_enuRegisterOcmCbf+0x3a>
	}
	else
	{
		Loc_enuStatusError = Pwm_enuNullPtr;
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuStatusError ;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    21e8:	1f 92       	push	r1
    21ea:	0f 92       	push	r0
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	0f 92       	push	r0
    21f0:	11 24       	eor	r1, r1
    21f2:	2f 93       	push	r18
    21f4:	3f 93       	push	r19
    21f6:	4f 93       	push	r20
    21f8:	5f 93       	push	r21
    21fa:	6f 93       	push	r22
    21fc:	7f 93       	push	r23
    21fe:	8f 93       	push	r24
    2200:	9f 93       	push	r25
    2202:	af 93       	push	r26
    2204:	bf 93       	push	r27
    2206:	ef 93       	push	r30
    2208:	ff 93       	push	r31
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	if(Ovf_CallBackfunc[Pwm_enuSource0])
    2212:	80 91 70 01 	lds	r24, 0x0170
    2216:	90 91 71 01 	lds	r25, 0x0171
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	29 f0       	breq	.+10     	; 0x2228 <__vector_11+0x40>
	{
		Ovf_CallBackfunc[Pwm_enuSource0]();
    221e:	e0 91 70 01 	lds	r30, 0x0170
    2222:	f0 91 71 01 	lds	r31, 0x0171
    2226:	09 95       	icall
	}
	//		SET_BIT(PORTA,PORT_u8PIN_1);
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	ff 91       	pop	r31
    222e:	ef 91       	pop	r30
    2230:	bf 91       	pop	r27
    2232:	af 91       	pop	r26
    2234:	9f 91       	pop	r25
    2236:	8f 91       	pop	r24
    2238:	7f 91       	pop	r23
    223a:	6f 91       	pop	r22
    223c:	5f 91       	pop	r21
    223e:	4f 91       	pop	r20
    2240:	3f 91       	pop	r19
    2242:	2f 91       	pop	r18
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	0f 90       	pop	r0
    224a:	1f 90       	pop	r1
    224c:	18 95       	reti

0000224e <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    224e:	1f 92       	push	r1
    2250:	0f 92       	push	r0
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	0f 92       	push	r0
    2256:	11 24       	eor	r1, r1
    2258:	2f 93       	push	r18
    225a:	3f 93       	push	r19
    225c:	4f 93       	push	r20
    225e:	5f 93       	push	r21
    2260:	6f 93       	push	r22
    2262:	7f 93       	push	r23
    2264:	8f 93       	push	r24
    2266:	9f 93       	push	r25
    2268:	af 93       	push	r26
    226a:	bf 93       	push	r27
    226c:	ef 93       	push	r30
    226e:	ff 93       	push	r31
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
	if(Ovf_CallBackfunc[Pwm_enuSource1])
    2278:	80 91 72 01 	lds	r24, 0x0172
    227c:	90 91 73 01 	lds	r25, 0x0173
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	29 f0       	breq	.+10     	; 0x228e <__vector_9+0x40>
	{
		//	static u16 Loc_u16No_of_ovf=0;
		Ovf_CallBackfunc[Pwm_enuSource1]();
    2284:	e0 91 72 01 	lds	r30, 0x0172
    2288:	f0 91 73 01 	lds	r31, 0x0173
    228c:	09 95       	icall
	}
}
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	ff 91       	pop	r31
    2294:	ef 91       	pop	r30
    2296:	bf 91       	pop	r27
    2298:	af 91       	pop	r26
    229a:	9f 91       	pop	r25
    229c:	8f 91       	pop	r24
    229e:	7f 91       	pop	r23
    22a0:	6f 91       	pop	r22
    22a2:	5f 91       	pop	r21
    22a4:	4f 91       	pop	r20
    22a6:	3f 91       	pop	r19
    22a8:	2f 91       	pop	r18
    22aa:	0f 90       	pop	r0
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	0f 90       	pop	r0
    22b0:	1f 90       	pop	r1
    22b2:	18 95       	reti

000022b4 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    22b4:	1f 92       	push	r1
    22b6:	0f 92       	push	r0
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	0f 92       	push	r0
    22bc:	11 24       	eor	r1, r1
    22be:	2f 93       	push	r18
    22c0:	3f 93       	push	r19
    22c2:	4f 93       	push	r20
    22c4:	5f 93       	push	r21
    22c6:	6f 93       	push	r22
    22c8:	7f 93       	push	r23
    22ca:	8f 93       	push	r24
    22cc:	9f 93       	push	r25
    22ce:	af 93       	push	r26
    22d0:	bf 93       	push	r27
    22d2:	ef 93       	push	r30
    22d4:	ff 93       	push	r31
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
	if(Ovf_CallBackfunc[Pwm_enuSource2])
    22de:	80 91 74 01 	lds	r24, 0x0174
    22e2:	90 91 75 01 	lds	r25, 0x0175
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	29 f0       	breq	.+10     	; 0x22f4 <__vector_5+0x40>
	{
		//	static u16 Loc_u16No_of_ovf=0;
		Ovf_CallBackfunc[Pwm_enuSource2]();
    22ea:	e0 91 74 01 	lds	r30, 0x0174
    22ee:	f0 91 75 01 	lds	r31, 0x0175
    22f2:	09 95       	icall
	}
}
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	ff 91       	pop	r31
    22fa:	ef 91       	pop	r30
    22fc:	bf 91       	pop	r27
    22fe:	af 91       	pop	r26
    2300:	9f 91       	pop	r25
    2302:	8f 91       	pop	r24
    2304:	7f 91       	pop	r23
    2306:	6f 91       	pop	r22
    2308:	5f 91       	pop	r21
    230a:	4f 91       	pop	r20
    230c:	3f 91       	pop	r19
    230e:	2f 91       	pop	r18
    2310:	0f 90       	pop	r0
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	0f 90       	pop	r0
    2316:	1f 90       	pop	r1
    2318:	18 95       	reti

0000231a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    231a:	1f 92       	push	r1
    231c:	0f 92       	push	r0
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	0f 92       	push	r0
    2322:	11 24       	eor	r1, r1
    2324:	2f 93       	push	r18
    2326:	3f 93       	push	r19
    2328:	4f 93       	push	r20
    232a:	5f 93       	push	r21
    232c:	6f 93       	push	r22
    232e:	7f 93       	push	r23
    2330:	8f 93       	push	r24
    2332:	9f 93       	push	r25
    2334:	af 93       	push	r26
    2336:	bf 93       	push	r27
    2338:	ef 93       	push	r30
    233a:	ff 93       	push	r31
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_0])
    2344:	80 91 76 01 	lds	r24, 0x0176
    2348:	90 91 77 01 	lds	r25, 0x0177
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	29 f0       	breq	.+10     	; 0x235a <__vector_10+0x40>
	{
		//			SET_BIT(PORTA,PORT_u8PIN_0);
		Ocm_CallBackfunc[Channel_0]();
    2350:	e0 91 76 01 	lds	r30, 0x0176
    2354:	f0 91 77 01 	lds	r31, 0x0177
    2358:	09 95       	icall
	}
}
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	7f 91       	pop	r23
    236c:	6f 91       	pop	r22
    236e:	5f 91       	pop	r21
    2370:	4f 91       	pop	r20
    2372:	3f 91       	pop	r19
    2374:	2f 91       	pop	r18
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	0f 90       	pop	r0
    237c:	1f 90       	pop	r1
    237e:	18 95       	reti

00002380 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	2f 93       	push	r18
    238c:	3f 93       	push	r19
    238e:	4f 93       	push	r20
    2390:	5f 93       	push	r21
    2392:	6f 93       	push	r22
    2394:	7f 93       	push	r23
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	af 93       	push	r26
    239c:	bf 93       	push	r27
    239e:	ef 93       	push	r30
    23a0:	ff 93       	push	r31
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_1A])
    23aa:	80 91 78 01 	lds	r24, 0x0178
    23ae:	90 91 79 01 	lds	r25, 0x0179
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	29 f0       	breq	.+10     	; 0x23c0 <__vector_7+0x40>
	{
		//SET_BIT(PORTA,PORT_u8PIN_0);
		Ocm_CallBackfunc[Channel_1A]();
    23b6:	e0 91 78 01 	lds	r30, 0x0178
    23ba:	f0 91 79 01 	lds	r31, 0x0179
    23be:	09 95       	icall
	}
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	ff 91       	pop	r31
    23c6:	ef 91       	pop	r30
    23c8:	bf 91       	pop	r27
    23ca:	af 91       	pop	r26
    23cc:	9f 91       	pop	r25
    23ce:	8f 91       	pop	r24
    23d0:	7f 91       	pop	r23
    23d2:	6f 91       	pop	r22
    23d4:	5f 91       	pop	r21
    23d6:	4f 91       	pop	r20
    23d8:	3f 91       	pop	r19
    23da:	2f 91       	pop	r18
    23dc:	0f 90       	pop	r0
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	0f 90       	pop	r0
    23e2:	1f 90       	pop	r1
    23e4:	18 95       	reti

000023e6 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
    23e6:	1f 92       	push	r1
    23e8:	0f 92       	push	r0
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	0f 92       	push	r0
    23ee:	11 24       	eor	r1, r1
    23f0:	2f 93       	push	r18
    23f2:	3f 93       	push	r19
    23f4:	4f 93       	push	r20
    23f6:	5f 93       	push	r21
    23f8:	6f 93       	push	r22
    23fa:	7f 93       	push	r23
    23fc:	8f 93       	push	r24
    23fe:	9f 93       	push	r25
    2400:	af 93       	push	r26
    2402:	bf 93       	push	r27
    2404:	ef 93       	push	r30
    2406:	ff 93       	push	r31
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_1B])
    2410:	80 91 7a 01 	lds	r24, 0x017A
    2414:	90 91 7b 01 	lds	r25, 0x017B
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <__vector_8+0x40>
	{
		//SET_BIT(PORTA,PORT_u8PIN_0);
		Ocm_CallBackfunc[Channel_1B]();
    241c:	e0 91 7a 01 	lds	r30, 0x017A
    2420:	f0 91 7b 01 	lds	r31, 0x017B
    2424:	09 95       	icall
	}
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	ff 91       	pop	r31
    242c:	ef 91       	pop	r30
    242e:	bf 91       	pop	r27
    2430:	af 91       	pop	r26
    2432:	9f 91       	pop	r25
    2434:	8f 91       	pop	r24
    2436:	7f 91       	pop	r23
    2438:	6f 91       	pop	r22
    243a:	5f 91       	pop	r21
    243c:	4f 91       	pop	r20
    243e:	3f 91       	pop	r19
    2440:	2f 91       	pop	r18
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	2f 93       	push	r18
    2458:	3f 93       	push	r19
    245a:	4f 93       	push	r20
    245c:	5f 93       	push	r21
    245e:	6f 93       	push	r22
    2460:	7f 93       	push	r23
    2462:	8f 93       	push	r24
    2464:	9f 93       	push	r25
    2466:	af 93       	push	r26
    2468:	bf 93       	push	r27
    246a:	ef 93       	push	r30
    246c:	ff 93       	push	r31
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
	if(Ocm_CallBackfunc[Channel_2])
    2476:	80 91 7c 01 	lds	r24, 0x017C
    247a:	90 91 7d 01 	lds	r25, 0x017D
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	29 f0       	breq	.+10     	; 0x248c <__vector_4+0x40>
	{
		Ocm_CallBackfunc[Channel_2]();
    2482:	e0 91 7c 01 	lds	r30, 0x017C
    2486:	f0 91 7d 01 	lds	r31, 0x017D
    248a:	09 95       	icall
	}
}
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	ff 91       	pop	r31
    2492:	ef 91       	pop	r30
    2494:	bf 91       	pop	r27
    2496:	af 91       	pop	r26
    2498:	9f 91       	pop	r25
    249a:	8f 91       	pop	r24
    249c:	7f 91       	pop	r23
    249e:	6f 91       	pop	r22
    24a0:	5f 91       	pop	r21
    24a2:	4f 91       	pop	r20
    24a4:	3f 91       	pop	r19
    24a6:	2f 91       	pop	r18
    24a8:	0f 90       	pop	r0
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	0f 90       	pop	r0
    24ae:	1f 90       	pop	r1
    24b0:	18 95       	reti

000024b2 <Servo_vidInit>:


extern const Servo_tCfg Servo_Cfg[SERVO_MAX_NUM];

void Servo_vidInit(Servo_tCfg* Servo_strCfg)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	61 97       	sbiw	r28, 0x11	; 17
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	9f 87       	std	Y+15, r25	; 0x0f
    24c8:	8e 87       	std	Y+14, r24	; 0x0e
	u8 iterator;
	Pwm_ConfigType Pwm_strCfg;
	s32 Mapping = 10.6 * Servo_strCfg->InitialAngle + 530;
    24ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    24cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    24ce:	80 81       	ld	r24, Z
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	aa 27       	eor	r26, r26
    24d6:	97 fd       	sbrc	r25, 7
    24d8:	a0 95       	com	r26
    24da:	ba 2f       	mov	r27, r26
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	2a e9       	ldi	r18, 0x9A	; 154
    24ee:	39 e9       	ldi	r19, 0x99	; 153
    24f0:	49 e2       	ldi	r20, 0x29	; 41
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e8       	ldi	r19, 0x80	; 128
    2504:	44 e0       	ldi	r20, 0x04	; 4
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	ab 83       	std	Y+3, r26	; 0x03
    2522:	bc 83       	std	Y+4, r27	; 0x04
	for (iterator=0; iterator<SERVO_MAX_NUM ; iterator++)
    2524:	1d 82       	std	Y+5, r1	; 0x05
    2526:	49 c0       	rjmp	.+146    	; 0x25ba <Servo_vidInit+0x108>
	{

		switch(Servo_strCfg->ChNum)
    2528:	ee 85       	ldd	r30, Y+14	; 0x0e
    252a:	ff 85       	ldd	r31, Y+15	; 0x0f
    252c:	81 81       	ldd	r24, Z+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	39 8b       	std	Y+17, r19	; 0x11
    2534:	28 8b       	std	Y+16, r18	; 0x10
    2536:	88 89       	ldd	r24, Y+16	; 0x10
    2538:	99 89       	ldd	r25, Y+17	; 0x11
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	31 f0       	breq	.+12     	; 0x254a <Servo_vidInit+0x98>
    253e:	28 89       	ldd	r18, Y+16	; 0x10
    2540:	39 89       	ldd	r19, Y+17	; 0x11
    2542:	21 30       	cpi	r18, 0x01	; 1
    2544:	31 05       	cpc	r19, r1
    2546:	d1 f0       	breq	.+52     	; 0x257c <Servo_vidInit+0xca>
    2548:	31 c0       	rjmp	.+98     	; 0x25ac <Servo_vidInit+0xfa>
		{
		break;
		case Pwm_enuCh1A:
			Pwm_strCfg.Pwm_SourceNo=Pwm_enuSource1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	8d 87       	std	Y+13, r24	; 0x0d
			Pwm_strCfg.Pwm_WaveGenerationMode=PWM_u8MODE_CH1_FAST_MODE_TOP_ICR1;
    254e:	8a e1       	ldi	r24, 0x1A	; 26
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9c 87       	std	Y+12, r25	; 0x0c
    2554:	8b 87       	std	Y+11, r24	; 0x0b
			Pwm_strCfg.Pwm_u16CompareOutputMode=PWM_u8TIM1_COM_CLR_OC1A;
    2556:	80 e8       	ldi	r24, 0x80	; 128
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9a 87       	std	Y+10, r25	; 0x0a
    255c:	89 87       	std	Y+9, r24	; 0x09
			Pwm_strCfg.Pwm_u8Clk=PWM_CLK_CH_01_PRESCALER_8;
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	8e 83       	std	Y+6, r24	; 0x06
			Pwm_strCfg.Pwm_u8OcmInterruptControl=0;
    2562:	18 86       	std	Y+8, r1	; 0x08
			Pwm_strCfg.Pwm_u8OvfInterruptControl=0;
    2564:	1f 82       	std	Y+7, r1	; 0x07
			Pwm_vidInit(&Pwm_strCfg);
    2566:	ce 01       	movw	r24, r28
    2568:	06 96       	adiw	r24, 0x06	; 6
    256a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <Pwm_vidInit>
			Pwm_StartTimer(Channel_1A,Mapping);
    256e:	29 81       	ldd	r18, Y+1	; 0x01
    2570:	3a 81       	ldd	r19, Y+2	; 0x02
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	b9 01       	movw	r22, r18
    2576:	0e 94 76 0f 	call	0x1eec	; 0x1eec <Pwm_StartTimer>
    257a:	18 c0       	rjmp	.+48     	; 0x25ac <Servo_vidInit+0xfa>
			break;
		case Pwm_enuCh1B:
			Pwm_strCfg.Pwm_SourceNo=Pwm_enuSource1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	8d 87       	std	Y+13, r24	; 0x0d
			Pwm_strCfg.Pwm_WaveGenerationMode=PWM_u8MODE_CH1_FAST_MODE_TOP_ICR1;
    2580:	8a e1       	ldi	r24, 0x1A	; 26
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9c 87       	std	Y+12, r25	; 0x0c
    2586:	8b 87       	std	Y+11, r24	; 0x0b
			Pwm_strCfg.Pwm_u16CompareOutputMode=PWM_u8TIM1_COM_SET_OC1B;
    2588:	80 e3       	ldi	r24, 0x30	; 48
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9a 87       	std	Y+10, r25	; 0x0a
    258e:	89 87       	std	Y+9, r24	; 0x09
			Pwm_strCfg.Pwm_u8Clk=PWM_CLK_CH_01_PRESCALER_8;
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	8e 83       	std	Y+6, r24	; 0x06
			Pwm_strCfg.Pwm_u8OcmInterruptControl=0;
    2594:	18 86       	std	Y+8, r1	; 0x08
			Pwm_strCfg.Pwm_u8OvfInterruptControl=0;
    2596:	1f 82       	std	Y+7, r1	; 0x07
			Pwm_vidInit(&Pwm_strCfg);
    2598:	ce 01       	movw	r24, r28
    259a:	06 96       	adiw	r24, 0x06	; 6
    259c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <Pwm_vidInit>
			Pwm_StartTimer(Channel_1B,Mapping);
    25a0:	29 81       	ldd	r18, Y+1	; 0x01
    25a2:	3a 81       	ldd	r19, Y+2	; 0x02
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	b9 01       	movw	r22, r18
    25a8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <Pwm_StartTimer>
			break;
		}

		Pwm_enuSetIcrVal(20000);
    25ac:	80 e2       	ldi	r24, 0x20	; 32
    25ae:	9e e4       	ldi	r25, 0x4E	; 78
    25b0:	0e 94 61 10 	call	0x20c2	; 0x20c2 <Pwm_enuSetIcrVal>
void Servo_vidInit(Servo_tCfg* Servo_strCfg)
{
	u8 iterator;
	Pwm_ConfigType Pwm_strCfg;
	s32 Mapping = 10.6 * Servo_strCfg->InitialAngle + 530;
	for (iterator=0; iterator<SERVO_MAX_NUM ; iterator++)
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	88 23       	and	r24, r24
    25be:	09 f4       	brne	.+2      	; 0x25c2 <Servo_vidInit+0x110>
    25c0:	b3 cf       	rjmp	.-154    	; 0x2528 <Servo_vidInit+0x76>
			break;
		}

		Pwm_enuSetIcrVal(20000);
	}
}
    25c2:	61 96       	adiw	r28, 0x11	; 17
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <Servo_vidSetAngle>:


void Servo_vidSetAngle(u8 Motor_u8Name,u16 Servo_u16AngleVal)
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	29 97       	sbiw	r28, 0x09	; 9
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	7f 83       	std	Y+7, r23	; 0x07
    25ec:	6e 83       	std	Y+6, r22	; 0x06
	u32 MappingVal = 10.6 *Servo_u16AngleVal + 530 ;
    25ee:	8e 81       	ldd	r24, Y+6	; 0x06
    25f0:	9f 81       	ldd	r25, Y+7	; 0x07
    25f2:	cc 01       	movw	r24, r24
    25f4:	a0 e0       	ldi	r26, 0x00	; 0
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	2a e9       	ldi	r18, 0x9A	; 154
    260a:	39 e9       	ldi	r19, 0x99	; 153
    260c:	49 e2       	ldi	r20, 0x29	; 41
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e8       	ldi	r19, 0x80	; 128
    2620:	44 e0       	ldi	r20, 0x04	; 4
    2622:	54 e4       	ldi	r21, 0x44	; 68
    2624:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	ab 83       	std	Y+3, r26	; 0x03
    263e:	bc 83       	std	Y+4, r27	; 0x04
	switch(Servo_Cfg[Motor_u8Name].ChNum)
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	fc 01       	movw	r30, r24
    264c:	e7 59       	subi	r30, 0x97	; 151
    264e:	fe 4f       	sbci	r31, 0xFE	; 254
    2650:	80 81       	ld	r24, Z
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	39 87       	std	Y+9, r19	; 0x09
    2658:	28 87       	std	Y+8, r18	; 0x08
    265a:	88 85       	ldd	r24, Y+8	; 0x08
    265c:	99 85       	ldd	r25, Y+9	; 0x09
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	31 f0       	breq	.+12     	; 0x266e <Servo_vidSetAngle+0x9a>
    2662:	28 85       	ldd	r18, Y+8	; 0x08
    2664:	39 85       	ldd	r19, Y+9	; 0x09
    2666:	21 30       	cpi	r18, 0x01	; 1
    2668:	31 05       	cpc	r19, r1
    266a:	41 f0       	breq	.+16     	; 0x267c <Servo_vidSetAngle+0xa8>
    266c:	0d c0       	rjmp	.+26     	; 0x2688 <Servo_vidSetAngle+0xb4>
	{
	case Pwm_enuCh1A:
		Pwm_enuSetOutCompareMatchVal(Channel_1A,MappingVal);
    266e:	29 81       	ldd	r18, Y+1	; 0x01
    2670:	3a 81       	ldd	r19, Y+2	; 0x02
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	b9 01       	movw	r22, r18
    2676:	0e 94 16 10 	call	0x202c	; 0x202c <Pwm_enuSetOutCompareMatchVal>
    267a:	06 c0       	rjmp	.+12     	; 0x2688 <Servo_vidSetAngle+0xb4>
		break;
	case Pwm_enuCh1B:
		Pwm_enuSetOutCompareMatchVal(Channel_1B,MappingVal);
    267c:	29 81       	ldd	r18, Y+1	; 0x01
    267e:	3a 81       	ldd	r19, Y+2	; 0x02
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	b9 01       	movw	r22, r18
    2684:	0e 94 16 10 	call	0x202c	; 0x202c <Pwm_enuSetOutCompareMatchVal>
		break;
	}
}
    2688:	29 96       	adiw	r28, 0x09	; 9
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <main>:
#include <avr/delay.h>



int main (void)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <main+0x6>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <main+0x8>
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <main+0xa>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
	Servo_tCfg ServCfg;
	u16 Adc_u16Val=0;
    26a8:	1c 82       	std	Y+4, r1	; 0x04
    26aa:	1b 82       	std	Y+3, r1	; 0x03
	u16 Angle;
	ServCfg.ChNum=Pwm_enuCh1A;
    26ac:	1e 82       	std	Y+6, r1	; 0x06
	ServCfg.InitialAngle=0;
    26ae:	1d 82       	std	Y+5, r1	; 0x05
	Port_vidInit();
    26b0:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <Port_vidInit>
	Servo_vidInit(&ServCfg);
    26b4:	ce 01       	movw	r24, r28
    26b6:	05 96       	adiw	r24, 0x05	; 5
    26b8:	0e 94 59 12 	call	0x24b2	; 0x24b2 <Servo_vidInit>
	Adc_vidInit();
    26bc:	0e 94 15 07 	call	0xe2a	; 0xe2a <Adc_vidInit>
	while (1)
	{
		Adc_vidStartConversion();
    26c0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Adc_vidStartConversion>
		Adc_u16Val=Adc_u16GetResult();
    26c4:	0e 94 4b 07 	call	0xe96	; 0xe96 <Adc_u16GetResult>
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
		Angle = (Adc_u16Val / (f32)5.7) ;
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	cc 01       	movw	r24, r24
    26d2:	a0 e0       	ldi	r26, 0x00	; 0
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	26 e6       	ldi	r18, 0x66	; 102
    26e8:	36 e6       	ldi	r19, 0x66	; 102
    26ea:	46 eb       	ldi	r20, 0xB6	; 182
    26ec:	50 e4       	ldi	r21, 0x40	; 64
    26ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9a 83       	std	Y+2, r25	; 0x02
    2704:	89 83       	std	Y+1, r24	; 0x01
		Servo_vidSetAngle(SERVO_NUM1,Angle);
    2706:	29 81       	ldd	r18, Y+1	; 0x01
    2708:	3a 81       	ldd	r19, Y+2	; 0x02
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	b9 01       	movw	r22, r18
    270e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <Servo_vidSetAngle>
    2712:	d6 cf       	rjmp	.-84     	; 0x26c0 <main+0x26>

00002714 <__prologue_saves__>:
    2714:	2f 92       	push	r2
    2716:	3f 92       	push	r3
    2718:	4f 92       	push	r4
    271a:	5f 92       	push	r5
    271c:	6f 92       	push	r6
    271e:	7f 92       	push	r7
    2720:	8f 92       	push	r8
    2722:	9f 92       	push	r9
    2724:	af 92       	push	r10
    2726:	bf 92       	push	r11
    2728:	cf 92       	push	r12
    272a:	df 92       	push	r13
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	ca 1b       	sub	r28, r26
    273e:	db 0b       	sbc	r29, r27
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	09 94       	ijmp

0000274c <__epilogue_restores__>:
    274c:	2a 88       	ldd	r2, Y+18	; 0x12
    274e:	39 88       	ldd	r3, Y+17	; 0x11
    2750:	48 88       	ldd	r4, Y+16	; 0x10
    2752:	5f 84       	ldd	r5, Y+15	; 0x0f
    2754:	6e 84       	ldd	r6, Y+14	; 0x0e
    2756:	7d 84       	ldd	r7, Y+13	; 0x0d
    2758:	8c 84       	ldd	r8, Y+12	; 0x0c
    275a:	9b 84       	ldd	r9, Y+11	; 0x0b
    275c:	aa 84       	ldd	r10, Y+10	; 0x0a
    275e:	b9 84       	ldd	r11, Y+9	; 0x09
    2760:	c8 84       	ldd	r12, Y+8	; 0x08
    2762:	df 80       	ldd	r13, Y+7	; 0x07
    2764:	ee 80       	ldd	r14, Y+6	; 0x06
    2766:	fd 80       	ldd	r15, Y+5	; 0x05
    2768:	0c 81       	ldd	r16, Y+4	; 0x04
    276a:	1b 81       	ldd	r17, Y+3	; 0x03
    276c:	aa 81       	ldd	r26, Y+2	; 0x02
    276e:	b9 81       	ldd	r27, Y+1	; 0x01
    2770:	ce 0f       	add	r28, r30
    2772:	d1 1d       	adc	r29, r1
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	ed 01       	movw	r28, r26
    2780:	08 95       	ret

00002782 <_exit>:
    2782:	f8 94       	cli

00002784 <__stop_program>:
    2784:	ff cf       	rjmp	.-2      	; 0x2784 <__stop_program>


Task_1_Volume.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000303a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  0000303a  000030ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002a60  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000013bf  00000000  00000000  00005b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00007087  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000071f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000aad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <main>
      7a:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e9       	ldi	r26, 0x98	; 152
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e9       	ldi	r24, 0x98	; 152
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Adc_vidInit>:
 * Return: it has no returns.
 **/
static void Adc_vidClearInterruptFlag(void);

void Adc_vidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (ADC_u8CH_0|ADC_u8RIGHT_ADJUSTMENT|ADC_u8AVCC);
     b40:	e7 e2       	ldi	r30, 0x27	; 39
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	80 83       	st	Z, r24
	ADCSRA = (ADC_u8INIT_CONTROL|ADC_u8CONVERSION_CONTROL|ADCSRA_AUTO_TRIG_DISABLE|ADC_u8DIVISION_FACTOR_8|ADC_u8ENABLE_INTERRUPT);
     b48:	e6 e2       	ldi	r30, 0x26	; 38
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	8b e0       	ldi	r24, 0x0B	; 11
     b4e:	80 83       	st	Z, r24
	SFIOR &=ADC_u8AUTO_TRIGGER_SOURCE ;// I make the macro ones to the bits that I don't need to change its state
     b50:	e0 e5       	ldi	r30, 0x50	; 80
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	e0 e5       	ldi	r30, 0x50	; 80
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1
									  // so I use &
}
     b5c:	0f 90       	pop	r0
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <Adc_vidControl>:

void Adc_vidControl(u8 copy_control)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	0f 92       	push	r0
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	89 83       	std	Y+1, r24	; 0x01
#if ADC_u8CONTROL == ADC_u8ENABLE
	SET_BIT(ADCSRA,7);
     b70:	a6 e2       	ldi	r26, 0x26	; 38
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e6 e2       	ldi	r30, 0x26	; 38
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	80 68       	ori	r24, 0x80	; 128
     b7c:	8c 93       	st	X, r24
#elif ADC_u8CONTROL == ADC_u8DISABLE
	CLR_BIT(ADCSRA,7);

#endif
}
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <Adc_vidStartConversion>:

void Adc_vidStartConversion(void)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADC_u8START_CONVERSION);
     b8e:	a6 e2       	ldi	r26, 0x26	; 38
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	8c 93       	st	X, r24
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <Adc_u16GetResult>:

u16 Adc_u16GetResult(void)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <Adc_u16GetResult+0x6>
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
	while(Adc_u8GetInterruptFlagValue()==0);
     bac:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Adc_u8GetInterruptFlagValue>
     bb0:	88 23       	and	r24, r24
     bb2:	e1 f3       	breq	.-8      	; 0xbac <Adc_u16GetResult+0xa>
	Adc_vidClearInterruptFlag();
     bb4:	0e 94 00 06 	call	0xc00	; 0xc00 <Adc_vidClearInterruptFlag>
	u16 Loc_RegValue = (ADCL | (ADCH <<8)) ;
     bb8:	e4 e2       	ldi	r30, 0x24	; 36
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	e5 e2       	ldi	r30, 0x25	; 37
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	98 2f       	mov	r25, r24
     bce:	88 27       	eor	r24, r24
     bd0:	82 2b       	or	r24, r18
     bd2:	93 2b       	or	r25, r19
     bd4:	9a 83       	std	Y+2, r25	; 0x02
     bd6:	89 83       	std	Y+1, r24	; 0x01
	return Loc_RegValue;
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <Adc_u8GetInterruptFlagValue>:

u8 Adc_u8GetInterruptFlagValue(void)
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(ADCSRA,4);
     bee:	e6 e2       	ldi	r30, 0x26	; 38
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	82 95       	swap	r24
     bf6:	8f 70       	andi	r24, 0x0F	; 15
     bf8:	81 70       	andi	r24, 0x01	; 1
}
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <Adc_vidClearInterruptFlag>:

static void Adc_vidClearInterruptFlag(void)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,4);
     c08:	a6 e2       	ldi	r26, 0x26	; 38
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e6 e2       	ldi	r30, 0x26	; 38
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 61       	ori	r24, 0x10	; 16
     c14:	8c 93       	st	X, r24
}
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <Dio_enuWriteChannelId>:
  Write on pin
  take two args Copy_u8ChannedId and Copy_u8Level
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuWriteChannelId(u8 Copy_u8ChannedId,u8 Copy_u8Level)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	27 97       	sbiw	r28, 0x07	; 7
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	8c 83       	std	Y+4, r24	; 0x04
     c32:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port = Copy_u8ChannedId/8 ;
     c38:	8c 81       	ldd	r24, Y+4	; 0x04
     c3a:	86 95       	lsr	r24
     c3c:	86 95       	lsr	r24
     c3e:	86 95       	lsr	r24
     c40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Pin = (Copy_u8ChannedId%8) ;
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	87 70       	andi	r24, 0x07	; 7
     c46:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8ChannedId<=32)
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	81 32       	cpi	r24, 0x21	; 33
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <Dio_enuWriteChannelId+0x34>
     c4e:	e1 c0       	rjmp	.+450    	; 0xe12 <Dio_enuWriteChannelId+0x1f6>
	{
		switch (Loc_u8Port)
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3f 83       	std	Y+7, r19	; 0x07
     c58:	2e 83       	std	Y+6, r18	; 0x06
     c5a:	8e 81       	ldd	r24, Y+6	; 0x06
     c5c:	9f 81       	ldd	r25, Y+7	; 0x07
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	09 f4       	brne	.+2      	; 0xc66 <Dio_enuWriteChannelId+0x4a>
     c64:	47 c0       	rjmp	.+142    	; 0xcf4 <Dio_enuWriteChannelId+0xd8>
     c66:	2e 81       	ldd	r18, Y+6	; 0x06
     c68:	3f 81       	ldd	r19, Y+7	; 0x07
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <Dio_enuWriteChannelId+0x5e>
     c70:	8e 81       	ldd	r24, Y+6	; 0x06
     c72:	9f 81       	ldd	r25, Y+7	; 0x07
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	71 f0       	breq	.+28     	; 0xc94 <Dio_enuWriteChannelId+0x78>
     c78:	ce c0       	rjmp	.+412    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
     c7a:	2e 81       	ldd	r18, Y+6	; 0x06
     c7c:	3f 81       	ldd	r19, Y+7	; 0x07
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <Dio_enuWriteChannelId+0x6a>
     c84:	67 c0       	rjmp	.+206    	; 0xd54 <Dio_enuWriteChannelId+0x138>
     c86:	8e 81       	ldd	r24, Y+6	; 0x06
     c88:	9f 81       	ldd	r25, Y+7	; 0x07
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	91 05       	cpc	r25, r1
     c8e:	09 f4       	brne	.+2      	; 0xc92 <Dio_enuWriteChannelId+0x76>
     c90:	91 c0       	rjmp	.+290    	; 0xdb4 <Dio_enuWriteChannelId+0x198>
     c92:	c1 c0       	rjmp	.+386    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
		{
		case PORT_A:

			if(Copy_u8Level==DIO_u8HIGH)
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	a1 f4       	brne	.+40     	; 0xcc2 <Dio_enuWriteChannelId+0xa6>
			{
				SET_BIT(PORTA,Loc_u8Pin);
     c9a:	ab e3       	ldi	r26, 0x3B	; 59
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	eb e3       	ldi	r30, 0x3B	; 59
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <Dio_enuWriteChannelId+0x9c>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <Dio_enuWriteChannelId+0x98>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	aa c0       	rjmp	.+340    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	88 23       	and	r24, r24
     cc6:	09 f0       	breq	.+2      	; 0xcca <Dio_enuWriteChannelId+0xae>
     cc8:	a6 c0       	rjmp	.+332    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTA,Loc_u8Pin);
     cca:	ab e3       	ldi	r26, 0x3B	; 59
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	eb e3       	ldi	r30, 0x3B	; 59
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <Dio_enuWriteChannelId+0xcc>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <Dio_enuWriteChannelId+0xc8>
     cec:	80 95       	com	r24
     cee:	84 23       	and	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	91 c0       	rjmp	.+290    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			}

			break;
		case PORT_B:
			if(Copy_u8Level==DIO_u8HIGH)
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	a1 f4       	brne	.+40     	; 0xd22 <Dio_enuWriteChannelId+0x106>
			{
				SET_BIT(PORTB,Loc_u8Pin);
     cfa:	a8 e3       	ldi	r26, 0x38	; 56
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e8 e3       	ldi	r30, 0x38	; 56
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <Dio_enuWriteChannelId+0xfc>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <Dio_enuWriteChannelId+0xf8>
     d1c:	84 2b       	or	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	7a c0       	rjmp	.+244    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	88 23       	and	r24, r24
     d26:	09 f0       	breq	.+2      	; 0xd2a <Dio_enuWriteChannelId+0x10e>
     d28:	76 c0       	rjmp	.+236    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTB,Loc_u8Pin);
     d2a:	a8 e3       	ldi	r26, 0x38	; 56
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 e3       	ldi	r30, 0x38	; 56
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <Dio_enuWriteChannelId+0x12c>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <Dio_enuWriteChannelId+0x128>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	61 c0       	rjmp	.+194    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_C:
			if(Copy_u8Level==DIO_u8HIGH)
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a1 f4       	brne	.+40     	; 0xd82 <Dio_enuWriteChannelId+0x166>
			{
				SET_BIT(PORTC,Loc_u8Pin);
     d5a:	a5 e3       	ldi	r26, 0x35	; 53
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e5 e3       	ldi	r30, 0x35	; 53
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <Dio_enuWriteChannelId+0x15c>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <Dio_enuWriteChannelId+0x158>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	4a c0       	rjmp	.+148    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	88 23       	and	r24, r24
     d86:	09 f0       	breq	.+2      	; 0xd8a <Dio_enuWriteChannelId+0x16e>
     d88:	46 c0       	rjmp	.+140    	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTC,Loc_u8Pin);
     d8a:	a5 e3       	ldi	r26, 0x35	; 53
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e3       	ldi	r30, 0x35	; 53
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <Dio_enuWriteChannelId+0x18c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <Dio_enuWriteChannelId+0x188>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	31 c0       	rjmp	.+98     	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_D:
			if(Copy_u8Level==DIO_u8HIGH)
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	a1 f4       	brne	.+40     	; 0xde2 <Dio_enuWriteChannelId+0x1c6>
			{
				SET_BIT(PORTD,Loc_u8Pin);
     dba:	a2 e3       	ldi	r26, 0x32	; 50
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e2 e3       	ldi	r30, 0x32	; 50
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <Dio_enuWriteChannelId+0x1bc>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <Dio_enuWriteChannelId+0x1b8>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	1a c0       	rjmp	.+52     	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	88 23       	and	r24, r24
     de6:	b9 f4       	brne	.+46     	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTD,Loc_u8Pin);
     de8:	a2 e3       	ldi	r26, 0x32	; 50
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e2 e3       	ldi	r30, 0x32	; 50
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <Dio_enuWriteChannelId+0x1ea>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <Dio_enuWriteChannelId+0x1e6>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <Dio_enuWriteChannelId+0x1fa>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =  Dio_enuPortError ;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	8b 83       	std	Y+3, r24	; 0x03

	}
	return Loc_enuReturnStatus;
     e16:	8b 81       	ldd	r24, Y+3	; 0x03

}
     e18:	27 96       	adiw	r28, 0x07	; 7
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <Dio_enuReadChannelId>:
  Read from pin
  take two args Copy_u8ChannedId and Add_pu8ChannelLevel
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadChannelId(u8 Copy_u8ChannedId, pu8 Add_pu8ChannelLevel)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	28 97       	sbiw	r28, 0x08	; 8
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	8c 83       	std	Y+4, r24	; 0x04
     e40:	7e 83       	std	Y+6, r23	; 0x06
     e42:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	81 32       	cpi	r24, 0x21	; 33
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <Dio_enuReadChannelId+0x26>
     e4e:	79 c0       	rjmp	.+242    	; 0xf42 <Dio_enuReadChannelId+0x118>
	{
		u8 Loc_u8Port = (Copy_u8ChannedId/8) ;
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	86 95       	lsr	r24
     e54:	86 95       	lsr	r24
     e56:	86 95       	lsr	r24
     e58:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = (Copy_u8ChannedId%8)  ;
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	87 70       	andi	r24, 0x07	; 7
     e5e:	89 83       	std	Y+1, r24	; 0x01

		switch (Loc_u8Port)
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	38 87       	std	Y+8, r19	; 0x08
     e68:	2f 83       	std	Y+7, r18	; 0x07
     e6a:	4f 81       	ldd	r20, Y+7	; 0x07
     e6c:	58 85       	ldd	r21, Y+8	; 0x08
     e6e:	41 30       	cpi	r20, 0x01	; 1
     e70:	51 05       	cpc	r21, r1
     e72:	59 f1       	breq	.+86     	; 0xeca <Dio_enuReadChannelId+0xa0>
     e74:	8f 81       	ldd	r24, Y+7	; 0x07
     e76:	98 85       	ldd	r25, Y+8	; 0x08
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	91 05       	cpc	r25, r1
     e7c:	34 f4       	brge	.+12     	; 0xe8a <Dio_enuReadChannelId+0x60>
     e7e:	2f 81       	ldd	r18, Y+7	; 0x07
     e80:	38 85       	ldd	r19, Y+8	; 0x08
     e82:	21 15       	cp	r18, r1
     e84:	31 05       	cpc	r19, r1
     e86:	69 f0       	breq	.+26     	; 0xea2 <Dio_enuReadChannelId+0x78>
     e88:	5e c0       	rjmp	.+188    	; 0xf46 <Dio_enuReadChannelId+0x11c>
     e8a:	4f 81       	ldd	r20, Y+7	; 0x07
     e8c:	58 85       	ldd	r21, Y+8	; 0x08
     e8e:	42 30       	cpi	r20, 0x02	; 2
     e90:	51 05       	cpc	r21, r1
     e92:	79 f1       	breq	.+94     	; 0xef2 <Dio_enuReadChannelId+0xc8>
     e94:	8f 81       	ldd	r24, Y+7	; 0x07
     e96:	98 85       	ldd	r25, Y+8	; 0x08
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <Dio_enuReadChannelId+0x76>
     e9e:	3d c0       	rjmp	.+122    	; 0xf1a <Dio_enuReadChannelId+0xf0>
     ea0:	52 c0       	rjmp	.+164    	; 0xf46 <Dio_enuReadChannelId+0x11c>
		{
		case PORT_A:
			*Add_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
     ea2:	e9 e3       	ldi	r30, 0x39	; 57
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a9 01       	movw	r20, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <Dio_enuReadChannelId+0x90>
     eb6:	55 95       	asr	r21
     eb8:	47 95       	ror	r20
     eba:	8a 95       	dec	r24
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <Dio_enuReadChannelId+0x8c>
     ebe:	ca 01       	movw	r24, r20
     ec0:	81 70       	andi	r24, 0x01	; 1
     ec2:	ed 81       	ldd	r30, Y+5	; 0x05
     ec4:	fe 81       	ldd	r31, Y+6	; 0x06
     ec6:	80 83       	st	Z, r24
     ec8:	3e c0       	rjmp	.+124    	; 0xf46 <Dio_enuReadChannelId+0x11c>
			break;
		case PORT_B:
			*Add_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
     eca:	e6 e3       	ldi	r30, 0x36	; 54
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a9 01       	movw	r20, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <Dio_enuReadChannelId+0xb8>
     ede:	55 95       	asr	r21
     ee0:	47 95       	ror	r20
     ee2:	8a 95       	dec	r24
     ee4:	e2 f7       	brpl	.-8      	; 0xede <Dio_enuReadChannelId+0xb4>
     ee6:	ca 01       	movw	r24, r20
     ee8:	81 70       	andi	r24, 0x01	; 1
     eea:	ed 81       	ldd	r30, Y+5	; 0x05
     eec:	fe 81       	ldd	r31, Y+6	; 0x06
     eee:	80 83       	st	Z, r24
     ef0:	2a c0       	rjmp	.+84     	; 0xf46 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_C:
			*Add_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
     ef2:	e3 e3       	ldi	r30, 0x33	; 51
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a9 01       	movw	r20, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <Dio_enuReadChannelId+0xe0>
     f06:	55 95       	asr	r21
     f08:	47 95       	ror	r20
     f0a:	8a 95       	dec	r24
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <Dio_enuReadChannelId+0xdc>
     f0e:	ca 01       	movw	r24, r20
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	ed 81       	ldd	r30, Y+5	; 0x05
     f14:	fe 81       	ldd	r31, Y+6	; 0x06
     f16:	80 83       	st	Z, r24
     f18:	16 c0       	rjmp	.+44     	; 0xf46 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_D:
			*Add_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
     f1a:	e0 e3       	ldi	r30, 0x30	; 48
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a9 01       	movw	r20, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <Dio_enuReadChannelId+0x108>
     f2e:	55 95       	asr	r21
     f30:	47 95       	ror	r20
     f32:	8a 95       	dec	r24
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <Dio_enuReadChannelId+0x104>
     f36:	ca 01       	movw	r24, r20
     f38:	81 70       	andi	r24, 0x01	; 1
     f3a:	ed 81       	ldd	r30, Y+5	; 0x05
     f3c:	fe 81       	ldd	r31, Y+6	; 0x06
     f3e:	80 83       	st	Z, r24
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <Dio_enuReadChannelId+0x11c>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
     f46:	8b 81       	ldd	r24, Y+3	; 0x03

}
     f48:	28 96       	adiw	r28, 0x08	; 8
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <Dio_enuWritePort>:
  take two args Copy_u8PortID and Copy_u8Level
  return Dio_tenuErrorStatus
 */

Dio_tenuErrorStatus Dio_enuWritePort(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <Dio_enuWritePort+0x6>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <Dio_enuWritePort+0x8>
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	8a 83       	std	Y+2, r24	; 0x02
     f6a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID<=PORT_SIZE)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	85 30       	cpi	r24, 0x05	; 5
     f74:	98 f5       	brcc	.+102    	; 0xfdc <Dio_enuWritePort+0x82>
	{
		switch (Copy_u8PortID)
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	3d 83       	std	Y+5, r19	; 0x05
     f7e:	2c 83       	std	Y+4, r18	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	d1 f0       	breq	.+52     	; 0xfbe <Dio_enuWritePort+0x64>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	2c f4       	brge	.+10     	; 0xf9e <Dio_enuWritePort+0x44>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <Dio_enuWritePort+0x5a>
     f9c:	21 c0       	rjmp	.+66     	; 0xfe0 <Dio_enuWritePort+0x86>
     f9e:	2c 81       	ldd	r18, Y+4	; 0x04
     fa0:	3d 81       	ldd	r19, Y+5	; 0x05
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	81 f0       	breq	.+32     	; 0xfc8 <Dio_enuWritePort+0x6e>
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	91 05       	cpc	r25, r1
     fb0:	81 f0       	breq	.+32     	; 0xfd2 <Dio_enuWritePort+0x78>
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <Dio_enuWritePort+0x86>
		{
		case PORT_A:
			ASSIGN_REG(PORTA,Copy_u8Value);
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	80 83       	st	Z, r24
     fbc:	11 c0       	rjmp	.+34     	; 0xfe0 <Dio_enuWritePort+0x86>
			break;
		case PORT_B:
			ASSIGN_REG(PORTB,Copy_u8Value);
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	80 83       	st	Z, r24
     fc6:	0c c0       	rjmp	.+24     	; 0xfe0 <Dio_enuWritePort+0x86>
			break ;
		case PORT_C:
			ASSIGN_REG(PORTC,Copy_u8Value);
     fc8:	e5 e3       	ldi	r30, 0x35	; 53
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	80 83       	st	Z, r24
     fd0:	07 c0       	rjmp	.+14     	; 0xfe0 <Dio_enuWritePort+0x86>
			break ;
		case PORT_D:
			ASSIGN_REG(PORTD,Copy_u8Value);
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	80 83       	st	Z, r24
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <Dio_enuWritePort+0x86>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPortError;
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <Dio_enuReadPort>:
  Read from port
  take two args Copy_u8PortID and Add_pu8PortValue
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadPort(u8 Copy_u8PortId, pu8 Add_pu8PortValue)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <Dio_enuReadPort+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <Dio_enuReadPort+0x8>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <Dio_enuReadPort+0xa>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	7c 83       	std	Y+4, r23	; 0x04
    1004:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<=PORT_SIZE)
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	85 30       	cpi	r24, 0x05	; 5
    100e:	d8 f5       	brcc	.+118    	; 0x1086 <Dio_enuReadPort+0x94>
	{

		switch (Copy_u8PortId)
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3e 83       	std	Y+6, r19	; 0x06
    1018:	2d 83       	std	Y+5, r18	; 0x05
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	e1 f0       	breq	.+56     	; 0x105c <Dio_enuReadPort+0x6a>
    1024:	2d 81       	ldd	r18, Y+5	; 0x05
    1026:	3e 81       	ldd	r19, Y+6	; 0x06
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	2c f4       	brge	.+10     	; 0x1038 <Dio_enuReadPort+0x46>
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	61 f0       	breq	.+24     	; 0x104e <Dio_enuReadPort+0x5c>
    1036:	29 c0       	rjmp	.+82     	; 0x108a <Dio_enuReadPort+0x98>
    1038:	2d 81       	ldd	r18, Y+5	; 0x05
    103a:	3e 81       	ldd	r19, Y+6	; 0x06
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	a1 f0       	breq	.+40     	; 0x106a <Dio_enuReadPort+0x78>
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	91 05       	cpc	r25, r1
    104a:	b1 f0       	breq	.+44     	; 0x1078 <Dio_enuReadPort+0x86>
    104c:	1e c0       	rjmp	.+60     	; 0x108a <Dio_enuReadPort+0x98>
		{
		case PORT_A:
			*Add_pu8PortValue = PORTA;
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	eb 81       	ldd	r30, Y+3	; 0x03
    1056:	fc 81       	ldd	r31, Y+4	; 0x04
    1058:	80 83       	st	Z, r24
    105a:	17 c0       	rjmp	.+46     	; 0x108a <Dio_enuReadPort+0x98>
			break;
		case PORT_B:
			*Add_pu8PortValue = PORTB;
    105c:	e8 e3       	ldi	r30, 0x38	; 56
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	eb 81       	ldd	r30, Y+3	; 0x03
    1064:	fc 81       	ldd	r31, Y+4	; 0x04
    1066:	80 83       	st	Z, r24
    1068:	10 c0       	rjmp	.+32     	; 0x108a <Dio_enuReadPort+0x98>
			break ;
		case PORT_C:
			*Add_pu8PortValue = PORTC;
    106a:	e5 e3       	ldi	r30, 0x35	; 53
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	eb 81       	ldd	r30, Y+3	; 0x03
    1072:	fc 81       	ldd	r31, Y+4	; 0x04
    1074:	80 83       	st	Z, r24
    1076:	09 c0       	rjmp	.+18     	; 0x108a <Dio_enuReadPort+0x98>
			break ;
		case PORT_D:
			*Add_pu8PortValue =PORTD;
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	eb 81       	ldd	r30, Y+3	; 0x03
    1080:	fc 81       	ldd	r31, Y+4	; 0x04
    1082:	80 83       	st	Z, r24
    1084:	02 c0       	rjmp	.+4      	; 0x108a <Dio_enuReadPort+0x98>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
    108a:	89 81       	ldd	r24, Y+1	; 0x01

}
    108c:	26 96       	adiw	r28, 0x06	; 6
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Dio_enuFlipChannel>:
  Toggle Pin
  take one arg Copy_u8ChannedId
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannedId)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <Dio_enuFlipChannel+0x6>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <Dio_enuFlipChannel+0x8>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <Dio_enuFlipChannel+0xa>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	81 32       	cpi	r24, 0x21	; 33
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <Dio_enuFlipChannel+0x1c>
    10b8:	77 c0       	rjmp	.+238    	; 0x11a8 <Dio_enuFlipChannel+0x10a>
	{
		u8 Loc_u8Port= Copy_u8ChannedId/8 ;
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	86 95       	lsr	r24
    10be:	86 95       	lsr	r24
    10c0:	86 95       	lsr	r24
    10c2:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = Copy_u8ChannedId%8 ;
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	87 70       	andi	r24, 0x07	; 7
    10c8:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8Port)
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3e 83       	std	Y+6, r19	; 0x06
    10d2:	2d 83       	std	Y+5, r18	; 0x05
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	49 f1       	breq	.+82     	; 0x1130 <Dio_enuFlipChannel+0x92>
    10de:	2d 81       	ldd	r18, Y+5	; 0x05
    10e0:	3e 81       	ldd	r19, Y+6	; 0x06
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <Dio_enuFlipChannel+0x54>
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	61 f0       	breq	.+24     	; 0x1108 <Dio_enuFlipChannel+0x6a>
    10f0:	5d c0       	rjmp	.+186    	; 0x11ac <Dio_enuFlipChannel+0x10e>
    10f2:	2d 81       	ldd	r18, Y+5	; 0x05
    10f4:	3e 81       	ldd	r19, Y+6	; 0x06
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	71 f1       	breq	.+92     	; 0x1158 <Dio_enuFlipChannel+0xba>
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	e9 f1       	breq	.+122    	; 0x1180 <Dio_enuFlipChannel+0xe2>
    1106:	52 c0       	rjmp	.+164    	; 0x11ac <Dio_enuFlipChannel+0x10e>
		{
		case PORT_A:
			TGL_BIT(PORTA,Loc_u8Pin);
    1108:	ab e3       	ldi	r26, 0x3B	; 59
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <Dio_enuFlipChannel+0x88>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <Dio_enuFlipChannel+0x84>
    112a:	84 27       	eor	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	3e c0       	rjmp	.+124    	; 0x11ac <Dio_enuFlipChannel+0x10e>
			break;
		case PORT_B:
			TGL_BIT(PORTA,Loc_u8Pin);
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <Dio_enuFlipChannel+0xb0>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <Dio_enuFlipChannel+0xac>
    1152:	84 27       	eor	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	2a c0       	rjmp	.+84     	; 0x11ac <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_C:
			TGL_BIT(PORTA,Loc_u8Pin);
    1158:	ab e3       	ldi	r26, 0x3B	; 59
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	eb e3       	ldi	r30, 0x3B	; 59
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <Dio_enuFlipChannel+0xd8>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <Dio_enuFlipChannel+0xd4>
    117a:	84 27       	eor	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	16 c0       	rjmp	.+44     	; 0x11ac <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_D:
			TGL_BIT(PORTA,Loc_u8Pin);
    1180:	ab e3       	ldi	r26, 0x3B	; 59
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	eb e3       	ldi	r30, 0x3B	; 59
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <Dio_enuFlipChannel+0x100>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <Dio_enuFlipChannel+0xfc>
    11a2:	84 27       	eor	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <Dio_enuFlipChannel+0x10e>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03

}
    11ae:	26 96       	adiw	r28, 0x06	; 6
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <Port_enuSetPinDir>:
#include "Port_cfg.h"
#include "Port.h"


Port_tenuErrorStatus Port_enuSetPinDir(u8 copy_u8PinNum, u8 copy_u8PinDir)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	27 97       	sbiw	r28, 0x07	; 7
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	8c 83       	std	Y+4, r24	; 0x04
    11d6:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	8b 83       	std	Y+3, r24	; 0x03

	/*make the checking before the logic bec. if there is an error we will return from the function*/
	/*if the number of pins exceed the number of the HW pins*/
	if (copy_u8PinNum>MAX_PIN_NUM)
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	80 32       	cpi	r24, 0x20	; 32
    11e0:	10 f0       	brcs	.+4      	; 0x11e6 <Port_enuSetPinDir+0x26>
	{
		/*pin number error */
		Loc_ErrorStatus = Port_enuPinError;
    11e2:	1b 82       	std	Y+3, r1	; 0x03
    11e4:	df c0       	rjmp	.+446    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
	}
	/*if the user pass parameter other than the two directions (input/output)*/
	else if(copy_u8PinDir > 1)
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <Port_enuSetPinDir+0x32>
	{
		/*Direction error*/
		Loc_ErrorStatus = Port_enuPortError;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	8b 83       	std	Y+3, r24	; 0x03
    11f0:	d9 c0       	rjmp	.+434    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
	}

	else
	{
		u8 Loc_u8PinIndex = copy_u8PinNum%PIN_AND_PORT_DIVISOR;
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	87 70       	andi	r24, 0x07	; 7
    11f6:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PortIndex = copy_u8PinNum/PIN_AND_PORT_DIVISOR;
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	86 95       	lsr	r24
    11fc:	86 95       	lsr	r24
    11fe:	86 95       	lsr	r24
    1200:	89 83       	std	Y+1, r24	; 0x01
		/* switch on the port index and according to the pin Dir the pin will be set or cleared*/
		switch (Loc_u8PortIndex)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3f 83       	std	Y+7, r19	; 0x07
    120a:	2e 83       	std	Y+6, r18	; 0x06
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	9f 81       	ldd	r25, Y+7	; 0x07
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <Port_enuSetPinDir+0x58>
    1216:	43 c0       	rjmp	.+134    	; 0x129e <Port_enuSetPinDir+0xde>
    1218:	2e 81       	ldd	r18, Y+6	; 0x06
    121a:	3f 81       	ldd	r19, Y+7	; 0x07
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <Port_enuSetPinDir+0x6c>
    1222:	8e 81       	ldd	r24, Y+6	; 0x06
    1224:	9f 81       	ldd	r25, Y+7	; 0x07
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	71 f0       	breq	.+28     	; 0x1246 <Port_enuSetPinDir+0x86>
    122a:	bc c0       	rjmp	.+376    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
    122c:	2e 81       	ldd	r18, Y+6	; 0x06
    122e:	3f 81       	ldd	r19, Y+7	; 0x07
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <Port_enuSetPinDir+0x78>
    1236:	5f c0       	rjmp	.+190    	; 0x12f6 <Port_enuSetPinDir+0x136>
    1238:	8e 81       	ldd	r24, Y+6	; 0x06
    123a:	9f 81       	ldd	r25, Y+7	; 0x07
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	91 05       	cpc	r25, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <Port_enuSetPinDir+0x84>
    1242:	85 c0       	rjmp	.+266    	; 0x134e <Port_enuSetPinDir+0x18e>
    1244:	af c0       	rjmp	.+350    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
		{
		case PORT_A:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a1 f4       	brne	.+40     	; 0x1274 <Port_enuSetPinDir+0xb4>
			{
				SET_BIT(DDRA,Loc_u8PinIndex);
    124c:	aa e3       	ldi	r26, 0x3A	; 58
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ea e3       	ldi	r30, 0x3A	; 58
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <Port_enuSetPinDir+0xaa>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <Port_enuSetPinDir+0xa6>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	98 c0       	rjmp	.+304    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1274:	aa e3       	ldi	r26, 0x3A	; 58
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ea e3       	ldi	r30, 0x3A	; 58
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <Port_enuSetPinDir+0xd2>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <Port_enuSetPinDir+0xce>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	83 c0       	rjmp	.+262    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_B:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	a1 f4       	brne	.+40     	; 0x12cc <Port_enuSetPinDir+0x10c>
			{
				SET_BIT(DDRB,Loc_u8PinIndex);
    12a4:	a7 e3       	ldi	r26, 0x37	; 55
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <Port_enuSetPinDir+0x102>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <Port_enuSetPinDir+0xfe>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	6c c0       	rjmp	.+216    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRB,Loc_u8PinIndex);
    12cc:	a7 e3       	ldi	r26, 0x37	; 55
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e7 e3       	ldi	r30, 0x37	; 55
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <Port_enuSetPinDir+0x12a>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <Port_enuSetPinDir+0x126>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	57 c0       	rjmp	.+174    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_C:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	a1 f4       	brne	.+40     	; 0x1324 <Port_enuSetPinDir+0x164>
			{
				SET_BIT(DDRC,Loc_u8PinIndex);
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <Port_enuSetPinDir+0x15a>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <Port_enuSetPinDir+0x156>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	40 c0       	rjmp	.+128    	; 0x13a4 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRC,Loc_u8PinIndex);
    1324:	a4 e3       	ldi	r26, 0x34	; 52
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <Port_enuSetPinDir+0x182>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <Port_enuSetPinDir+0x17e>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	2b c0       	rjmp	.+86     	; 0x13a4 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_D:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	a1 f4       	brne	.+40     	; 0x137c <Port_enuSetPinDir+0x1bc>
			{
				SET_BIT(DDRD,Loc_u8PinIndex);
    1354:	a1 e3       	ldi	r26, 0x31	; 49
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e3       	ldi	r30, 0x31	; 49
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <Port_enuSetPinDir+0x1b2>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <Port_enuSetPinDir+0x1ae>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRD,Loc_u8PinIndex);
    137c:	a1 e3       	ldi	r26, 0x31	; 49
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e1 e3       	ldi	r30, 0x31	; 49
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <Port_enuSetPinDir+0x1da>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <Port_enuSetPinDir+0x1d6>
    139e:	80 95       	com	r24
    13a0:	84 23       	and	r24, r20
    13a2:	8c 93       	st	X, r24
		default:
			/*Do nothing*/
			break;
		}
	}
	return Loc_ErrorStatus;
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13a6:	27 96       	adiw	r28, 0x07	; 7
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 copy_u8PinNum, Port_tenuPinMode enu_PinMode)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	2f 97       	sbiw	r28, 0x0f	; 15
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	8c 83       	std	Y+4, r24	; 0x04
    13ce:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	8b 83       	std	Y+3, r24	; 0x03
	if(enu_PinMode>NUMBER_OF_MODES)
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	85 30       	cpi	r24, 0x05	; 5
    13d8:	18 f0       	brcs	.+6      	; 0x13e0 <Port_enuSetPinMode+0x28>
	{
		Loc_ErrorStatus = Port_enuModeError;
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	23 c3       	rjmp	.+1606   	; 0x1a26 <Port_enuSetPinMode+0x66e>
	}
	else if(copy_u8PinNum>MAX_PIN_NUM)
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	80 32       	cpi	r24, 0x20	; 32
    13e4:	10 f0       	brcs	.+4      	; 0x13ea <Port_enuSetPinMode+0x32>
	{
		Loc_ErrorStatus = Port_enuPinError;
    13e6:	1b 82       	std	Y+3, r1	; 0x03
    13e8:	1e c3       	rjmp	.+1596   	; 0x1a26 <Port_enuSetPinMode+0x66e>
	}
	else
	{
		u8 Loc_u8PortIndex = (copy_u8PinNum /PIN_AND_PORT_DIVISOR);
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	86 95       	lsr	r24
    13ee:	86 95       	lsr	r24
    13f0:	86 95       	lsr	r24
    13f2:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PinIndex  = (copy_u8PinNum %PIN_AND_PORT_DIVISOR);
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	87 70       	andi	r24, 0x07	; 7
    13f8:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8PortIndex)
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3f 87       	std	Y+15, r19	; 0x0f
    1402:	2e 87       	std	Y+14, r18	; 0x0e
    1404:	8e 85       	ldd	r24, Y+14	; 0x0e
    1406:	9f 85       	ldd	r25, Y+15	; 0x0f
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <Port_enuSetPinMode+0x58>
    140e:	d4 c0       	rjmp	.+424    	; 0x15b8 <Port_enuSetPinMode+0x200>
    1410:	2e 85       	ldd	r18, Y+14	; 0x0e
    1412:	3f 85       	ldd	r19, Y+15	; 0x0f
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	2c f4       	brge	.+10     	; 0x1424 <Port_enuSetPinMode+0x6c>
    141a:	8e 85       	ldd	r24, Y+14	; 0x0e
    141c:	9f 85       	ldd	r25, Y+15	; 0x0f
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	71 f0       	breq	.+28     	; 0x143e <Port_enuSetPinMode+0x86>
    1422:	01 c3       	rjmp	.+1538   	; 0x1a26 <Port_enuSetPinMode+0x66e>
    1424:	2e 85       	ldd	r18, Y+14	; 0x0e
    1426:	3f 85       	ldd	r19, Y+15	; 0x0f
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <Port_enuSetPinMode+0x78>
    142e:	81 c1       	rjmp	.+770    	; 0x1732 <Port_enuSetPinMode+0x37a>
    1430:	8e 85       	ldd	r24, Y+14	; 0x0e
    1432:	9f 85       	ldd	r25, Y+15	; 0x0f
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <Port_enuSetPinMode+0x84>
    143a:	39 c2       	rjmp	.+1138   	; 0x18ae <Port_enuSetPinMode+0x4f6>
    143c:	f4 c2       	rjmp	.+1512   	; 0x1a26 <Port_enuSetPinMode+0x66e>
		{
		case PORT_A:
			switch(enu_PinMode)
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3d 87       	std	Y+13, r19	; 0x0d
    1446:	2c 87       	std	Y+12, r18	; 0x0c
    1448:	8c 85       	ldd	r24, Y+12	; 0x0c
    144a:	9d 85       	ldd	r25, Y+13	; 0x0d
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	b9 f0       	breq	.+46     	; 0x1480 <Port_enuSetPinMode+0xc8>
    1452:	2c 85       	ldd	r18, Y+12	; 0x0c
    1454:	3d 85       	ldd	r19, Y+13	; 0x0d
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <Port_enuSetPinMode+0xae>
    145c:	8c 85       	ldd	r24, Y+12	; 0x0c
    145e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	a1 f1       	breq	.+104    	; 0x14cc <Port_enuSetPinMode+0x114>
    1464:	e0 c2       	rjmp	.+1472   	; 0x1a26 <Port_enuSetPinMode+0x66e>
    1466:	2c 85       	ldd	r18, Y+12	; 0x0c
    1468:	3d 85       	ldd	r19, Y+13	; 0x0d
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <Port_enuSetPinMode+0xba>
    1470:	54 c0       	rjmp	.+168    	; 0x151a <Port_enuSetPinMode+0x162>
    1472:	8c 85       	ldd	r24, Y+12	; 0x0c
    1474:	9d 85       	ldd	r25, Y+13	; 0x0d
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <Port_enuSetPinMode+0xc6>
    147c:	75 c0       	rjmp	.+234    	; 0x1568 <Port_enuSetPinMode+0x1b0>
    147e:	d3 c2       	rjmp	.+1446   	; 0x1a26 <Port_enuSetPinMode+0x66e>
			{
			case Output_enuHigh:
				SET_BIT(DDRA,Loc_u8PinIndex);
    1480:	aa e3       	ldi	r26, 0x3A	; 58
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ea e3       	ldi	r30, 0x3A	; 58
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <Port_enuSetPinMode+0xe4>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <Port_enuSetPinMode+0xe0>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    14a4:	ab e3       	ldi	r26, 0x3B	; 59
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	eb e3       	ldi	r30, 0x3B	; 59
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <Port_enuSetPinMode+0x10a>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <Port_enuSetPinMode+0x106>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	ad c2       	rjmp	.+1370   	; 0x1a26 <Port_enuSetPinMode+0x66e>
				break;
			case Output_enuLow:
				SET_BIT(DDRA,Loc_u8PinIndex);
    14cc:	aa e3       	ldi	r26, 0x3A	; 58
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	ea e3       	ldi	r30, 0x3A	; 58
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <Port_enuSetPinMode+0x130>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	2a 95       	dec	r18
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <Port_enuSetPinMode+0x12c>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    14f0:	ab e3       	ldi	r26, 0x3B	; 59
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <Port_enuSetPinMode+0x156>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <Port_enuSetPinMode+0x152>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	86 c2       	rjmp	.+1292   	; 0x1a26 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuPullup:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    151a:	aa e3       	ldi	r26, 0x3A	; 58
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ea e3       	ldi	r30, 0x3A	; 58
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <Port_enuSetPinMode+0x17e>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	2a 95       	dec	r18
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <Port_enuSetPinMode+0x17a>
    153a:	80 95       	com	r24
    153c:	84 23       	and	r24, r20
    153e:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    1540:	ab e3       	ldi	r26, 0x3B	; 59
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	eb e3       	ldi	r30, 0x3B	; 59
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <Port_enuSetPinMode+0x1a6>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <Port_enuSetPinMode+0x1a2>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	5f c2       	rjmp	.+1214   	; 0x1a26 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuHighImpedence:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1568:	aa e3       	ldi	r26, 0x3A	; 58
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <Port_enuSetPinMode+0x1cc>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	2a 95       	dec	r18
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <Port_enuSetPinMode+0x1c8>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    158e:	ab e3       	ldi	r26, 0x3B	; 59
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	eb e3       	ldi	r30, 0x3B	; 59
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <Port_enuSetPinMode+0x1f4>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <Port_enuSetPinMode+0x1f0>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	37 c2       	rjmp	.+1134   	; 0x1a26 <Port_enuSetPinMode+0x66e>
				/*do nothing*/
				break;
			}
			break;
			case PORT_B:
				switch(enu_PinMode)
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3b 87       	std	Y+11, r19	; 0x0b
    15c0:	2a 87       	std	Y+10, r18	; 0x0a
    15c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	b9 f0       	breq	.+46     	; 0x15fa <Port_enuSetPinMode+0x242>
    15cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    15ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <Port_enuSetPinMode+0x228>
    15d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	a1 f1       	breq	.+104    	; 0x1646 <Port_enuSetPinMode+0x28e>
    15de:	23 c2       	rjmp	.+1094   	; 0x1a26 <Port_enuSetPinMode+0x66e>
    15e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    15e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <Port_enuSetPinMode+0x234>
    15ea:	54 c0       	rjmp	.+168    	; 0x1694 <Port_enuSetPinMode+0x2dc>
    15ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	91 05       	cpc	r25, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <Port_enuSetPinMode+0x240>
    15f6:	75 c0       	rjmp	.+234    	; 0x16e2 <Port_enuSetPinMode+0x32a>
    15f8:	16 c2       	rjmp	.+1068   	; 0x1a26 <Port_enuSetPinMode+0x66e>
				{
				case Output_enuHigh:
					SET_BIT(DDRB,Loc_u8PinIndex);
    15fa:	a7 e3       	ldi	r26, 0x37	; 55
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e7 e3       	ldi	r30, 0x37	; 55
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <Port_enuSetPinMode+0x25e>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	2a 95       	dec	r18
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <Port_enuSetPinMode+0x25a>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    161e:	a8 e3       	ldi	r26, 0x38	; 56
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e8 e3       	ldi	r30, 0x38	; 56
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <Port_enuSetPinMode+0x284>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <Port_enuSetPinMode+0x280>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	f0 c1       	rjmp	.+992    	; 0x1a26 <Port_enuSetPinMode+0x66e>
					break;
				case Output_enuLow:
					SET_BIT(DDRB,Loc_u8PinIndex);
    1646:	a7 e3       	ldi	r26, 0x37	; 55
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e7 e3       	ldi	r30, 0x37	; 55
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <Port_enuSetPinMode+0x2aa>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	2a 95       	dec	r18
    1664:	e2 f7       	brpl	.-8      	; 0x165e <Port_enuSetPinMode+0x2a6>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    166a:	a8 e3       	ldi	r26, 0x38	; 56
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e8 e3       	ldi	r30, 0x38	; 56
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <Port_enuSetPinMode+0x2d0>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <Port_enuSetPinMode+0x2cc>
    168c:	80 95       	com	r24
    168e:	84 23       	and	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	c9 c1       	rjmp	.+914    	; 0x1a26 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuPullup:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    1694:	a7 e3       	ldi	r26, 0x37	; 55
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e7 e3       	ldi	r30, 0x37	; 55
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <Port_enuSetPinMode+0x2f8>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	2a 95       	dec	r18
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <Port_enuSetPinMode+0x2f4>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    16ba:	a8 e3       	ldi	r26, 0x38	; 56
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <Port_enuSetPinMode+0x320>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <Port_enuSetPinMode+0x31c>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	a2 c1       	rjmp	.+836    	; 0x1a26 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuHighImpedence:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    16e2:	a7 e3       	ldi	r26, 0x37	; 55
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e7 e3       	ldi	r30, 0x37	; 55
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <Port_enuSetPinMode+0x346>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	2a 95       	dec	r18
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <Port_enuSetPinMode+0x342>
    1702:	80 95       	com	r24
    1704:	84 23       	and	r24, r20
    1706:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    1708:	a8 e3       	ldi	r26, 0x38	; 56
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <Port_enuSetPinMode+0x36e>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <Port_enuSetPinMode+0x36a>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	7a c1       	rjmp	.+756    	; 0x1a26 <Port_enuSetPinMode+0x66e>
					/*do nothing*/
					break;
				}
				break ;
				case PORT_C:
					switch(enu_PinMode)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	39 87       	std	Y+9, r19	; 0x09
    173a:	28 87       	std	Y+8, r18	; 0x08
    173c:	88 85       	ldd	r24, Y+8	; 0x08
    173e:	99 85       	ldd	r25, Y+9	; 0x09
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	b9 f0       	breq	.+46     	; 0x1774 <Port_enuSetPinMode+0x3bc>
    1746:	28 85       	ldd	r18, Y+8	; 0x08
    1748:	39 85       	ldd	r19, Y+9	; 0x09
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <Port_enuSetPinMode+0x3a2>
    1750:	88 85       	ldd	r24, Y+8	; 0x08
    1752:	99 85       	ldd	r25, Y+9	; 0x09
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	a1 f1       	breq	.+104    	; 0x17c0 <Port_enuSetPinMode+0x408>
    1758:	66 c1       	rjmp	.+716    	; 0x1a26 <Port_enuSetPinMode+0x66e>
    175a:	28 85       	ldd	r18, Y+8	; 0x08
    175c:	39 85       	ldd	r19, Y+9	; 0x09
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <Port_enuSetPinMode+0x3ae>
    1764:	55 c0       	rjmp	.+170    	; 0x1810 <Port_enuSetPinMode+0x458>
    1766:	88 85       	ldd	r24, Y+8	; 0x08
    1768:	99 85       	ldd	r25, Y+9	; 0x09
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <Port_enuSetPinMode+0x3ba>
    1770:	76 c0       	rjmp	.+236    	; 0x185e <Port_enuSetPinMode+0x4a6>
    1772:	59 c1       	rjmp	.+690    	; 0x1a26 <Port_enuSetPinMode+0x66e>
					{
					case Output_enuHigh:
						SET_BIT(DDRC,Loc_u8PinIndex);
    1774:	a4 e3       	ldi	r26, 0x34	; 52
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e4 e3       	ldi	r30, 0x34	; 52
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <Port_enuSetPinMode+0x3d8>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	2a 95       	dec	r18
    1792:	e2 f7       	brpl	.-8      	; 0x178c <Port_enuSetPinMode+0x3d4>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    1798:	a5 e3       	ldi	r26, 0x35	; 53
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e3       	ldi	r30, 0x35	; 53
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <Port_enuSetPinMode+0x3fe>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <Port_enuSetPinMode+0x3fa>
    17ba:	84 2b       	or	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	33 c1       	rjmp	.+614    	; 0x1a26 <Port_enuSetPinMode+0x66e>
						break;
					case Output_enuLow:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    17c0:	a4 e3       	ldi	r26, 0x34	; 52
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e4 e3       	ldi	r30, 0x34	; 52
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <Port_enuSetPinMode+0x424>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	2a 95       	dec	r18
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <Port_enuSetPinMode+0x420>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    17e6:	a5 e3       	ldi	r26, 0x35	; 53
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e3       	ldi	r30, 0x35	; 53
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <Port_enuSetPinMode+0x44c>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <Port_enuSetPinMode+0x448>
    1808:	80 95       	com	r24
    180a:	84 23       	and	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	0b c1       	rjmp	.+534    	; 0x1a26 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuPullup:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    1810:	a4 e3       	ldi	r26, 0x34	; 52
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e4 e3       	ldi	r30, 0x34	; 52
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <Port_enuSetPinMode+0x474>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	2a 95       	dec	r18
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <Port_enuSetPinMode+0x470>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    1836:	a5 e3       	ldi	r26, 0x35	; 53
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e3       	ldi	r30, 0x35	; 53
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <Port_enuSetPinMode+0x49c>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <Port_enuSetPinMode+0x498>
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	e4 c0       	rjmp	.+456    	; 0x1a26 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuHighImpedence:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    185e:	a4 e3       	ldi	r26, 0x34	; 52
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e4 e3       	ldi	r30, 0x34	; 52
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <Port_enuSetPinMode+0x4c2>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	2a 95       	dec	r18
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <Port_enuSetPinMode+0x4be>
    187e:	80 95       	com	r24
    1880:	84 23       	and	r24, r20
    1882:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    1884:	a5 e3       	ldi	r26, 0x35	; 53
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e3       	ldi	r30, 0x35	; 53
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <Port_enuSetPinMode+0x4ea>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <Port_enuSetPinMode+0x4e6>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	bc c0       	rjmp	.+376    	; 0x1a26 <Port_enuSetPinMode+0x66e>
						/*do nothing*/
						break;
					}
					break ;
					case PORT_D:
						switch(enu_PinMode)
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3f 83       	std	Y+7, r19	; 0x07
    18b6:	2e 83       	std	Y+6, r18	; 0x06
    18b8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ba:	9f 81       	ldd	r25, Y+7	; 0x07
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	b9 f0       	breq	.+46     	; 0x18f0 <Port_enuSetPinMode+0x538>
    18c2:	2e 81       	ldd	r18, Y+6	; 0x06
    18c4:	3f 81       	ldd	r19, Y+7	; 0x07
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <Port_enuSetPinMode+0x51e>
    18cc:	8e 81       	ldd	r24, Y+6	; 0x06
    18ce:	9f 81       	ldd	r25, Y+7	; 0x07
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	a1 f1       	breq	.+104    	; 0x193c <Port_enuSetPinMode+0x584>
    18d4:	a8 c0       	rjmp	.+336    	; 0x1a26 <Port_enuSetPinMode+0x66e>
    18d6:	2e 81       	ldd	r18, Y+6	; 0x06
    18d8:	3f 81       	ldd	r19, Y+7	; 0x07
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <Port_enuSetPinMode+0x52a>
    18e0:	54 c0       	rjmp	.+168    	; 0x198a <Port_enuSetPinMode+0x5d2>
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	9f 81       	ldd	r25, Y+7	; 0x07
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <Port_enuSetPinMode+0x536>
    18ec:	75 c0       	rjmp	.+234    	; 0x19d8 <Port_enuSetPinMode+0x620>
    18ee:	9b c0       	rjmp	.+310    	; 0x1a26 <Port_enuSetPinMode+0x66e>
						{
						case Output_enuHigh:
							SET_BIT(DDRD,Loc_u8PinIndex);
    18f0:	a1 e3       	ldi	r26, 0x31	; 49
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e1 e3       	ldi	r30, 0x31	; 49
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 c0       	rjmp	.+4      	; 0x190c <Port_enuSetPinMode+0x554>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	2a 95       	dec	r18
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <Port_enuSetPinMode+0x550>
    1910:	84 2b       	or	r24, r20
    1912:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8PinIndex);
    1914:	a2 e3       	ldi	r26, 0x32	; 50
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e2 e3       	ldi	r30, 0x32	; 50
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <Port_enuSetPinMode+0x57a>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <Port_enuSetPinMode+0x576>
    1936:	84 2b       	or	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	75 c0       	rjmp	.+234    	; 0x1a26 <Port_enuSetPinMode+0x66e>
							break;
						case Output_enuLow:
							SET_BIT(DDRD,Loc_u8PinIndex);
    193c:	a1 e3       	ldi	r26, 0x31	; 49
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e1 e3       	ldi	r30, 0x31	; 49
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <Port_enuSetPinMode+0x5a0>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	2a 95       	dec	r18
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <Port_enuSetPinMode+0x59c>
    195c:	84 2b       	or	r24, r20
    195e:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    1960:	a2 e3       	ldi	r26, 0x32	; 50
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e2 e3       	ldi	r30, 0x32	; 50
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <Port_enuSetPinMode+0x5c6>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <Port_enuSetPinMode+0x5c2>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	4e c0       	rjmp	.+156    	; 0x1a26 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuPullup:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    198a:	a1 e3       	ldi	r26, 0x31	; 49
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e1 e3       	ldi	r30, 0x31	; 49
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <Port_enuSetPinMode+0x5ee>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	2a 95       	dec	r18
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <Port_enuSetPinMode+0x5ea>
    19aa:	80 95       	com	r24
    19ac:	84 23       	and	r24, r20
    19ae:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8PinIndex);
    19b0:	ab e3       	ldi	r26, 0x3B	; 59
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	eb e3       	ldi	r30, 0x3B	; 59
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <Port_enuSetPinMode+0x616>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <Port_enuSetPinMode+0x612>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	27 c0       	rjmp	.+78     	; 0x1a26 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuHighImpedence:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    19d8:	a1 e3       	ldi	r26, 0x31	; 49
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e1 e3       	ldi	r30, 0x31	; 49
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <Port_enuSetPinMode+0x63c>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	2a 95       	dec	r18
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <Port_enuSetPinMode+0x638>
    19f8:	80 95       	com	r24
    19fa:	84 23       	and	r24, r20
    19fc:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    19fe:	a2 e3       	ldi	r26, 0x32	; 50
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e2 e3       	ldi	r30, 0x32	; 50
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <Port_enuSetPinMode+0x664>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <Port_enuSetPinMode+0x660>
    1a20:	80 95       	com	r24
    1a22:	84 23       	and	r24, r20
    1a24:	8c 93       	st	X, r24
							/*do nothing*/
							break;
		}

	}
	return Loc_ErrorStatus;
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a28:	2f 96       	adiw	r28, 0x0f	; 15
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <Port_vidInit>:

void Port_vidInit(void)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
#define b7_DDRA		1
#define b7_PORTA	0
#endif


	DDRA=CONC(b7_DDRA,b6_DDRA,b5_DDRA,b4_DDRA,b3_DDRA,b2_DDRA,b1_DDRA,b0_DDRA);
    1a42:	ea e3       	ldi	r30, 0x3A	; 58
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	8e ef       	ldi	r24, 0xFE	; 254
    1a48:	80 83       	st	Z, r24
	PORTA=CONC(b7_PORTA,b6_PORTA,b5_PORTA,b4_PORTA,b3_PORTA,b2_PORTA,b1_PORTA,b0_PORTA);
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 83       	st	Z, r24
#elif PORT_PIN_15_INIT_CFG == OUTPUT_LOW
#define b15_DDRB		1
#define b15_PORTB		0
#endif

	DDRB=CONC(b15_DDRB,b14_DDRB,b13_DDRB,b12_DDRB,b11_DDRB,b10_DDRB,b9_DDRB,b8_DDRB);
    1a52:	e7 e3       	ldi	r30, 0x37	; 55
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8f ef       	ldi	r24, 0xFF	; 255
    1a58:	80 83       	st	Z, r24
	PORTB=CONC(b15_PORTB,b14_PORTB,b13_PORTB,b12_PORTB,b11_PORTB,b10_PORTB,b9_PORTB,b8_PORTB);
    1a5a:	e8 e3       	ldi	r30, 0x38	; 56
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 ef       	ldi	r24, 0xF0	; 240
    1a60:	80 83       	st	Z, r24
#elif PORT_PIN_23_INIT_CFG == OUTPUT_LOW
#define b23_DDRC		1
#define b23_PORTC		0
#endif

	DDRC=CONC(b23_DDRC,b22_DDRC,b21_DDRC,b20_DDRC,b19_DDRC,b18_DDRC,b17_DDRC,b16_DDRC);
    1a62:	e4 e3       	ldi	r30, 0x34	; 52
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	80 83       	st	Z, r24
	PORTC=CONC(b23_PORTC,b22_PORTC,b21_PORTC,b20_PORTC,b19_PORTC,b18_PORTC,b17_PORTC,b16_PORTC);
    1a6a:	e5 e3       	ldi	r30, 0x35	; 53
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	10 82       	st	Z, r1
#elif PORT_PIN_31_INIT_CFG == OUTPUT_LOW
#define b31_DDRD		1
#define b31_PORTD		0
#endif

	DDRD=CONC(b31_DDRD,b30_DDRD,b29_DDRD,b28_DDRD,b27_DDRD,b26_DDRD,b25_DDRD,b24_DDRD);
    1a70:	e1 e3       	ldi	r30, 0x31	; 49
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
	PORTD=CONC(b31_PORTD,b30_PORTD,b29_PORTD,b28_PORTD,b27_PORTD,b26_PORTD,b25_PORTD,b24_PORTD);
    1a78:	e2 e3       	ldi	r30, 0x32	; 50
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	10 82       	st	Z, r1
}
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <Lcd_vidInit>:




void Lcd_vidInit(void)
{
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	c6 54       	subi	r28, 0x46	; 70
    1a92:	d0 40       	sbci	r29, 0x00	; 0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ed 5b       	subi	r30, 0xBD	; 189
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 ef       	ldi	r26, 0xF0	; 240
    1aaa:	b1 e4       	ldi	r27, 0x41	; 65
    1aac:	80 83       	st	Z, r24
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	a2 83       	std	Z+2, r26	; 0x02
    1ab2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	01 5c       	subi	r16, 0xC1	; 193
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 5b       	subi	r30, 0xBD	; 189
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a e7       	ldi	r20, 0x7A	; 122
    1ace:	53 e4       	ldi	r21, 0x43	; 67
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	80 83       	st	Z, r24
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	a2 83       	std	Z+2, r26	; 0x02
    1ae0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ff 96       	adiw	r30, 0x3f	; 63
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <Lcd_vidInit+0x84>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9e af       	std	Y+62, r25	; 0x3e
    1b04:	8d af       	std	Y+61, r24	; 0x3d
    1b06:	46 c0       	rjmp	.+140    	; 0x1b94 <Lcd_vidInit+0x110>
	else if (__tmp > 65535)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ff 96       	adiw	r30, 0x3f	; 63
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	64 f5       	brge	.+88     	; 0x1b7c <Lcd_vidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 5b       	subi	r30, 0xBD	; 189
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e af       	std	Y+62, r25	; 0x3e
    1b50:	8d af       	std	Y+61, r24	; 0x3d
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <Lcd_vidInit+0xee>
    1b54:	89 e1       	ldi	r24, 0x19	; 25
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c af       	std	Y+60, r25	; 0x3c
    1b5a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <Lcd_vidInit+0xdc>
    1b64:	9c af       	std	Y+60, r25	; 0x3c
    1b66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	9e af       	std	Y+62, r25	; 0x3e
    1b70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b74:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <Lcd_vidInit+0xd0>
    1b7a:	16 c0       	rjmp	.+44     	; 0x1ba8 <Lcd_vidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ff 96       	adiw	r30, 0x3f	; 63
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e af       	std	Y+62, r25	; 0x3e
    1b92:	8d af       	std	Y+61, r24	; 0x3d
    1b94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b98:	9a af       	std	Y+58, r25	; 0x3a
    1b9a:	89 af       	std	Y+57, r24	; 0x39
    1b9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <Lcd_vidInit+0x11c>
    1ba4:	9a af       	std	Y+58, r25	; 0x3a
    1ba6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(LCD_u8DELAY_FOR_INITIALIZATION);
	Lcd_vidSendCommand(LCD_u8FUNCTION_SET_CFG);  		//Function Set: 8-bit, 2 Line, 5x7 Dots
    1ba8:	88 e3       	ldi	r24, 0x38	; 56
    1baa:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Lcd_vidSendCommand>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e8       	ldi	r26, 0x80	; 128
    1bb4:	bf e3       	ldi	r27, 0x3F	; 63
    1bb6:	8d ab       	std	Y+53, r24	; 0x35
    1bb8:	9e ab       	std	Y+54, r25	; 0x36
    1bba:	af ab       	std	Y+55, r26	; 0x37
    1bbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a e7       	ldi	r20, 0x7A	; 122
    1bcc:	53 e4       	ldi	r21, 0x43	; 67
    1bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	89 ab       	std	Y+49, r24	; 0x31
    1bd8:	9a ab       	std	Y+50, r25	; 0x32
    1bda:	ab ab       	std	Y+51, r26	; 0x33
    1bdc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bde:	69 a9       	ldd	r22, Y+49	; 0x31
    1be0:	7a a9       	ldd	r23, Y+50	; 0x32
    1be2:	8b a9       	ldd	r24, Y+51	; 0x33
    1be4:	9c a9       	ldd	r25, Y+52	; 0x34
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <Lcd_vidInit+0x17c>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	98 ab       	std	Y+48, r25	; 0x30
    1bfc:	8f a7       	std	Y+47, r24	; 0x2f
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <Lcd_vidInit+0x1fa>
	else if (__tmp > 65535)
    1c00:	69 a9       	ldd	r22, Y+49	; 0x31
    1c02:	7a a9       	ldd	r23, Y+50	; 0x32
    1c04:	8b a9       	ldd	r24, Y+51	; 0x33
    1c06:	9c a9       	ldd	r25, Y+52	; 0x34
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <Lcd_vidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	98 ab       	std	Y+48, r25	; 0x30
    1c3e:	8f a7       	std	Y+47, r24	; 0x2f
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <Lcd_vidInit+0x1dc>
    1c42:	89 e1       	ldi	r24, 0x19	; 25
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9e a7       	std	Y+46, r25	; 0x2e
    1c48:	8d a7       	std	Y+45, r24	; 0x2d
    1c4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <Lcd_vidInit+0x1ca>
    1c52:	9e a7       	std	Y+46, r25	; 0x2e
    1c54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c58:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	98 ab       	std	Y+48, r25	; 0x30
    1c5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c62:	98 a9       	ldd	r25, Y+48	; 0x30
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <Lcd_vidInit+0x1be>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <Lcd_vidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c70:	9c a9       	ldd	r25, Y+52	; 0x34
    1c72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
    1c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c80:	98 a9       	ldd	r25, Y+48	; 0x30
    1c82:	9c a7       	std	Y+44, r25	; 0x2c
    1c84:	8b a7       	std	Y+43, r24	; 0x2b
    1c86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <Lcd_vidInit+0x206>
    1c8e:	9c a7       	std	Y+44, r25	; 0x2c
    1c90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
	Lcd_vidSendCommand(LCD_u8DISPLAY_ON_CFG);   		//Display on Cursor off
    1c92:	8c e0       	ldi	r24, 0x0C	; 12
    1c94:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Lcd_vidSendCommand>
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a0 e8       	ldi	r26, 0x80	; 128
    1c9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ca0:	8f a3       	std	Y+39, r24	; 0x27
    1ca2:	98 a7       	std	Y+40, r25	; 0x28
    1ca4:	a9 a7       	std	Y+41, r26	; 0x29
    1ca6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca8:	6f a1       	ldd	r22, Y+39	; 0x27
    1caa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cac:	89 a5       	ldd	r24, Y+41	; 0x29
    1cae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	4a e7       	ldi	r20, 0x7A	; 122
    1cb6:	53 e4       	ldi	r21, 0x43	; 67
    1cb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	8b a3       	std	Y+35, r24	; 0x23
    1cc2:	9c a3       	std	Y+36, r25	; 0x24
    1cc4:	ad a3       	std	Y+37, r26	; 0x25
    1cc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e8       	ldi	r20, 0x80	; 128
    1cd6:	5f e3       	ldi	r21, 0x3F	; 63
    1cd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cdc:	88 23       	and	r24, r24
    1cde:	2c f4       	brge	.+10     	; 0x1cea <Lcd_vidInit+0x266>
		__ticks = 1;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9a a3       	std	Y+34, r25	; 0x22
    1ce6:	89 a3       	std	Y+33, r24	; 0x21
    1ce8:	3f c0       	rjmp	.+126    	; 0x1d68 <Lcd_vidInit+0x2e4>
	else if (__tmp > 65535)
    1cea:	6b a1       	ldd	r22, Y+35	; 0x23
    1cec:	7c a1       	ldd	r23, Y+36	; 0x24
    1cee:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	4c f5       	brge	.+82     	; 0x1d54 <Lcd_vidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d02:	6f a1       	ldd	r22, Y+39	; 0x27
    1d04:	78 a5       	ldd	r23, Y+40	; 0x28
    1d06:	89 a5       	ldd	r24, Y+41	; 0x29
    1d08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e2       	ldi	r20, 0x20	; 32
    1d10:	51 e4       	ldi	r21, 0x41	; 65
    1d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9a a3       	std	Y+34, r25	; 0x22
    1d28:	89 a3       	std	Y+33, r24	; 0x21
    1d2a:	0f c0       	rjmp	.+30     	; 0x1d4a <Lcd_vidInit+0x2c6>
    1d2c:	89 e1       	ldi	r24, 0x19	; 25
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	98 a3       	std	Y+32, r25	; 0x20
    1d32:	8f 8f       	std	Y+31, r24	; 0x1f
    1d34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d36:	98 a1       	ldd	r25, Y+32	; 0x20
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <Lcd_vidInit+0x2b4>
    1d3c:	98 a3       	std	Y+32, r25	; 0x20
    1d3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d40:	89 a1       	ldd	r24, Y+33	; 0x21
    1d42:	9a a1       	ldd	r25, Y+34	; 0x22
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	9a a3       	std	Y+34, r25	; 0x22
    1d48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	69 f7       	brne	.-38     	; 0x1d2c <Lcd_vidInit+0x2a8>
    1d52:	14 c0       	rjmp	.+40     	; 0x1d7c <Lcd_vidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d54:	6b a1       	ldd	r22, Y+35	; 0x23
    1d56:	7c a1       	ldd	r23, Y+36	; 0x24
    1d58:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
    1d68:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <Lcd_vidInit+0x2f0>
    1d78:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
	Lcd_vidSendCommand(LCD_u8CLEAR_DISPLAY_CFG); 		//Clear LCD
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Lcd_vidSendCommand>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 e8       	ldi	r26, 0x80	; 128
    1d88:	bf e3       	ldi	r27, 0x3F	; 63
    1d8a:	89 8f       	std	Y+25, r24	; 0x19
    1d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	69 8d       	ldd	r22, Y+25	; 0x19
    1d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	53 e4       	ldi	r21, 0x43	; 67
    1da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8d 8b       	std	Y+21, r24	; 0x15
    1dac:	9e 8b       	std	Y+22, r25	; 0x16
    1dae:	af 8b       	std	Y+23, r26	; 0x17
    1db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <Lcd_vidInit+0x350>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <Lcd_vidInit+0x3ce>
	else if (__tmp > 65535)
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <Lcd_vidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	69 8d       	ldd	r22, Y+25	; 0x19
    1dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <Lcd_vidInit+0x3b0>
    1e16:	89 e1       	ldi	r24, 0x19	; 25
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
    1e1e:	89 89       	ldd	r24, Y+17	; 0x11
    1e20:	9a 89       	ldd	r25, Y+18	; 0x12
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <Lcd_vidInit+0x39e>
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <Lcd_vidInit+0x392>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <Lcd_vidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
    1e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5c:	98 89       	ldd	r25, Y+16	; 0x10
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <Lcd_vidInit+0x3da>
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
	Lcd_vidSendCommand(LCD_u8ENTRY_MODE_SET_CFG);       //Entry Mode
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Lcd_vidSendCommand>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e8       	ldi	r26, 0x80	; 128
    1e72:	bf e3       	ldi	r27, 0x3F	; 63
    1e74:	8b 87       	std	Y+11, r24	; 0x0b
    1e76:	9c 87       	std	Y+12, r25	; 0x0c
    1e78:	ad 87       	std	Y+13, r26	; 0x0d
    1e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4a e7       	ldi	r20, 0x7A	; 122
    1e8a:	53 e4       	ldi	r21, 0x43	; 67
    1e8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	8f 83       	std	Y+7, r24	; 0x07
    1e96:	98 87       	std	Y+8, r25	; 0x08
    1e98:	a9 87       	std	Y+9, r26	; 0x09
    1e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <Lcd_vidInit+0x43a>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
    1ebc:	3f c0       	rjmp	.+126    	; 0x1f3c <Lcd_vidInit+0x4b8>
	else if (__tmp > 65535)
    1ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec0:	78 85       	ldd	r23, Y+8	; 0x08
    1ec2:	89 85       	ldd	r24, Y+9	; 0x09
    1ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	4c f5       	brge	.+82     	; 0x1f28 <Lcd_vidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e2       	ldi	r20, 0x20	; 32
    1ee4:	51 e4       	ldi	r21, 0x41	; 65
    1ee6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <Lcd_vidInit+0x49a>
    1f00:	89 e1       	ldi	r24, 0x19	; 25
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	8b 83       	std	Y+3, r24	; 0x03
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <Lcd_vidInit+0x488>
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <Lcd_vidInit+0x47c>
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <Lcd_vidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f28:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2a:	78 85       	ldd	r23, Y+8	; 0x08
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <Lcd_vidInit+0x4c4>
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
}
    1f50:	ca 5b       	subi	r28, 0xBA	; 186
    1f52:	df 4f       	sbci	r29, 0xFF	; 255
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

00001f68 <Lcd_vidSendCommand>:
void Lcd_vidSendCommand(u8 copy_data)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	ab 97       	sbiw	r28, 0x2b	; 43
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_enuWriteChannelId(LCD_u8EN_PIN,DIO_u8LOW);
    1f7e:	8a e0       	ldi	r24, 0x0A	; 10
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RS_PIN,DIO_u8LOW);
    1f86:	88 e0       	ldi	r24, 0x08	; 8
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RW_PIN,DIO_u8LOW);
    1f8e:	89 e0       	ldi	r24, 0x09	; 9
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>

	Lcd_prvSendData(copy_data);
    1f96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f98:	0e 94 19 14 	call	0x2832	; 0x2832 <Lcd_prvSendData>
	Applying_Falling_Edge_On_EN();
    1f9c:	8a e0       	ldi	r24, 0x0A	; 10
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e4       	ldi	r27, 0x40	; 64
    1fac:	8f a3       	std	Y+39, r24	; 0x27
    1fae:	98 a7       	std	Y+40, r25	; 0x28
    1fb0:	a9 a7       	std	Y+41, r26	; 0x29
    1fb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e7       	ldi	r20, 0x7A	; 122
    1fc2:	53 e4       	ldi	r21, 0x43	; 67
    1fc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8b a3       	std	Y+35, r24	; 0x23
    1fce:	9c a3       	std	Y+36, r25	; 0x24
    1fd0:	ad a3       	std	Y+37, r26	; 0x25
    1fd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fda:	9e a1       	ldd	r25, Y+38	; 0x26
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <Lcd_vidSendCommand+0x8e>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9a a3       	std	Y+34, r25	; 0x22
    1ff2:	89 a3       	std	Y+33, r24	; 0x21
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <Lcd_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    1ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <Lcd_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	6f a1       	ldd	r22, Y+39	; 0x27
    2010:	78 a5       	ldd	r23, Y+40	; 0x28
    2012:	89 a5       	ldd	r24, Y+41	; 0x29
    2014:	9a a5       	ldd	r25, Y+42	; 0x2a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9a a3       	std	Y+34, r25	; 0x22
    2034:	89 a3       	std	Y+33, r24	; 0x21
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <Lcd_vidSendCommand+0xee>
    2038:	89 e1       	ldi	r24, 0x19	; 25
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	98 a3       	std	Y+32, r25	; 0x20
    203e:	8f 8f       	std	Y+31, r24	; 0x1f
    2040:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2042:	98 a1       	ldd	r25, Y+32	; 0x20
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <Lcd_vidSendCommand+0xdc>
    2048:	98 a3       	std	Y+32, r25	; 0x20
    204a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	89 a1       	ldd	r24, Y+33	; 0x21
    204e:	9a a1       	ldd	r25, Y+34	; 0x22
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9a a3       	std	Y+34, r25	; 0x22
    2054:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	89 a1       	ldd	r24, Y+33	; 0x21
    2058:	9a a1       	ldd	r25, Y+34	; 0x22
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <Lcd_vidSendCommand+0xd0>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <Lcd_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6b a1       	ldd	r22, Y+35	; 0x23
    2062:	7c a1       	ldd	r23, Y+36	; 0x24
    2064:	8d a1       	ldd	r24, Y+37	; 0x25
    2066:	9e a1       	ldd	r25, Y+38	; 0x26
    2068:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9a a3       	std	Y+34, r25	; 0x22
    2072:	89 a3       	std	Y+33, r24	; 0x21
    2074:	89 a1       	ldd	r24, Y+33	; 0x21
    2076:	9a a1       	ldd	r25, Y+34	; 0x22
    2078:	9e 8f       	std	Y+30, r25	; 0x1e
    207a:	8d 8f       	std	Y+29, r24	; 0x1d
    207c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    207e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <Lcd_vidSendCommand+0x118>
    2084:	9e 8f       	std	Y+30, r25	; 0x1e
    2086:	8d 8f       	std	Y+29, r24	; 0x1d
    2088:	8a e0       	ldi	r24, 0x0A	; 10
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e4       	ldi	r27, 0x40	; 64
    2098:	89 8f       	std	Y+25, r24	; 0x19
    209a:	9a 8f       	std	Y+26, r25	; 0x1a
    209c:	ab 8f       	std	Y+27, r26	; 0x1b
    209e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	69 8d       	ldd	r22, Y+25	; 0x19
    20a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a e7       	ldi	r20, 0x7A	; 122
    20ae:	53 e4       	ldi	r21, 0x43	; 67
    20b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8d 8b       	std	Y+21, r24	; 0x15
    20ba:	9e 8b       	std	Y+22, r25	; 0x16
    20bc:	af 8b       	std	Y+23, r26	; 0x17
    20be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <Lcd_vidSendCommand+0x17a>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <Lcd_vidSendCommand+0x1f8>
	else if (__tmp > 65535)
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <Lcd_vidSendCommand+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <Lcd_vidSendCommand+0x1da>
    2124:	89 e1       	ldi	r24, 0x19	; 25
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9a 8b       	std	Y+18, r25	; 0x12
    212a:	89 8b       	std	Y+17, r24	; 0x11
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <Lcd_vidSendCommand+0x1c8>
    2134:	9a 8b       	std	Y+18, r25	; 0x12
    2136:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8b 89       	ldd	r24, Y+19	; 0x13
    2144:	9c 89       	ldd	r25, Y+20	; 0x14
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <Lcd_vidSendCommand+0x1bc>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <Lcd_vidSendCommand+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	98 8b       	std	Y+16, r25	; 0x10
    2166:	8f 87       	std	Y+15, r24	; 0x0f
    2168:	8f 85       	ldd	r24, Y+15	; 0x0f
    216a:	98 89       	ldd	r25, Y+16	; 0x10
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <Lcd_vidSendCommand+0x204>
    2170:	98 8b       	std	Y+16, r25	; 0x10
    2172:	8f 87       	std	Y+15, r24	; 0x0f
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e8       	ldi	r26, 0x80	; 128
    217a:	bf e3       	ldi	r27, 0x3F	; 63
    217c:	8b 87       	std	Y+11, r24	; 0x0b
    217e:	9c 87       	std	Y+12, r25	; 0x0c
    2180:	ad 87       	std	Y+13, r26	; 0x0d
    2182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a e7       	ldi	r20, 0x7A	; 122
    2192:	53 e4       	ldi	r21, 0x43	; 67
    2194:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	8f 83       	std	Y+7, r24	; 0x07
    219e:	98 87       	std	Y+8, r25	; 0x08
    21a0:	a9 87       	std	Y+9, r26	; 0x09
    21a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <Lcd_vidSendCommand+0x25e>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <Lcd_vidSendCommand+0x2dc>
	else if (__tmp > 65535)
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <Lcd_vidSendCommand+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <Lcd_vidSendCommand+0x2be>
    2208:	89 e1       	ldi	r24, 0x19	; 25
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <Lcd_vidSendCommand+0x2ac>
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <Lcd_vidSendCommand+0x2a0>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <Lcd_vidSendCommand+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <Lcd_vidSendCommand+0x2e8>
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
}
    2258:	ab 96       	adiw	r28, 0x2b	; 43
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <Lcd_vidDiaplayChar>:

void Lcd_vidDiaplayChar(u8 copy_data)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	ab 97       	sbiw	r28, 0x2b	; 43
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_enuWriteChannelId(LCD_u8EN_PIN,DIO_u8LOW);
    2280:	8a e0       	ldi	r24, 0x0A	; 10
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RS_PIN,DIO_u8HIGH);
    2288:	88 e0       	ldi	r24, 0x08	; 8
    228a:	61 e0       	ldi	r22, 0x01	; 1
    228c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RW_PIN,DIO_u8LOW);
    2290:	89 e0       	ldi	r24, 0x09	; 9
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Lcd_prvSendData(copy_data);
    2298:	8b a5       	ldd	r24, Y+43	; 0x2b
    229a:	0e 94 19 14 	call	0x2832	; 0x2832 <Lcd_prvSendData>
	Applying_Falling_Edge_On_EN();
    229e:	8a e0       	ldi	r24, 0x0A	; 10
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e0       	ldi	r26, 0x00	; 0
    22ac:	b0 e4       	ldi	r27, 0x40	; 64
    22ae:	8f a3       	std	Y+39, r24	; 0x27
    22b0:	98 a7       	std	Y+40, r25	; 0x28
    22b2:	a9 a7       	std	Y+41, r26	; 0x29
    22b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	6f a1       	ldd	r22, Y+39	; 0x27
    22b8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ba:	89 a5       	ldd	r24, Y+41	; 0x29
    22bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8b a3       	std	Y+35, r24	; 0x23
    22d0:	9c a3       	std	Y+36, r25	; 0x24
    22d2:	ad a3       	std	Y+37, r26	; 0x25
    22d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22d6:	6b a1       	ldd	r22, Y+35	; 0x23
    22d8:	7c a1       	ldd	r23, Y+36	; 0x24
    22da:	8d a1       	ldd	r24, Y+37	; 0x25
    22dc:	9e a1       	ldd	r25, Y+38	; 0x26
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <Lcd_vidDiaplayChar+0x8e>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9a a3       	std	Y+34, r25	; 0x22
    22f4:	89 a3       	std	Y+33, r24	; 0x21
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <Lcd_vidDiaplayChar+0x10c>
	else if (__tmp > 65535)
    22f8:	6b a1       	ldd	r22, Y+35	; 0x23
    22fa:	7c a1       	ldd	r23, Y+36	; 0x24
    22fc:	8d a1       	ldd	r24, Y+37	; 0x25
    22fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <Lcd_vidDiaplayChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	6f a1       	ldd	r22, Y+39	; 0x27
    2312:	78 a5       	ldd	r23, Y+40	; 0x28
    2314:	89 a5       	ldd	r24, Y+41	; 0x29
    2316:	9a a5       	ldd	r25, Y+42	; 0x2a
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9a a3       	std	Y+34, r25	; 0x22
    2336:	89 a3       	std	Y+33, r24	; 0x21
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <Lcd_vidDiaplayChar+0xee>
    233a:	89 e1       	ldi	r24, 0x19	; 25
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	98 a3       	std	Y+32, r25	; 0x20
    2340:	8f 8f       	std	Y+31, r24	; 0x1f
    2342:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2344:	98 a1       	ldd	r25, Y+32	; 0x20
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <Lcd_vidDiaplayChar+0xdc>
    234a:	98 a3       	std	Y+32, r25	; 0x20
    234c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	89 a1       	ldd	r24, Y+33	; 0x21
    2350:	9a a1       	ldd	r25, Y+34	; 0x22
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9a a3       	std	Y+34, r25	; 0x22
    2356:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	89 a1       	ldd	r24, Y+33	; 0x21
    235a:	9a a1       	ldd	r25, Y+34	; 0x22
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <Lcd_vidDiaplayChar+0xd0>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <Lcd_vidDiaplayChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6b a1       	ldd	r22, Y+35	; 0x23
    2364:	7c a1       	ldd	r23, Y+36	; 0x24
    2366:	8d a1       	ldd	r24, Y+37	; 0x25
    2368:	9e a1       	ldd	r25, Y+38	; 0x26
    236a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9a a3       	std	Y+34, r25	; 0x22
    2374:	89 a3       	std	Y+33, r24	; 0x21
    2376:	89 a1       	ldd	r24, Y+33	; 0x21
    2378:	9a a1       	ldd	r25, Y+34	; 0x22
    237a:	9e 8f       	std	Y+30, r25	; 0x1e
    237c:	8d 8f       	std	Y+29, r24	; 0x1d
    237e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <Lcd_vidDiaplayChar+0x118>
    2386:	9e 8f       	std	Y+30, r25	; 0x1e
    2388:	8d 8f       	std	Y+29, r24	; 0x1d
    238a:	8a e0       	ldi	r24, 0x0A	; 10
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e4       	ldi	r27, 0x40	; 64
    239a:	89 8f       	std	Y+25, r24	; 0x19
    239c:	9a 8f       	std	Y+26, r25	; 0x1a
    239e:	ab 8f       	std	Y+27, r26	; 0x1b
    23a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	69 8d       	ldd	r22, Y+25	; 0x19
    23a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a e7       	ldi	r20, 0x7A	; 122
    23b0:	53 e4       	ldi	r21, 0x43	; 67
    23b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8d 8b       	std	Y+21, r24	; 0x15
    23bc:	9e 8b       	std	Y+22, r25	; 0x16
    23be:	af 8b       	std	Y+23, r26	; 0x17
    23c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23c2:	6d 89       	ldd	r22, Y+21	; 0x15
    23c4:	7e 89       	ldd	r23, Y+22	; 0x16
    23c6:	8f 89       	ldd	r24, Y+23	; 0x17
    23c8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <Lcd_vidDiaplayChar+0x17a>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <Lcd_vidDiaplayChar+0x1f8>
	else if (__tmp > 65535)
    23e4:	6d 89       	ldd	r22, Y+21	; 0x15
    23e6:	7e 89       	ldd	r23, Y+22	; 0x16
    23e8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ea:	98 8d       	ldd	r25, Y+24	; 0x18
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <Lcd_vidDiaplayChar+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	69 8d       	ldd	r22, Y+25	; 0x19
    23fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2402:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9c 8b       	std	Y+20, r25	; 0x14
    2422:	8b 8b       	std	Y+19, r24	; 0x13
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <Lcd_vidDiaplayChar+0x1da>
    2426:	89 e1       	ldi	r24, 0x19	; 25
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9a 8b       	std	Y+18, r25	; 0x12
    242c:	89 8b       	std	Y+17, r24	; 0x11
    242e:	89 89       	ldd	r24, Y+17	; 0x11
    2430:	9a 89       	ldd	r25, Y+18	; 0x12
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <Lcd_vidDiaplayChar+0x1c8>
    2436:	9a 8b       	std	Y+18, r25	; 0x12
    2438:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8b 89       	ldd	r24, Y+19	; 0x13
    243c:	9c 89       	ldd	r25, Y+20	; 0x14
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	9c 8b       	std	Y+20, r25	; 0x14
    2442:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8b 89       	ldd	r24, Y+19	; 0x13
    2446:	9c 89       	ldd	r25, Y+20	; 0x14
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <Lcd_vidDiaplayChar+0x1bc>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <Lcd_vidDiaplayChar+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	6d 89       	ldd	r22, Y+21	; 0x15
    2450:	7e 89       	ldd	r23, Y+22	; 0x16
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 8d       	ldd	r25, Y+24	; 0x18
    2456:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	98 8b       	std	Y+16, r25	; 0x10
    2468:	8f 87       	std	Y+15, r24	; 0x0f
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	98 89       	ldd	r25, Y+16	; 0x10
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <Lcd_vidDiaplayChar+0x204>
    2472:	98 8b       	std	Y+16, r25	; 0x10
    2474:	8f 87       	std	Y+15, r24	; 0x0f
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a0 e8       	ldi	r26, 0x80	; 128
    247c:	bf e3       	ldi	r27, 0x3F	; 63
    247e:	8b 87       	std	Y+11, r24	; 0x0b
    2480:	9c 87       	std	Y+12, r25	; 0x0c
    2482:	ad 87       	std	Y+13, r26	; 0x0d
    2484:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	6b 85       	ldd	r22, Y+11	; 0x0b
    2488:	7c 85       	ldd	r23, Y+12	; 0x0c
    248a:	8d 85       	ldd	r24, Y+13	; 0x0d
    248c:	9e 85       	ldd	r25, Y+14	; 0x0e
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a e7       	ldi	r20, 0x7A	; 122
    2494:	53 e4       	ldi	r21, 0x43	; 67
    2496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8f 83       	std	Y+7, r24	; 0x07
    24a0:	98 87       	std	Y+8, r25	; 0x08
    24a2:	a9 87       	std	Y+9, r26	; 0x09
    24a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <Lcd_vidDiaplayChar+0x25e>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <Lcd_vidDiaplayChar+0x2dc>
	else if (__tmp > 65535)
    24c8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ca:	78 85       	ldd	r23, Y+8	; 0x08
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <Lcd_vidDiaplayChar+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <Lcd_vidDiaplayChar+0x2be>
    250a:	89 e1       	ldi	r24, 0x19	; 25
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <Lcd_vidDiaplayChar+0x2ac>
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <Lcd_vidDiaplayChar+0x2a0>
    2530:	14 c0       	rjmp	.+40     	; 0x255a <Lcd_vidDiaplayChar+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <Lcd_vidDiaplayChar+0x2e8>
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
}
    255a:	ab 96       	adiw	r28, 0x2b	; 43
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <Lcd_vidGoTo>:

void Lcd_vidGoTo(u8 Copy_u8Row , u8 Copy_u8Column)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	6e 97       	sbiw	r28, 0x1e	; 30
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	8d 8f       	std	Y+29, r24	; 0x1d
    2582:	6e 8f       	std	Y+30, r22	; 0x1e
	if(Copy_u8Row == 0)
    2584:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2586:	88 23       	and	r24, r24
    2588:	09 f0       	breq	.+2      	; 0x258c <Lcd_vidGoTo+0x20>
    258a:	77 c0       	rjmp	.+238    	; 0x267a <Lcd_vidGoTo+0x10e>
	{
		Lcd_vidSendCommand((0x80)+(Copy_u8Column));
    258c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    258e:	80 58       	subi	r24, 0x80	; 128
    2590:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Lcd_vidSendCommand>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e0       	ldi	r26, 0x00	; 0
    259a:	b0 e4       	ldi	r27, 0x40	; 64
    259c:	89 8f       	std	Y+25, r24	; 0x19
    259e:	9a 8f       	std	Y+26, r25	; 0x1a
    25a0:	ab 8f       	std	Y+27, r26	; 0x1b
    25a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	69 8d       	ldd	r22, Y+25	; 0x19
    25a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	53 e4       	ldi	r21, 0x43	; 67
    25b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8d 8b       	std	Y+21, r24	; 0x15
    25be:	9e 8b       	std	Y+22, r25	; 0x16
    25c0:	af 8b       	std	Y+23, r26	; 0x17
    25c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c4:	6d 89       	ldd	r22, Y+21	; 0x15
    25c6:	7e 89       	ldd	r23, Y+22	; 0x16
    25c8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ca:	98 8d       	ldd	r25, Y+24	; 0x18
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	2c f4       	brge	.+10     	; 0x25e6 <Lcd_vidGoTo+0x7a>
		__ticks = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
    25e2:	8b 8b       	std	Y+19, r24	; 0x13
    25e4:	3f c0       	rjmp	.+126    	; 0x2664 <Lcd_vidGoTo+0xf8>
	else if (__tmp > 65535)
    25e6:	6d 89       	ldd	r22, Y+21	; 0x15
    25e8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ea:	8f 89       	ldd	r24, Y+23	; 0x17
    25ec:	98 8d       	ldd	r25, Y+24	; 0x18
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	4c f5       	brge	.+82     	; 0x2650 <Lcd_vidGoTo+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	51 e4       	ldi	r21, 0x41	; 65
    260e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <Lcd_vidGoTo+0xda>
    2628:	89 e1       	ldi	r24, 0x19	; 25
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9a 8b       	std	Y+18, r25	; 0x12
    262e:	89 8b       	std	Y+17, r24	; 0x11
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	9a 89       	ldd	r25, Y+18	; 0x12
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <Lcd_vidGoTo+0xc8>
    2638:	9a 8b       	std	Y+18, r25	; 0x12
    263a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263c:	8b 89       	ldd	r24, Y+19	; 0x13
    263e:	9c 89       	ldd	r25, Y+20	; 0x14
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9c 8b       	std	Y+20, r25	; 0x14
    2644:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	8b 89       	ldd	r24, Y+19	; 0x13
    2648:	9c 89       	ldd	r25, Y+20	; 0x14
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	69 f7       	brne	.-38     	; 0x2628 <Lcd_vidGoTo+0xbc>
    264e:	8f c0       	rjmp	.+286    	; 0x276e <Lcd_vidGoTo+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2650:	6d 89       	ldd	r22, Y+21	; 0x15
    2652:	7e 89       	ldd	r23, Y+22	; 0x16
    2654:	8f 89       	ldd	r24, Y+23	; 0x17
    2656:	98 8d       	ldd	r25, Y+24	; 0x18
    2658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9c 8b       	std	Y+20, r25	; 0x14
    2662:	8b 8b       	std	Y+19, r24	; 0x13
    2664:	8b 89       	ldd	r24, Y+19	; 0x13
    2666:	9c 89       	ldd	r25, Y+20	; 0x14
    2668:	98 8b       	std	Y+16, r25	; 0x10
    266a:	8f 87       	std	Y+15, r24	; 0x0f
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	98 89       	ldd	r25, Y+16	; 0x10
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <Lcd_vidGoTo+0x104>
    2674:	98 8b       	std	Y+16, r25	; 0x10
    2676:	8f 87       	std	Y+15, r24	; 0x0f
    2678:	7a c0       	rjmp	.+244    	; 0x276e <Lcd_vidGoTo+0x202>
		_delay_ms(2);
	}
	else if(Copy_u8Row == 1)
    267a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	09 f0       	breq	.+2      	; 0x2682 <Lcd_vidGoTo+0x116>
    2680:	76 c0       	rjmp	.+236    	; 0x276e <Lcd_vidGoTo+0x202>
	{
		Lcd_vidSendCommand((0xC0)+(Copy_u8Column));
    2682:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2684:	80 54       	subi	r24, 0x40	; 64
    2686:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Lcd_vidSendCommand>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 e0       	ldi	r26, 0x00	; 0
    2690:	b0 e4       	ldi	r27, 0x40	; 64
    2692:	8b 87       	std	Y+11, r24	; 0x0b
    2694:	9c 87       	std	Y+12, r25	; 0x0c
    2696:	ad 87       	std	Y+13, r26	; 0x0d
    2698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269a:	6b 85       	ldd	r22, Y+11	; 0x0b
    269c:	7c 85       	ldd	r23, Y+12	; 0x0c
    269e:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a e7       	ldi	r20, 0x7A	; 122
    26a8:	53 e4       	ldi	r21, 0x43	; 67
    26aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8f 83       	std	Y+7, r24	; 0x07
    26b4:	98 87       	std	Y+8, r25	; 0x08
    26b6:	a9 87       	std	Y+9, r26	; 0x09
    26b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ba:	6f 81       	ldd	r22, Y+7	; 0x07
    26bc:	78 85       	ldd	r23, Y+8	; 0x08
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	2c f4       	brge	.+10     	; 0x26dc <Lcd_vidGoTo+0x170>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	3f c0       	rjmp	.+126    	; 0x275a <Lcd_vidGoTo+0x1ee>
	else if (__tmp > 65535)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	4c f5       	brge	.+82     	; 0x2746 <Lcd_vidGoTo+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	0f c0       	rjmp	.+30     	; 0x273c <Lcd_vidGoTo+0x1d0>
    271e:	89 e1       	ldi	r24, 0x19	; 25
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	9c 81       	ldd	r25, Y+4	; 0x04
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <Lcd_vidGoTo+0x1be>
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	69 f7       	brne	.-38     	; 0x271e <Lcd_vidGoTo+0x1b2>
    2744:	14 c0       	rjmp	.+40     	; 0x276e <Lcd_vidGoTo+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <Lcd_vidGoTo+0x1fa>
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    276e:	6e 96       	adiw	r28, 0x1e	; 30
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <Lcd_vidCreateCustomCharacter>:

void Lcd_vidCreateCustomCharacter (pu8 Pattern, u8 Location)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <Lcd_vidCreateCustomCharacter+0x6>
    2786:	00 d0       	rcall	.+0      	; 0x2788 <Lcd_vidCreateCustomCharacter+0x8>
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	9b 83       	std	Y+3, r25	; 0x03
    278e:	8a 83       	std	Y+2, r24	; 0x02
    2790:	6c 83       	std	Y+4, r22	; 0x04
	u8 i=0;
    2792:	19 82       	std	Y+1, r1	; 0x01
	Lcd_vidSendCommand (0x40+(Location*8));     //Send the Address of CGRAM
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	08 96       	adiw	r24, 0x08	; 8
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <Lcd_vidSendCommand>
	for (i=0; i<8; i++)
    27ac:	19 82       	std	Y+1, r1	; 0x01
    27ae:	0e c0       	rjmp	.+28     	; 0x27cc <Lcd_vidCreateCustomCharacter+0x4c>
	{
		Lcd_vidDiaplayChar (Pattern [ i ] );         //Pass the bytes of pattern on LCD
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	fc 01       	movw	r30, r24
    27bc:	e2 0f       	add	r30, r18
    27be:	f3 1f       	adc	r31, r19
    27c0:	80 81       	ld	r24, Z
    27c2:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>

void Lcd_vidCreateCustomCharacter (pu8 Pattern, u8 Location)
{
	u8 i=0;
	Lcd_vidSendCommand (0x40+(Location*8));     //Send the Address of CGRAM
	for (i=0; i<8; i++)
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	88 30       	cpi	r24, 0x08	; 8
    27d0:	78 f3       	brcs	.-34     	; 0x27b0 <Lcd_vidCreateCustomCharacter+0x30>
	{
		Lcd_vidDiaplayChar (Pattern [ i ] );         //Pass the bytes of pattern on LCD
	}
}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <Lcd_vidDiaplayString>:

void Lcd_vidDiaplayString(pu8 string)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <Lcd_vidDiaplayString+0x6>
    27e6:	0f 92       	push	r0
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9b 83       	std	Y+3, r25	; 0x03
    27ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator=0;
    27f0:	19 82       	std	Y+1, r1	; 0x01
    27f2:	0e c0       	rjmp	.+28     	; 0x2810 <Lcd_vidDiaplayString+0x30>
	while (string[iterator]!='\0')
	{
		Lcd_vidDiaplayChar(string[iterator]);
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	fc 01       	movw	r30, r24
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	80 81       	ld	r24, Z
    2806:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
		iterator ++;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	8f 5f       	subi	r24, 0xFF	; 255
    280e:	89 83       	std	Y+1, r24	; 0x01
}

void Lcd_vidDiaplayString(pu8 string)
{
	u8 iterator=0;
	while (string[iterator]!='\0')
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	9b 81       	ldd	r25, Y+3	; 0x03
    281a:	fc 01       	movw	r30, r24
    281c:	e2 0f       	add	r30, r18
    281e:	f3 1f       	adc	r31, r19
    2820:	80 81       	ld	r24, Z
    2822:	88 23       	and	r24, r24
    2824:	39 f7       	brne	.-50     	; 0x27f4 <Lcd_vidDiaplayString+0x14>
	{
		Lcd_vidDiaplayChar(string[iterator]);
		iterator ++;
	}
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <Lcd_prvSendData>:
 * note:
 * in this function I use WriteChannelID not WritePort because
 * if the user want to connect the LCD pins in different place
 * */
static void Lcd_prvSendData(u8 copy_data)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	0f 92       	push	r0
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	89 83       	std	Y+1, r24	; 0x01
	Dio_enuWriteChannelId(LCD_u8D0_PIN,GET_BIT(copy_data,0));
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	98 2f       	mov	r25, r24
    2842:	91 70       	andi	r25, 0x01	; 1
    2844:	80 e1       	ldi	r24, 0x10	; 16
    2846:	69 2f       	mov	r22, r25
    2848:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D1_PIN,GET_BIT(copy_data,1));
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	86 95       	lsr	r24
    2850:	98 2f       	mov	r25, r24
    2852:	91 70       	andi	r25, 0x01	; 1
    2854:	81 e1       	ldi	r24, 0x11	; 17
    2856:	69 2f       	mov	r22, r25
    2858:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D2_PIN,GET_BIT(copy_data,2));
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	86 95       	lsr	r24
    2860:	86 95       	lsr	r24
    2862:	98 2f       	mov	r25, r24
    2864:	91 70       	andi	r25, 0x01	; 1
    2866:	82 e1       	ldi	r24, 0x12	; 18
    2868:	69 2f       	mov	r22, r25
    286a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D3_PIN,GET_BIT(copy_data,3));
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	86 95       	lsr	r24
    2872:	86 95       	lsr	r24
    2874:	86 95       	lsr	r24
    2876:	98 2f       	mov	r25, r24
    2878:	91 70       	andi	r25, 0x01	; 1
    287a:	83 e1       	ldi	r24, 0x13	; 19
    287c:	69 2f       	mov	r22, r25
    287e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D4_PIN,GET_BIT(copy_data,4));
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	82 95       	swap	r24
    2886:	8f 70       	andi	r24, 0x0F	; 15
    2888:	98 2f       	mov	r25, r24
    288a:	91 70       	andi	r25, 0x01	; 1
    288c:	84 e1       	ldi	r24, 0x14	; 20
    288e:	69 2f       	mov	r22, r25
    2890:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D5_PIN,GET_BIT(copy_data,5));
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	82 95       	swap	r24
    2898:	86 95       	lsr	r24
    289a:	87 70       	andi	r24, 0x07	; 7
    289c:	98 2f       	mov	r25, r24
    289e:	91 70       	andi	r25, 0x01	; 1
    28a0:	85 e1       	ldi	r24, 0x15	; 21
    28a2:	69 2f       	mov	r22, r25
    28a4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D6_PIN,GET_BIT(copy_data,6));
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	82 95       	swap	r24
    28ac:	86 95       	lsr	r24
    28ae:	86 95       	lsr	r24
    28b0:	83 70       	andi	r24, 0x03	; 3
    28b2:	98 2f       	mov	r25, r24
    28b4:	91 70       	andi	r25, 0x01	; 1
    28b6:	86 e1       	ldi	r24, 0x16	; 22
    28b8:	69 2f       	mov	r22, r25
    28ba:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D7_PIN,GET_BIT(copy_data,7));
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	98 2f       	mov	r25, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	99 27       	eor	r25, r25
    28c6:	99 1f       	adc	r25, r25
    28c8:	87 e1       	ldi	r24, 0x17	; 23
    28ca:	69 2f       	mov	r22, r25
    28cc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <Dio_enuWriteChannelId>

}
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <main>:
#include "../HAL/Lcd.h"
#include "../MCAL/Adc.h"
#include <avr/delay.h>

int main (void)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	c3 57       	subi	r28, 0x73	; 115
    28e2:	d0 40       	sbci	r29, 0x00	; 0
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
	Port_vidInit();
    28ee:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Port_vidInit>
	Adc_vidInit();
    28f2:	0e 94 9b 05 	call	0xb36	; 0xb36 <Adc_vidInit>
	Adc_vidControl(ADC_u8ENABLE);
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	0e 94 b2 05 	call	0xb64	; 0xb64 <Adc_vidControl>
	Lcd_vidInit();
    28fc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_vidInit>
	Lcd_vidDiaplayString((pu8)"Volume");
    2900:	80 e6       	ldi	r24, 0x60	; 96
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
					,0b00000000
					,0b00000000
					,0b00000000
					,0b00000000
					,0b00000000
					,0b00001111};
    2908:	88 e0       	ldi	r24, 0x08	; 8
    290a:	fe 01       	movw	r30, r28
    290c:	71 96       	adiw	r30, 0x11	; 17
    290e:	df 01       	movw	r26, r30
    2910:	28 2f       	mov	r18, r24
    2912:	1d 92       	st	X+, r1
    2914:	2a 95       	dec	r18
    2916:	e9 f7       	brne	.-6      	; 0x2912 <main+0x3a>
    2918:	8f e0       	ldi	r24, 0x0F	; 15
    291a:	88 8f       	std	Y+24, r24	; 0x18
					,0b00000000
					,0b00000000
					,0b00000000
					,0b00000011
					,0b00011111
	};
    291c:	ce 01       	movw	r24, r28
    291e:	49 96       	adiw	r24, 0x19	; 25
    2920:	63 96       	adiw	r28, 0x13	; 19
    2922:	9f af       	std	Y+63, r25	; 0x3f
    2924:	8e af       	std	Y+62, r24	; 0x3e
    2926:	63 97       	sbiw	r28, 0x13	; 19
    2928:	a0 ed       	ldi	r26, 0xD0	; 208
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	65 96       	adiw	r28, 0x15	; 21
    292e:	bf af       	std	Y+63, r27	; 0x3f
    2930:	ae af       	std	Y+62, r26	; 0x3e
    2932:	65 97       	sbiw	r28, 0x15	; 21
    2934:	b8 e0       	ldi	r27, 0x08	; 8
    2936:	66 96       	adiw	r28, 0x16	; 22
    2938:	bf af       	std	Y+63, r27	; 0x3f
    293a:	66 97       	sbiw	r28, 0x16	; 22
    293c:	65 96       	adiw	r28, 0x15	; 21
    293e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2940:	ff ad       	ldd	r31, Y+63	; 0x3f
    2942:	65 97       	sbiw	r28, 0x15	; 21
    2944:	00 80       	ld	r0, Z
    2946:	65 96       	adiw	r28, 0x15	; 21
    2948:	8e ad       	ldd	r24, Y+62	; 0x3e
    294a:	9f ad       	ldd	r25, Y+63	; 0x3f
    294c:	65 97       	sbiw	r28, 0x15	; 21
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	65 96       	adiw	r28, 0x15	; 21
    2952:	9f af       	std	Y+63, r25	; 0x3f
    2954:	8e af       	std	Y+62, r24	; 0x3e
    2956:	65 97       	sbiw	r28, 0x15	; 21
    2958:	63 96       	adiw	r28, 0x13	; 19
    295a:	ae ad       	ldd	r26, Y+62	; 0x3e
    295c:	bf ad       	ldd	r27, Y+63	; 0x3f
    295e:	63 97       	sbiw	r28, 0x13	; 19
    2960:	0c 92       	st	X, r0
    2962:	63 96       	adiw	r28, 0x13	; 19
    2964:	ee ad       	ldd	r30, Y+62	; 0x3e
    2966:	ff ad       	ldd	r31, Y+63	; 0x3f
    2968:	63 97       	sbiw	r28, 0x13	; 19
    296a:	31 96       	adiw	r30, 0x01	; 1
    296c:	63 96       	adiw	r28, 0x13	; 19
    296e:	ff af       	std	Y+63, r31	; 0x3f
    2970:	ee af       	std	Y+62, r30	; 0x3e
    2972:	63 97       	sbiw	r28, 0x13	; 19
    2974:	66 96       	adiw	r28, 0x16	; 22
    2976:	ff ad       	ldd	r31, Y+63	; 0x3f
    2978:	66 97       	sbiw	r28, 0x16	; 22
    297a:	f1 50       	subi	r31, 0x01	; 1
    297c:	66 96       	adiw	r28, 0x16	; 22
    297e:	ff af       	std	Y+63, r31	; 0x3f
    2980:	66 97       	sbiw	r28, 0x16	; 22
    2982:	66 96       	adiw	r28, 0x16	; 22
    2984:	2f ad       	ldd	r18, Y+63	; 0x3f
    2986:	66 97       	sbiw	r28, 0x16	; 22
    2988:	22 23       	and	r18, r18
    298a:	c1 f6       	brne	.-80     	; 0x293c <main+0x64>
					,0b00000000
					,0b00000000
					,0b00000011
					,0b00011111
					,0b00011111
	};
    298c:	ce 01       	movw	r24, r28
    298e:	81 96       	adiw	r24, 0x21	; 33
    2990:	68 96       	adiw	r28, 0x18	; 24
    2992:	9f af       	std	Y+63, r25	; 0x3f
    2994:	8e af       	std	Y+62, r24	; 0x3e
    2996:	68 97       	sbiw	r28, 0x18	; 24
    2998:	a8 ec       	ldi	r26, 0xC8	; 200
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	6a 96       	adiw	r28, 0x1a	; 26
    299e:	bf af       	std	Y+63, r27	; 0x3f
    29a0:	ae af       	std	Y+62, r26	; 0x3e
    29a2:	6a 97       	sbiw	r28, 0x1a	; 26
    29a4:	b8 e0       	ldi	r27, 0x08	; 8
    29a6:	6b 96       	adiw	r28, 0x1b	; 27
    29a8:	bf af       	std	Y+63, r27	; 0x3f
    29aa:	6b 97       	sbiw	r28, 0x1b	; 27
    29ac:	6a 96       	adiw	r28, 0x1a	; 26
    29ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    29b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    29b2:	6a 97       	sbiw	r28, 0x1a	; 26
    29b4:	00 80       	ld	r0, Z
    29b6:	6a 96       	adiw	r28, 0x1a	; 26
    29b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    29ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    29bc:	6a 97       	sbiw	r28, 0x1a	; 26
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	6a 96       	adiw	r28, 0x1a	; 26
    29c2:	9f af       	std	Y+63, r25	; 0x3f
    29c4:	8e af       	std	Y+62, r24	; 0x3e
    29c6:	6a 97       	sbiw	r28, 0x1a	; 26
    29c8:	68 96       	adiw	r28, 0x18	; 24
    29ca:	ae ad       	ldd	r26, Y+62	; 0x3e
    29cc:	bf ad       	ldd	r27, Y+63	; 0x3f
    29ce:	68 97       	sbiw	r28, 0x18	; 24
    29d0:	0c 92       	st	X, r0
    29d2:	68 96       	adiw	r28, 0x18	; 24
    29d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    29d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    29d8:	68 97       	sbiw	r28, 0x18	; 24
    29da:	31 96       	adiw	r30, 0x01	; 1
    29dc:	68 96       	adiw	r28, 0x18	; 24
    29de:	ff af       	std	Y+63, r31	; 0x3f
    29e0:	ee af       	std	Y+62, r30	; 0x3e
    29e2:	68 97       	sbiw	r28, 0x18	; 24
    29e4:	6b 96       	adiw	r28, 0x1b	; 27
    29e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    29e8:	6b 97       	sbiw	r28, 0x1b	; 27
    29ea:	f1 50       	subi	r31, 0x01	; 1
    29ec:	6b 96       	adiw	r28, 0x1b	; 27
    29ee:	ff af       	std	Y+63, r31	; 0x3f
    29f0:	6b 97       	sbiw	r28, 0x1b	; 27
    29f2:	6b 96       	adiw	r28, 0x1b	; 27
    29f4:	2f ad       	ldd	r18, Y+63	; 0x3f
    29f6:	6b 97       	sbiw	r28, 0x1b	; 27
    29f8:	22 23       	and	r18, r18
    29fa:	c1 f6       	brne	.-80     	; 0x29ac <main+0xd4>
					,0b00000000
					,0b00000011
					,0b00011111
					,0b00011111
					,0b00011111
	};
    29fc:	ce 01       	movw	r24, r28
    29fe:	89 96       	adiw	r24, 0x29	; 41
    2a00:	6d 96       	adiw	r28, 0x1d	; 29
    2a02:	9f af       	std	Y+63, r25	; 0x3f
    2a04:	8e af       	std	Y+62, r24	; 0x3e
    2a06:	6d 97       	sbiw	r28, 0x1d	; 29
    2a08:	a0 ec       	ldi	r26, 0xC0	; 192
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	6f 96       	adiw	r28, 0x1f	; 31
    2a0e:	bf af       	std	Y+63, r27	; 0x3f
    2a10:	ae af       	std	Y+62, r26	; 0x3e
    2a12:	6f 97       	sbiw	r28, 0x1f	; 31
    2a14:	b8 e0       	ldi	r27, 0x08	; 8
    2a16:	a0 96       	adiw	r28, 0x20	; 32
    2a18:	bf af       	std	Y+63, r27	; 0x3f
    2a1a:	a0 97       	sbiw	r28, 0x20	; 32
    2a1c:	6f 96       	adiw	r28, 0x1f	; 31
    2a1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a20:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a22:	6f 97       	sbiw	r28, 0x1f	; 31
    2a24:	00 80       	ld	r0, Z
    2a26:	6f 96       	adiw	r28, 0x1f	; 31
    2a28:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a2c:	6f 97       	sbiw	r28, 0x1f	; 31
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	6f 96       	adiw	r28, 0x1f	; 31
    2a32:	9f af       	std	Y+63, r25	; 0x3f
    2a34:	8e af       	std	Y+62, r24	; 0x3e
    2a36:	6f 97       	sbiw	r28, 0x1f	; 31
    2a38:	6d 96       	adiw	r28, 0x1d	; 29
    2a3a:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a3c:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a3e:	6d 97       	sbiw	r28, 0x1d	; 29
    2a40:	0c 92       	st	X, r0
    2a42:	6d 96       	adiw	r28, 0x1d	; 29
    2a44:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a46:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a48:	6d 97       	sbiw	r28, 0x1d	; 29
    2a4a:	31 96       	adiw	r30, 0x01	; 1
    2a4c:	6d 96       	adiw	r28, 0x1d	; 29
    2a4e:	ff af       	std	Y+63, r31	; 0x3f
    2a50:	ee af       	std	Y+62, r30	; 0x3e
    2a52:	6d 97       	sbiw	r28, 0x1d	; 29
    2a54:	a0 96       	adiw	r28, 0x20	; 32
    2a56:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a58:	a0 97       	sbiw	r28, 0x20	; 32
    2a5a:	f1 50       	subi	r31, 0x01	; 1
    2a5c:	a0 96       	adiw	r28, 0x20	; 32
    2a5e:	ff af       	std	Y+63, r31	; 0x3f
    2a60:	a0 97       	sbiw	r28, 0x20	; 32
    2a62:	a0 96       	adiw	r28, 0x20	; 32
    2a64:	2f ad       	ldd	r18, Y+63	; 0x3f
    2a66:	a0 97       	sbiw	r28, 0x20	; 32
    2a68:	22 23       	and	r18, r18
    2a6a:	c1 f6       	brne	.-80     	; 0x2a1c <main+0x144>
					,0b00000111
					,0b00011111
					,0b00011111
					,0b00011111
					,0b00011111
	};
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	c1 96       	adiw	r24, 0x31	; 49
    2a70:	a2 96       	adiw	r28, 0x22	; 34
    2a72:	9f af       	std	Y+63, r25	; 0x3f
    2a74:	8e af       	std	Y+62, r24	; 0x3e
    2a76:	a2 97       	sbiw	r28, 0x22	; 34
    2a78:	a8 eb       	ldi	r26, 0xB8	; 184
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	a4 96       	adiw	r28, 0x24	; 36
    2a7e:	bf af       	std	Y+63, r27	; 0x3f
    2a80:	ae af       	std	Y+62, r26	; 0x3e
    2a82:	a4 97       	sbiw	r28, 0x24	; 36
    2a84:	b8 e0       	ldi	r27, 0x08	; 8
    2a86:	a5 96       	adiw	r28, 0x25	; 37
    2a88:	bf af       	std	Y+63, r27	; 0x3f
    2a8a:	a5 97       	sbiw	r28, 0x25	; 37
    2a8c:	a4 96       	adiw	r28, 0x24	; 36
    2a8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a90:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a92:	a4 97       	sbiw	r28, 0x24	; 36
    2a94:	00 80       	ld	r0, Z
    2a96:	a4 96       	adiw	r28, 0x24	; 36
    2a98:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a9c:	a4 97       	sbiw	r28, 0x24	; 36
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	a4 96       	adiw	r28, 0x24	; 36
    2aa2:	9f af       	std	Y+63, r25	; 0x3f
    2aa4:	8e af       	std	Y+62, r24	; 0x3e
    2aa6:	a4 97       	sbiw	r28, 0x24	; 36
    2aa8:	a2 96       	adiw	r28, 0x22	; 34
    2aaa:	ae ad       	ldd	r26, Y+62	; 0x3e
    2aac:	bf ad       	ldd	r27, Y+63	; 0x3f
    2aae:	a2 97       	sbiw	r28, 0x22	; 34
    2ab0:	0c 92       	st	X, r0
    2ab2:	a2 96       	adiw	r28, 0x22	; 34
    2ab4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ab6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ab8:	a2 97       	sbiw	r28, 0x22	; 34
    2aba:	31 96       	adiw	r30, 0x01	; 1
    2abc:	a2 96       	adiw	r28, 0x22	; 34
    2abe:	ff af       	std	Y+63, r31	; 0x3f
    2ac0:	ee af       	std	Y+62, r30	; 0x3e
    2ac2:	a2 97       	sbiw	r28, 0x22	; 34
    2ac4:	a5 96       	adiw	r28, 0x25	; 37
    2ac6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ac8:	a5 97       	sbiw	r28, 0x25	; 37
    2aca:	f1 50       	subi	r31, 0x01	; 1
    2acc:	a5 96       	adiw	r28, 0x25	; 37
    2ace:	ff af       	std	Y+63, r31	; 0x3f
    2ad0:	a5 97       	sbiw	r28, 0x25	; 37
    2ad2:	a5 96       	adiw	r28, 0x25	; 37
    2ad4:	2f ad       	ldd	r18, Y+63	; 0x3f
    2ad6:	a5 97       	sbiw	r28, 0x25	; 37
    2ad8:	22 23       	and	r18, r18
    2ada:	c1 f6       	brne	.-80     	; 0x2a8c <main+0x1b4>
					,0b00011111
					,0b00011111
					,0b00011111
					,0b00011111
					,0b00011111
	};
    2adc:	ce 01       	movw	r24, r28
    2ade:	c9 96       	adiw	r24, 0x39	; 57
    2ae0:	a7 96       	adiw	r28, 0x27	; 39
    2ae2:	9f af       	std	Y+63, r25	; 0x3f
    2ae4:	8e af       	std	Y+62, r24	; 0x3e
    2ae6:	a7 97       	sbiw	r28, 0x27	; 39
    2ae8:	a0 eb       	ldi	r26, 0xB0	; 176
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	a9 96       	adiw	r28, 0x29	; 41
    2aee:	bf af       	std	Y+63, r27	; 0x3f
    2af0:	ae af       	std	Y+62, r26	; 0x3e
    2af2:	a9 97       	sbiw	r28, 0x29	; 41
    2af4:	b8 e0       	ldi	r27, 0x08	; 8
    2af6:	aa 96       	adiw	r28, 0x2a	; 42
    2af8:	bf af       	std	Y+63, r27	; 0x3f
    2afa:	aa 97       	sbiw	r28, 0x2a	; 42
    2afc:	a9 96       	adiw	r28, 0x29	; 41
    2afe:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b00:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b02:	a9 97       	sbiw	r28, 0x29	; 41
    2b04:	00 80       	ld	r0, Z
    2b06:	a9 96       	adiw	r28, 0x29	; 41
    2b08:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b0c:	a9 97       	sbiw	r28, 0x29	; 41
    2b0e:	01 96       	adiw	r24, 0x01	; 1
    2b10:	a9 96       	adiw	r28, 0x29	; 41
    2b12:	9f af       	std	Y+63, r25	; 0x3f
    2b14:	8e af       	std	Y+62, r24	; 0x3e
    2b16:	a9 97       	sbiw	r28, 0x29	; 41
    2b18:	a7 96       	adiw	r28, 0x27	; 39
    2b1a:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b1c:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b1e:	a7 97       	sbiw	r28, 0x27	; 39
    2b20:	0c 92       	st	X, r0
    2b22:	a7 96       	adiw	r28, 0x27	; 39
    2b24:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b26:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b28:	a7 97       	sbiw	r28, 0x27	; 39
    2b2a:	31 96       	adiw	r30, 0x01	; 1
    2b2c:	a7 96       	adiw	r28, 0x27	; 39
    2b2e:	ff af       	std	Y+63, r31	; 0x3f
    2b30:	ee af       	std	Y+62, r30	; 0x3e
    2b32:	a7 97       	sbiw	r28, 0x27	; 39
    2b34:	aa 96       	adiw	r28, 0x2a	; 42
    2b36:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b38:	aa 97       	sbiw	r28, 0x2a	; 42
    2b3a:	f1 50       	subi	r31, 0x01	; 1
    2b3c:	aa 96       	adiw	r28, 0x2a	; 42
    2b3e:	ff af       	std	Y+63, r31	; 0x3f
    2b40:	aa 97       	sbiw	r28, 0x2a	; 42
    2b42:	aa 96       	adiw	r28, 0x2a	; 42
    2b44:	2f ad       	ldd	r18, Y+63	; 0x3f
    2b46:	aa 97       	sbiw	r28, 0x2a	; 42
    2b48:	22 23       	and	r18, r18
    2b4a:	c1 f6       	brne	.-80     	; 0x2afc <main+0x224>
					,0b00011111
					,0b00011111
					,0b00011111
					,0b00011111
					,0b00011111
	};
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	8f 5b       	subi	r24, 0xBF	; 191
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	ac 96       	adiw	r28, 0x2c	; 44
    2b54:	9f af       	std	Y+63, r25	; 0x3f
    2b56:	8e af       	std	Y+62, r24	; 0x3e
    2b58:	ac 97       	sbiw	r28, 0x2c	; 44
    2b5a:	a8 ea       	ldi	r26, 0xA8	; 168
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	ae 96       	adiw	r28, 0x2e	; 46
    2b60:	bf af       	std	Y+63, r27	; 0x3f
    2b62:	ae af       	std	Y+62, r26	; 0x3e
    2b64:	ae 97       	sbiw	r28, 0x2e	; 46
    2b66:	b8 e0       	ldi	r27, 0x08	; 8
    2b68:	af 96       	adiw	r28, 0x2f	; 47
    2b6a:	bf af       	std	Y+63, r27	; 0x3f
    2b6c:	af 97       	sbiw	r28, 0x2f	; 47
    2b6e:	ae 96       	adiw	r28, 0x2e	; 46
    2b70:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b72:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b74:	ae 97       	sbiw	r28, 0x2e	; 46
    2b76:	00 80       	ld	r0, Z
    2b78:	ae 96       	adiw	r28, 0x2e	; 46
    2b7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b7e:	ae 97       	sbiw	r28, 0x2e	; 46
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	ae 96       	adiw	r28, 0x2e	; 46
    2b84:	9f af       	std	Y+63, r25	; 0x3f
    2b86:	8e af       	std	Y+62, r24	; 0x3e
    2b88:	ae 97       	sbiw	r28, 0x2e	; 46
    2b8a:	ac 96       	adiw	r28, 0x2c	; 44
    2b8c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b8e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b90:	ac 97       	sbiw	r28, 0x2c	; 44
    2b92:	0c 92       	st	X, r0
    2b94:	ac 96       	adiw	r28, 0x2c	; 44
    2b96:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b98:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b9a:	ac 97       	sbiw	r28, 0x2c	; 44
    2b9c:	31 96       	adiw	r30, 0x01	; 1
    2b9e:	ac 96       	adiw	r28, 0x2c	; 44
    2ba0:	ff af       	std	Y+63, r31	; 0x3f
    2ba2:	ee af       	std	Y+62, r30	; 0x3e
    2ba4:	ac 97       	sbiw	r28, 0x2c	; 44
    2ba6:	af 96       	adiw	r28, 0x2f	; 47
    2ba8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2baa:	af 97       	sbiw	r28, 0x2f	; 47
    2bac:	f1 50       	subi	r31, 0x01	; 1
    2bae:	af 96       	adiw	r28, 0x2f	; 47
    2bb0:	ff af       	std	Y+63, r31	; 0x3f
    2bb2:	af 97       	sbiw	r28, 0x2f	; 47
    2bb4:	af 96       	adiw	r28, 0x2f	; 47
    2bb6:	2f ad       	ldd	r18, Y+63	; 0x3f
    2bb8:	af 97       	sbiw	r28, 0x2f	; 47
    2bba:	22 23       	and	r18, r18
    2bbc:	c1 f6       	brne	.-80     	; 0x2b6e <main+0x296>
					,0b00011111
					,0b00011111
					,0b00011111
					,0b00011111
					,0b00011111
	};
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	87 5b       	subi	r24, 0xB7	; 183
    2bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc4:	e1 96       	adiw	r28, 0x31	; 49
    2bc6:	9f af       	std	Y+63, r25	; 0x3f
    2bc8:	8e af       	std	Y+62, r24	; 0x3e
    2bca:	e1 97       	sbiw	r28, 0x31	; 49
    2bcc:	80 ea       	ldi	r24, 0xA0	; 160
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	e3 96       	adiw	r28, 0x33	; 51
    2bd2:	9f af       	std	Y+63, r25	; 0x3f
    2bd4:	8e af       	std	Y+62, r24	; 0x3e
    2bd6:	e3 97       	sbiw	r28, 0x33	; 51
    2bd8:	98 e0       	ldi	r25, 0x08	; 8
    2bda:	e4 96       	adiw	r28, 0x34	; 52
    2bdc:	9f af       	std	Y+63, r25	; 0x3f
    2bde:	e4 97       	sbiw	r28, 0x34	; 52
    2be0:	e3 96       	adiw	r28, 0x33	; 51
    2be2:	ae ad       	ldd	r26, Y+62	; 0x3e
    2be4:	bf ad       	ldd	r27, Y+63	; 0x3f
    2be6:	e3 97       	sbiw	r28, 0x33	; 51
    2be8:	0c 90       	ld	r0, X
    2bea:	e3 96       	adiw	r28, 0x33	; 51
    2bec:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bee:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bf0:	e3 97       	sbiw	r28, 0x33	; 51
    2bf2:	31 96       	adiw	r30, 0x01	; 1
    2bf4:	e3 96       	adiw	r28, 0x33	; 51
    2bf6:	ff af       	std	Y+63, r31	; 0x3f
    2bf8:	ee af       	std	Y+62, r30	; 0x3e
    2bfa:	e3 97       	sbiw	r28, 0x33	; 51
    2bfc:	e1 96       	adiw	r28, 0x31	; 49
    2bfe:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c00:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c02:	e1 97       	sbiw	r28, 0x31	; 49
    2c04:	0c 92       	st	X, r0
    2c06:	e1 96       	adiw	r28, 0x31	; 49
    2c08:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c0a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c0c:	e1 97       	sbiw	r28, 0x31	; 49
    2c0e:	31 96       	adiw	r30, 0x01	; 1
    2c10:	e1 96       	adiw	r28, 0x31	; 49
    2c12:	ff af       	std	Y+63, r31	; 0x3f
    2c14:	ee af       	std	Y+62, r30	; 0x3e
    2c16:	e1 97       	sbiw	r28, 0x31	; 49
    2c18:	e4 96       	adiw	r28, 0x34	; 52
    2c1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c1c:	e4 97       	sbiw	r28, 0x34	; 52
    2c1e:	f1 50       	subi	r31, 0x01	; 1
    2c20:	e4 96       	adiw	r28, 0x34	; 52
    2c22:	ff af       	std	Y+63, r31	; 0x3f
    2c24:	e4 97       	sbiw	r28, 0x34	; 52
    2c26:	e4 96       	adiw	r28, 0x34	; 52
    2c28:	2f ad       	ldd	r18, Y+63	; 0x3f
    2c2a:	e4 97       	sbiw	r28, 0x34	; 52
    2c2c:	22 23       	and	r18, r18
    2c2e:	c1 f6       	brne	.-80     	; 0x2be0 <main+0x308>

    Lcd_vidCreateCustomCharacter(char1,0);
    2c30:	ce 01       	movw	r24, r28
    2c32:	41 96       	adiw	r24, 0x11	; 17
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>
    Lcd_vidCreateCustomCharacter(char2,1);
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	49 96       	adiw	r24, 0x19	; 25
    2c3e:	61 e0       	ldi	r22, 0x01	; 1
    2c40:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>
    Lcd_vidCreateCustomCharacter(char3,2);
    2c44:	ce 01       	movw	r24, r28
    2c46:	81 96       	adiw	r24, 0x21	; 33
    2c48:	62 e0       	ldi	r22, 0x02	; 2
    2c4a:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>
    Lcd_vidCreateCustomCharacter(char4,3);
    2c4e:	ce 01       	movw	r24, r28
    2c50:	89 96       	adiw	r24, 0x29	; 41
    2c52:	63 e0       	ldi	r22, 0x03	; 3
    2c54:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>
    Lcd_vidCreateCustomCharacter(char5,4);
    2c58:	ce 01       	movw	r24, r28
    2c5a:	c1 96       	adiw	r24, 0x31	; 49
    2c5c:	64 e0       	ldi	r22, 0x04	; 4
    2c5e:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>
    Lcd_vidCreateCustomCharacter(char6,5);
    2c62:	ce 01       	movw	r24, r28
    2c64:	c9 96       	adiw	r24, 0x39	; 57
    2c66:	65 e0       	ldi	r22, 0x05	; 5
    2c68:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>
    Lcd_vidCreateCustomCharacter(char7,6);
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	8f 5b       	subi	r24, 0xBF	; 191
    2c70:	9f 4f       	sbci	r25, 0xFF	; 255
    2c72:	66 e0       	ldi	r22, 0x06	; 6
    2c74:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>
    Lcd_vidCreateCustomCharacter(char8,7);
    2c78:	ce 01       	movw	r24, r28
    2c7a:	87 5b       	subi	r24, 0xB7	; 183
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	67 e0       	ldi	r22, 0x07	; 7
    2c80:	0e 94 c0 13 	call	0x2780	; 0x2780 <Lcd_vidCreateCustomCharacter>

	while (1)
	{
		Adc_vidStartConversion();
    2c84:	0e 94 c3 05 	call	0xb86	; 0xb86 <Adc_vidStartConversion>
		u16 Loc_AdcResult = Adc_u16GetResult();
    2c88:	0e 94 d1 05 	call	0xba2	; 0xba2 <Adc_u16GetResult>
    2c8c:	98 8b       	std	Y+16, r25	; 0x10
    2c8e:	8f 87       	std	Y+15, r24	; 0x0f

		if (Loc_AdcResult<128)
    2c90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c92:	98 89       	ldd	r25, Y+16	; 0x10
    2c94:	80 38       	cpi	r24, 0x80	; 128
    2c96:	91 05       	cpc	r25, r1
    2c98:	80 f4       	brcc	.+32     	; 0x2cba <main+0x3e2>
		{

			Lcd_vidGoTo(1,0);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,1);
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	61 e0       	ldi	r22, 0x01	; 1
    2cac:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("       ");
    2cb0:	87 e6       	ldi	r24, 0x67	; 103
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2cb8:	14 c1       	rjmp	.+552    	; 0x2ee2 <main+0x60a>
		}
		else if (Loc_AdcResult>128 && Loc_AdcResult<220)
    2cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cbc:	98 89       	ldd	r25, Y+16	; 0x10
    2cbe:	81 38       	cpi	r24, 0x81	; 129
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	c0 f0       	brcs	.+48     	; 0x2cf4 <main+0x41c>
    2cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc6:	98 89       	ldd	r25, Y+16	; 0x10
    2cc8:	8c 3d       	cpi	r24, 0xDC	; 220
    2cca:	91 05       	cpc	r25, r1
    2ccc:	98 f4       	brcc	.+38     	; 0x2cf4 <main+0x41c>
		{
			Lcd_vidGoTo(1,0);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(1);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,2);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	62 e0       	ldi	r22, 0x02	; 2
    2ce6:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("       ");
    2cea:	87 e6       	ldi	r24, 0x67	; 103
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2cf2:	f7 c0       	rjmp	.+494    	; 0x2ee2 <main+0x60a>
		}

		else if (Loc_AdcResult>220 && Loc_AdcResult<320)
    2cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf6:	98 89       	ldd	r25, Y+16	; 0x10
    2cf8:	8d 3d       	cpi	r24, 0xDD	; 221
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	e0 f0       	brcs	.+56     	; 0x2d36 <main+0x45e>
    2cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d00:	98 89       	ldd	r25, Y+16	; 0x10
    2d02:	a1 e0       	ldi	r26, 0x01	; 1
    2d04:	80 34       	cpi	r24, 0x40	; 64
    2d06:	9a 07       	cpc	r25, r26
    2d08:	b0 f4       	brcc	.+44     	; 0x2d36 <main+0x45e>
		{

			Lcd_vidGoTo(1,0);
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(1);
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(2);
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,3);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	63 e0       	ldi	r22, 0x03	; 3
    2d28:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("            ");
    2d2c:	8f e6       	ldi	r24, 0x6F	; 111
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2d34:	d6 c0       	rjmp	.+428    	; 0x2ee2 <main+0x60a>
		}
		else if (Loc_AdcResult>320 && Loc_AdcResult<420)
    2d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d38:	98 89       	ldd	r25, Y+16	; 0x10
    2d3a:	b1 e0       	ldi	r27, 0x01	; 1
    2d3c:	81 34       	cpi	r24, 0x41	; 65
    2d3e:	9b 07       	cpc	r25, r27
    2d40:	f8 f0       	brcs	.+62     	; 0x2d80 <main+0x4a8>
    2d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d44:	98 89       	ldd	r25, Y+16	; 0x10
    2d46:	e1 e0       	ldi	r30, 0x01	; 1
    2d48:	84 3a       	cpi	r24, 0xA4	; 164
    2d4a:	9e 07       	cpc	r25, r30
    2d4c:	c8 f4       	brcc	.+50     	; 0x2d80 <main+0x4a8>
		{

			Lcd_vidGoTo(1,0);
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	60 e0       	ldi	r22, 0x00	; 0
    2d52:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(1);
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(2);
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(3);
    2d68:	83 e0       	ldi	r24, 0x03	; 3
    2d6a:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,4);
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	64 e0       	ldi	r22, 0x04	; 4
    2d72:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("         ");
    2d76:	8c e7       	ldi	r24, 0x7C	; 124
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2d7e:	b1 c0       	rjmp	.+354    	; 0x2ee2 <main+0x60a>
		}
		else if (Loc_AdcResult>420 && Loc_AdcResult<540)
    2d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d82:	98 89       	ldd	r25, Y+16	; 0x10
    2d84:	f1 e0       	ldi	r31, 0x01	; 1
    2d86:	85 3a       	cpi	r24, 0xA5	; 165
    2d88:	9f 07       	cpc	r25, r31
    2d8a:	10 f1       	brcs	.+68     	; 0x2dd0 <main+0x4f8>
    2d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8e:	98 89       	ldd	r25, Y+16	; 0x10
    2d90:	22 e0       	ldi	r18, 0x02	; 2
    2d92:	8c 31       	cpi	r24, 0x1C	; 28
    2d94:	92 07       	cpc	r25, r18
    2d96:	e0 f4       	brcc	.+56     	; 0x2dd0 <main+0x4f8>
		{

			Lcd_vidGoTo(1,0);
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(1);
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(2);
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(3);
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(4);
    2db8:	84 e0       	ldi	r24, 0x04	; 4
    2dba:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,5);
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	65 e0       	ldi	r22, 0x05	; 5
    2dc2:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("           ");
    2dc6:	86 e8       	ldi	r24, 0x86	; 134
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2dce:	89 c0       	rjmp	.+274    	; 0x2ee2 <main+0x60a>
		}
		else if (Loc_AdcResult>540 && Loc_AdcResult<640)
    2dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd2:	98 89       	ldd	r25, Y+16	; 0x10
    2dd4:	a2 e0       	ldi	r26, 0x02	; 2
    2dd6:	8d 31       	cpi	r24, 0x1D	; 29
    2dd8:	9a 07       	cpc	r25, r26
    2dda:	28 f1       	brcs	.+74     	; 0x2e26 <main+0x54e>
    2ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dde:	98 89       	ldd	r25, Y+16	; 0x10
    2de0:	b2 e0       	ldi	r27, 0x02	; 2
    2de2:	80 38       	cpi	r24, 0x80	; 128
    2de4:	9b 07       	cpc	r25, r27
    2de6:	f8 f4       	brcc	.+62     	; 0x2e26 <main+0x54e>
		{
			Lcd_vidGoTo(1,0);
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(1);
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(2);
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(3);
    2e02:	83 e0       	ldi	r24, 0x03	; 3
    2e04:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(4);
    2e08:	84 e0       	ldi	r24, 0x04	; 4
    2e0a:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(5);
    2e0e:	85 e0       	ldi	r24, 0x05	; 5
    2e10:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,6);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	66 e0       	ldi	r22, 0x06	; 6
    2e18:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("         ");
    2e1c:	8c e7       	ldi	r24, 0x7C	; 124
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2e24:	5e c0       	rjmp	.+188    	; 0x2ee2 <main+0x60a>
		}
		else if (Loc_AdcResult>640 &&Loc_AdcResult<740)
    2e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e28:	98 89       	ldd	r25, Y+16	; 0x10
    2e2a:	e2 e0       	ldi	r30, 0x02	; 2
    2e2c:	81 38       	cpi	r24, 0x81	; 129
    2e2e:	9e 07       	cpc	r25, r30
    2e30:	40 f1       	brcs	.+80     	; 0x2e82 <main+0x5aa>
    2e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e34:	98 89       	ldd	r25, Y+16	; 0x10
    2e36:	f2 e0       	ldi	r31, 0x02	; 2
    2e38:	84 3e       	cpi	r24, 0xE4	; 228
    2e3a:	9f 07       	cpc	r25, r31
    2e3c:	10 f5       	brcc	.+68     	; 0x2e82 <main+0x5aa>
		{
			Lcd_vidGoTo(1,0);
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(1);
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(2);
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(3);
    2e58:	83 e0       	ldi	r24, 0x03	; 3
    2e5a:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(4);
    2e5e:	84 e0       	ldi	r24, 0x04	; 4
    2e60:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(5);
    2e64:	85 e0       	ldi	r24, 0x05	; 5
    2e66:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(6);
    2e6a:	86 e0       	ldi	r24, 0x06	; 6
    2e6c:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,7);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	67 e0       	ldi	r22, 0x07	; 7
    2e74:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("       ");
    2e78:	87 e6       	ldi	r24, 0x67	; 103
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2e80:	30 c0       	rjmp	.+96     	; 0x2ee2 <main+0x60a>
		}
		else if (Loc_AdcResult>740 &&Loc_AdcResult<850)
    2e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e84:	98 89       	ldd	r25, Y+16	; 0x10
    2e86:	22 e0       	ldi	r18, 0x02	; 2
    2e88:	85 3e       	cpi	r24, 0xE5	; 229
    2e8a:	92 07       	cpc	r25, r18
    2e8c:	50 f1       	brcs	.+84     	; 0x2ee2 <main+0x60a>
    2e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e90:	98 89       	ldd	r25, Y+16	; 0x10
    2e92:	a3 e0       	ldi	r26, 0x03	; 3
    2e94:	82 35       	cpi	r24, 0x52	; 82
    2e96:	9a 07       	cpc	r25, r26
    2e98:	20 f5       	brcc	.+72     	; 0x2ee2 <main+0x60a>
		{

			Lcd_vidGoTo(1,0);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(0);
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(1);
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(2);
    2eae:	82 e0       	ldi	r24, 0x02	; 2
    2eb0:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(3);
    2eb4:	83 e0       	ldi	r24, 0x03	; 3
    2eb6:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(4);
    2eba:	84 e0       	ldi	r24, 0x04	; 4
    2ebc:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(5);
    2ec0:	85 e0       	ldi	r24, 0x05	; 5
    2ec2:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(6);
    2ec6:	86 e0       	ldi	r24, 0x06	; 6
    2ec8:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(7);
    2ecc:	87 e0       	ldi	r24, 0x07	; 7
    2ece:	0e 94 35 11 	call	0x226a	; 0x226a <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,8);
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	68 e0       	ldi	r22, 0x08	; 8
    2ed6:	0e 94 b6 12 	call	0x256c	; 0x256c <Lcd_vidGoTo>
			Lcd_vidDiaplayString("     ");
    2eda:	82 e9       	ldi	r24, 0x92	; 146
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Lcd_vidDiaplayString>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a8 ec       	ldi	r26, 0xC8	; 200
    2ee8:	b2 e4       	ldi	r27, 0x42	; 66
    2eea:	8b 87       	std	Y+11, r24	; 0x0b
    2eec:	9c 87       	std	Y+12, r25	; 0x0c
    2eee:	ad 87       	std	Y+13, r26	; 0x0d
    2ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a e7       	ldi	r20, 0x7A	; 122
    2f00:	53 e4       	ldi	r21, 0x43	; 67
    2f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8f 83       	std	Y+7, r24	; 0x07
    2f0c:	98 87       	std	Y+8, r25	; 0x08
    2f0e:	a9 87       	std	Y+9, r26	; 0x09
    2f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f12:	6f 81       	ldd	r22, Y+7	; 0x07
    2f14:	78 85       	ldd	r23, Y+8	; 0x08
    2f16:	89 85       	ldd	r24, Y+9	; 0x09
    2f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e8       	ldi	r20, 0x80	; 128
    2f20:	5f e3       	ldi	r21, 0x3F	; 63
    2f22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f26:	88 23       	and	r24, r24
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <main+0x65c>
		__ticks = 1;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	3f c0       	rjmp	.+126    	; 0x2fb2 <main+0x6da>
	else if (__tmp > 65535)
    2f34:	6f 81       	ldd	r22, Y+7	; 0x07
    2f36:	78 85       	ldd	r23, Y+8	; 0x08
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	4c f5       	brge	.+82     	; 0x2f9e <main+0x6c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e2       	ldi	r20, 0x20	; 32
    2f5a:	51 e4       	ldi	r21, 0x41	; 65
    2f5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	0f c0       	rjmp	.+30     	; 0x2f94 <main+0x6bc>
    2f76:	89 e1       	ldi	r24, 0x19	; 25
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9c 83       	std	Y+4, r25	; 0x04
    2f7c:	8b 83       	std	Y+3, r24	; 0x03
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <main+0x6aa>
    2f86:	9c 83       	std	Y+4, r25	; 0x04
    2f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <main+0x69e>
    2f9c:	73 ce       	rjmp	.-794    	; 0x2c84 <main+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <main+0x6e6>
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	5e ce       	rjmp	.-836    	; 0x2c84 <main+0x3ac>

00002fc8 <__prologue_saves__>:
    2fc8:	2f 92       	push	r2
    2fca:	3f 92       	push	r3
    2fcc:	4f 92       	push	r4
    2fce:	5f 92       	push	r5
    2fd0:	6f 92       	push	r6
    2fd2:	7f 92       	push	r7
    2fd4:	8f 92       	push	r8
    2fd6:	9f 92       	push	r9
    2fd8:	af 92       	push	r10
    2fda:	bf 92       	push	r11
    2fdc:	cf 92       	push	r12
    2fde:	df 92       	push	r13
    2fe0:	ef 92       	push	r14
    2fe2:	ff 92       	push	r15
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	ca 1b       	sub	r28, r26
    2ff2:	db 0b       	sbc	r29, r27
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	09 94       	ijmp

00003000 <__epilogue_restores__>:
    3000:	2a 88       	ldd	r2, Y+18	; 0x12
    3002:	39 88       	ldd	r3, Y+17	; 0x11
    3004:	48 88       	ldd	r4, Y+16	; 0x10
    3006:	5f 84       	ldd	r5, Y+15	; 0x0f
    3008:	6e 84       	ldd	r6, Y+14	; 0x0e
    300a:	7d 84       	ldd	r7, Y+13	; 0x0d
    300c:	8c 84       	ldd	r8, Y+12	; 0x0c
    300e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3010:	aa 84       	ldd	r10, Y+10	; 0x0a
    3012:	b9 84       	ldd	r11, Y+9	; 0x09
    3014:	c8 84       	ldd	r12, Y+8	; 0x08
    3016:	df 80       	ldd	r13, Y+7	; 0x07
    3018:	ee 80       	ldd	r14, Y+6	; 0x06
    301a:	fd 80       	ldd	r15, Y+5	; 0x05
    301c:	0c 81       	ldd	r16, Y+4	; 0x04
    301e:	1b 81       	ldd	r17, Y+3	; 0x03
    3020:	aa 81       	ldd	r26, Y+2	; 0x02
    3022:	b9 81       	ldd	r27, Y+1	; 0x01
    3024:	ce 0f       	add	r28, r30
    3026:	d1 1d       	adc	r29, r1
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	ed 01       	movw	r28, r26
    3034:	08 95       	ret

00003036 <_exit>:
    3036:	f8 94       	cli

00003038 <__stop_program>:
    3038:	ff cf       	rjmp	.-2      	; 0x3038 <__stop_program>

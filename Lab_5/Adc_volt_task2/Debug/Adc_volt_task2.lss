
Adc_volt_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00002df4  00002e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000028bc  00000000  00000000  00002f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000015e6  00000000  00000000  0000583c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00006fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00007175  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00009184  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  0000a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000b2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000b498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000b759  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c007  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6d 15 	call	0x2ada	; 0x2ada <main>
      7a:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	eb 58       	subi	r30, 0x8B	; 139
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <Adc_vidInit>:
 * Return: it has no returns.
 **/
static void Adc_vidClearInterruptFlag(void);

void Adc_vidInit(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (ADC_u8CH_0|ADC_u8RIGHT_ADJUSTMENT|ADC_u8AVCC);
     cd0:	e7 e2       	ldi	r30, 0x27	; 39
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 e4       	ldi	r24, 0x40	; 64
     cd6:	80 83       	st	Z, r24
	ADCSRA = (ADC_u8INIT_CONTROL|ADC_u8CONVERSION_CONTROL|ADCSRA_AUTO_TRIG_DISABLE|ADC_u8DIVISION_FACTOR_8|ADC_u8ENABLE_INTERRUPT);
     cd8:	e6 e2       	ldi	r30, 0x26	; 38
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8b e0       	ldi	r24, 0x0B	; 11
     cde:	80 83       	st	Z, r24
	SFIOR &=ADC_u8AUTO_TRIGGER_SOURCE ;// I make the macro ones to the bits that I don't need to change its state
     ce0:	e0 e5       	ldi	r30, 0x50	; 80
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	e0 e5       	ldi	r30, 0x50	; 80
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	10 82       	st	Z, r1
									  // so I use &
}
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <Adc_vidControl>:

void Adc_vidControl(u8 copy_control)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	89 83       	std	Y+1, r24	; 0x01
#if ADC_u8CONTROL == ADC_u8ENABLE
	SET_BIT(ADCSRA,7);
     d00:	a6 e2       	ldi	r26, 0x26	; 38
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e6 e2       	ldi	r30, 0x26	; 38
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 68       	ori	r24, 0x80	; 128
     d0c:	8c 93       	st	X, r24
#elif ADC_u8CONTROL == ADC_u8DISABLE
	CLR_BIT(ADCSRA,7);

#endif
}
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <Adc_vidStartConversion>:

void Adc_vidStartConversion(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADC_u8START_CONVERSION);
     d1e:	a6 e2       	ldi	r26, 0x26	; 38
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e6 e2       	ldi	r30, 0x26	; 38
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	8c 93       	st	X, r24
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <Adc_u16GetResult>:

u16 Adc_u16GetResult(void)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <Adc_u16GetResult+0x6>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	while(Adc_u8GetInterruptFlagValue()==0);
     d3c:	0e 94 bb 06 	call	0xd76	; 0xd76 <Adc_u8GetInterruptFlagValue>
     d40:	88 23       	and	r24, r24
     d42:	e1 f3       	breq	.-8      	; 0xd3c <Adc_u16GetResult+0xa>
	Adc_vidClearInterruptFlag();
     d44:	0e 94 c8 06 	call	0xd90	; 0xd90 <Adc_vidClearInterruptFlag>
	u16 Loc_RegValue = (ADCL | (ADCH <<8)) ;
     d48:	e4 e2       	ldi	r30, 0x24	; 36
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	e5 e2       	ldi	r30, 0x25	; 37
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	98 2f       	mov	r25, r24
     d5e:	88 27       	eor	r24, r24
     d60:	82 2b       	or	r24, r18
     d62:	93 2b       	or	r25, r19
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
	return Loc_RegValue;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <Adc_u8GetInterruptFlagValue>:

u8 Adc_u8GetInterruptFlagValue(void)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(ADCSRA,4);
     d7e:	e6 e2       	ldi	r30, 0x26	; 38
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	82 95       	swap	r24
     d86:	8f 70       	andi	r24, 0x0F	; 15
     d88:	81 70       	andi	r24, 0x01	; 1
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <Adc_vidClearInterruptFlag>:

static void Adc_vidClearInterruptFlag(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,4);
     d98:	a6 e2       	ldi	r26, 0x26	; 38
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e6 e2       	ldi	r30, 0x26	; 38
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 61       	ori	r24, 0x10	; 16
     da4:	8c 93       	st	X, r24
}
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <Dio_enuWriteChannelId>:
  Write on pin
  take two args Copy_u8ChannedId and Copy_u8Level
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuWriteChannelId(u8 Copy_u8ChannedId,u8 Copy_u8Level)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	27 97       	sbiw	r28, 0x07	; 7
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	8c 83       	std	Y+4, r24	; 0x04
     dc2:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port = Copy_u8ChannedId/8 ;
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	86 95       	lsr	r24
     dcc:	86 95       	lsr	r24
     dce:	86 95       	lsr	r24
     dd0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Pin = (Copy_u8ChannedId%8) ;
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	87 70       	andi	r24, 0x07	; 7
     dd6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8ChannedId<=32)
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	81 32       	cpi	r24, 0x21	; 33
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <Dio_enuWriteChannelId+0x34>
     dde:	e1 c0       	rjmp	.+450    	; 0xfa2 <Dio_enuWriteChannelId+0x1f6>
	{
		switch (Loc_u8Port)
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	3f 83       	std	Y+7, r19	; 0x07
     de8:	2e 83       	std	Y+6, r18	; 0x06
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <Dio_enuWriteChannelId+0x4a>
     df4:	47 c0       	rjmp	.+142    	; 0xe84 <Dio_enuWriteChannelId+0xd8>
     df6:	2e 81       	ldd	r18, Y+6	; 0x06
     df8:	3f 81       	ldd	r19, Y+7	; 0x07
     dfa:	22 30       	cpi	r18, 0x02	; 2
     dfc:	31 05       	cpc	r19, r1
     dfe:	2c f4       	brge	.+10     	; 0xe0a <Dio_enuWriteChannelId+0x5e>
     e00:	8e 81       	ldd	r24, Y+6	; 0x06
     e02:	9f 81       	ldd	r25, Y+7	; 0x07
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	71 f0       	breq	.+28     	; 0xe24 <Dio_enuWriteChannelId+0x78>
     e08:	ce c0       	rjmp	.+412    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
     e0a:	2e 81       	ldd	r18, Y+6	; 0x06
     e0c:	3f 81       	ldd	r19, Y+7	; 0x07
     e0e:	22 30       	cpi	r18, 0x02	; 2
     e10:	31 05       	cpc	r19, r1
     e12:	09 f4       	brne	.+2      	; 0xe16 <Dio_enuWriteChannelId+0x6a>
     e14:	67 c0       	rjmp	.+206    	; 0xee4 <Dio_enuWriteChannelId+0x138>
     e16:	8e 81       	ldd	r24, Y+6	; 0x06
     e18:	9f 81       	ldd	r25, Y+7	; 0x07
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <Dio_enuWriteChannelId+0x76>
     e20:	91 c0       	rjmp	.+290    	; 0xf44 <Dio_enuWriteChannelId+0x198>
     e22:	c1 c0       	rjmp	.+386    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
		{
		case PORT_A:

			if(Copy_u8Level==DIO_u8HIGH)
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <Dio_enuWriteChannelId+0xa6>
			{
				SET_BIT(PORTA,Loc_u8Pin);
     e2a:	ab e3       	ldi	r26, 0x3B	; 59
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	eb e3       	ldi	r30, 0x3B	; 59
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <Dio_enuWriteChannelId+0x9c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <Dio_enuWriteChannelId+0x98>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	aa c0       	rjmp	.+340    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	88 23       	and	r24, r24
     e56:	09 f0       	breq	.+2      	; 0xe5a <Dio_enuWriteChannelId+0xae>
     e58:	a6 c0       	rjmp	.+332    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTA,Loc_u8Pin);
     e5a:	ab e3       	ldi	r26, 0x3B	; 59
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	eb e3       	ldi	r30, 0x3B	; 59
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <Dio_enuWriteChannelId+0xcc>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <Dio_enuWriteChannelId+0xc8>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	91 c0       	rjmp	.+290    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			}

			break;
		case PORT_B:
			if(Copy_u8Level==DIO_u8HIGH)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	a1 f4       	brne	.+40     	; 0xeb2 <Dio_enuWriteChannelId+0x106>
			{
				SET_BIT(PORTB,Loc_u8Pin);
     e8a:	a8 e3       	ldi	r26, 0x38	; 56
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e8 e3       	ldi	r30, 0x38	; 56
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <Dio_enuWriteChannelId+0xfc>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <Dio_enuWriteChannelId+0xf8>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	7a c0       	rjmp	.+244    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	88 23       	and	r24, r24
     eb6:	09 f0       	breq	.+2      	; 0xeba <Dio_enuWriteChannelId+0x10e>
     eb8:	76 c0       	rjmp	.+236    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTB,Loc_u8Pin);
     eba:	a8 e3       	ldi	r26, 0x38	; 56
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e8 e3       	ldi	r30, 0x38	; 56
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <Dio_enuWriteChannelId+0x12c>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <Dio_enuWriteChannelId+0x128>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	61 c0       	rjmp	.+194    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_C:
			if(Copy_u8Level==DIO_u8HIGH)
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	a1 f4       	brne	.+40     	; 0xf12 <Dio_enuWriteChannelId+0x166>
			{
				SET_BIT(PORTC,Loc_u8Pin);
     eea:	a5 e3       	ldi	r26, 0x35	; 53
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e3       	ldi	r30, 0x35	; 53
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <Dio_enuWriteChannelId+0x15c>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <Dio_enuWriteChannelId+0x158>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	4a c0       	rjmp	.+148    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	88 23       	and	r24, r24
     f16:	09 f0       	breq	.+2      	; 0xf1a <Dio_enuWriteChannelId+0x16e>
     f18:	46 c0       	rjmp	.+140    	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTC,Loc_u8Pin);
     f1a:	a5 e3       	ldi	r26, 0x35	; 53
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e5 e3       	ldi	r30, 0x35	; 53
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <Dio_enuWriteChannelId+0x18c>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <Dio_enuWriteChannelId+0x188>
     f3c:	80 95       	com	r24
     f3e:	84 23       	and	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	31 c0       	rjmp	.+98     	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_D:
			if(Copy_u8Level==DIO_u8HIGH)
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	a1 f4       	brne	.+40     	; 0xf72 <Dio_enuWriteChannelId+0x1c6>
			{
				SET_BIT(PORTD,Loc_u8Pin);
     f4a:	a2 e3       	ldi	r26, 0x32	; 50
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e2 e3       	ldi	r30, 0x32	; 50
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <Dio_enuWriteChannelId+0x1bc>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <Dio_enuWriteChannelId+0x1b8>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	1a c0       	rjmp	.+52     	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	88 23       	and	r24, r24
     f76:	b9 f4       	brne	.+46     	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTD,Loc_u8Pin);
     f78:	a2 e3       	ldi	r26, 0x32	; 50
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 e3       	ldi	r30, 0x32	; 50
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <Dio_enuWriteChannelId+0x1ea>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <Dio_enuWriteChannelId+0x1e6>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <Dio_enuWriteChannelId+0x1fa>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =  Dio_enuPortError ;
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	8b 83       	std	Y+3, r24	; 0x03

	}
	return Loc_enuReturnStatus;
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03

}
     fa8:	27 96       	adiw	r28, 0x07	; 7
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <Dio_enuReadChannelId>:
  Read from pin
  take two args Copy_u8ChannedId and Add_pu8ChannelLevel
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadChannelId(u8 Copy_u8ChannedId, pu8 Add_pu8ChannelLevel)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	28 97       	sbiw	r28, 0x08	; 8
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	8c 83       	std	Y+4, r24	; 0x04
     fd0:	7e 83       	std	Y+6, r23	; 0x06
     fd2:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	81 32       	cpi	r24, 0x21	; 33
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <Dio_enuReadChannelId+0x26>
     fde:	79 c0       	rjmp	.+242    	; 0x10d2 <Dio_enuReadChannelId+0x118>
	{
		u8 Loc_u8Port = (Copy_u8ChannedId/8) ;
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	86 95       	lsr	r24
     fe4:	86 95       	lsr	r24
     fe6:	86 95       	lsr	r24
     fe8:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = (Copy_u8ChannedId%8)  ;
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	87 70       	andi	r24, 0x07	; 7
     fee:	89 83       	std	Y+1, r24	; 0x01

		switch (Loc_u8Port)
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	38 87       	std	Y+8, r19	; 0x08
     ff8:	2f 83       	std	Y+7, r18	; 0x07
     ffa:	4f 81       	ldd	r20, Y+7	; 0x07
     ffc:	58 85       	ldd	r21, Y+8	; 0x08
     ffe:	41 30       	cpi	r20, 0x01	; 1
    1000:	51 05       	cpc	r21, r1
    1002:	59 f1       	breq	.+86     	; 0x105a <Dio_enuReadChannelId+0xa0>
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	91 05       	cpc	r25, r1
    100c:	34 f4       	brge	.+12     	; 0x101a <Dio_enuReadChannelId+0x60>
    100e:	2f 81       	ldd	r18, Y+7	; 0x07
    1010:	38 85       	ldd	r19, Y+8	; 0x08
    1012:	21 15       	cp	r18, r1
    1014:	31 05       	cpc	r19, r1
    1016:	69 f0       	breq	.+26     	; 0x1032 <Dio_enuReadChannelId+0x78>
    1018:	5e c0       	rjmp	.+188    	; 0x10d6 <Dio_enuReadChannelId+0x11c>
    101a:	4f 81       	ldd	r20, Y+7	; 0x07
    101c:	58 85       	ldd	r21, Y+8	; 0x08
    101e:	42 30       	cpi	r20, 0x02	; 2
    1020:	51 05       	cpc	r21, r1
    1022:	79 f1       	breq	.+94     	; 0x1082 <Dio_enuReadChannelId+0xc8>
    1024:	8f 81       	ldd	r24, Y+7	; 0x07
    1026:	98 85       	ldd	r25, Y+8	; 0x08
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <Dio_enuReadChannelId+0x76>
    102e:	3d c0       	rjmp	.+122    	; 0x10aa <Dio_enuReadChannelId+0xf0>
    1030:	52 c0       	rjmp	.+164    	; 0x10d6 <Dio_enuReadChannelId+0x11c>
		{
		case PORT_A:
			*Add_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
    1032:	e9 e3       	ldi	r30, 0x39	; 57
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a9 01       	movw	r20, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <Dio_enuReadChannelId+0x90>
    1046:	55 95       	asr	r21
    1048:	47 95       	ror	r20
    104a:	8a 95       	dec	r24
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <Dio_enuReadChannelId+0x8c>
    104e:	ca 01       	movw	r24, r20
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	ed 81       	ldd	r30, Y+5	; 0x05
    1054:	fe 81       	ldd	r31, Y+6	; 0x06
    1056:	80 83       	st	Z, r24
    1058:	3e c0       	rjmp	.+124    	; 0x10d6 <Dio_enuReadChannelId+0x11c>
			break;
		case PORT_B:
			*Add_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
    105a:	e6 e3       	ldi	r30, 0x36	; 54
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a9 01       	movw	r20, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <Dio_enuReadChannelId+0xb8>
    106e:	55 95       	asr	r21
    1070:	47 95       	ror	r20
    1072:	8a 95       	dec	r24
    1074:	e2 f7       	brpl	.-8      	; 0x106e <Dio_enuReadChannelId+0xb4>
    1076:	ca 01       	movw	r24, r20
    1078:	81 70       	andi	r24, 0x01	; 1
    107a:	ed 81       	ldd	r30, Y+5	; 0x05
    107c:	fe 81       	ldd	r31, Y+6	; 0x06
    107e:	80 83       	st	Z, r24
    1080:	2a c0       	rjmp	.+84     	; 0x10d6 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_C:
			*Add_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
    1082:	e3 e3       	ldi	r30, 0x33	; 51
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a9 01       	movw	r20, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <Dio_enuReadChannelId+0xe0>
    1096:	55 95       	asr	r21
    1098:	47 95       	ror	r20
    109a:	8a 95       	dec	r24
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <Dio_enuReadChannelId+0xdc>
    109e:	ca 01       	movw	r24, r20
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	ed 81       	ldd	r30, Y+5	; 0x05
    10a4:	fe 81       	ldd	r31, Y+6	; 0x06
    10a6:	80 83       	st	Z, r24
    10a8:	16 c0       	rjmp	.+44     	; 0x10d6 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_D:
			*Add_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
    10aa:	e0 e3       	ldi	r30, 0x30	; 48
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <Dio_enuReadChannelId+0x108>
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <Dio_enuReadChannelId+0x104>
    10c6:	ca 01       	movw	r24, r20
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	ed 81       	ldd	r30, Y+5	; 0x05
    10cc:	fe 81       	ldd	r31, Y+6	; 0x06
    10ce:	80 83       	st	Z, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Dio_enuReadChannelId+0x11c>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    10d8:	28 96       	adiw	r28, 0x08	; 8
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <Dio_enuWritePort>:
  take two args Copy_u8PortID and Copy_u8Level
  return Dio_tenuErrorStatus
 */

Dio_tenuErrorStatus Dio_enuWritePort(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <Dio_enuWritePort+0x6>
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <Dio_enuWritePort+0x8>
    10f2:	0f 92       	push	r0
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	8a 83       	std	Y+2, r24	; 0x02
    10fa:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID<=PORT_SIZE)
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	85 30       	cpi	r24, 0x05	; 5
    1104:	98 f5       	brcc	.+102    	; 0x116c <Dio_enuWritePort+0x82>
	{
		switch (Copy_u8PortID)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3d 83       	std	Y+5, r19	; 0x05
    110e:	2c 83       	std	Y+4, r18	; 0x04
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	d1 f0       	breq	.+52     	; 0x114e <Dio_enuWritePort+0x64>
    111a:	2c 81       	ldd	r18, Y+4	; 0x04
    111c:	3d 81       	ldd	r19, Y+5	; 0x05
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	2c f4       	brge	.+10     	; 0x112e <Dio_enuWritePort+0x44>
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	61 f0       	breq	.+24     	; 0x1144 <Dio_enuWritePort+0x5a>
    112c:	21 c0       	rjmp	.+66     	; 0x1170 <Dio_enuWritePort+0x86>
    112e:	2c 81       	ldd	r18, Y+4	; 0x04
    1130:	3d 81       	ldd	r19, Y+5	; 0x05
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	81 f0       	breq	.+32     	; 0x1158 <Dio_enuWritePort+0x6e>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	91 05       	cpc	r25, r1
    1140:	81 f0       	breq	.+32     	; 0x1162 <Dio_enuWritePort+0x78>
    1142:	16 c0       	rjmp	.+44     	; 0x1170 <Dio_enuWritePort+0x86>
		{
		case PORT_A:
			ASSIGN_REG(PORTA,Copy_u8Value);
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	80 83       	st	Z, r24
    114c:	11 c0       	rjmp	.+34     	; 0x1170 <Dio_enuWritePort+0x86>
			break;
		case PORT_B:
			ASSIGN_REG(PORTB,Copy_u8Value);
    114e:	e8 e3       	ldi	r30, 0x38	; 56
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	80 83       	st	Z, r24
    1156:	0c c0       	rjmp	.+24     	; 0x1170 <Dio_enuWritePort+0x86>
			break ;
		case PORT_C:
			ASSIGN_REG(PORTC,Copy_u8Value);
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	80 83       	st	Z, r24
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <Dio_enuWritePort+0x86>
			break ;
		case PORT_D:
			ASSIGN_REG(PORTD,Copy_u8Value);
    1162:	e2 e3       	ldi	r30, 0x32	; 50
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	80 83       	st	Z, r24
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <Dio_enuWritePort+0x86>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPortError;
    116c:	83 e0       	ldi	r24, 0x03	; 3
    116e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <Dio_enuReadPort>:
  Read from port
  take two args Copy_u8PortID and Add_pu8PortValue
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadPort(u8 Copy_u8PortId, pu8 Add_pu8PortValue)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <Dio_enuReadPort+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <Dio_enuReadPort+0x8>
    118a:	00 d0       	rcall	.+0      	; 0x118c <Dio_enuReadPort+0xa>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	7c 83       	std	Y+4, r23	; 0x04
    1194:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<=PORT_SIZE)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	85 30       	cpi	r24, 0x05	; 5
    119e:	d8 f5       	brcc	.+118    	; 0x1216 <Dio_enuReadPort+0x94>
	{

		switch (Copy_u8PortId)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3e 83       	std	Y+6, r19	; 0x06
    11a8:	2d 83       	std	Y+5, r18	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	e1 f0       	breq	.+56     	; 0x11ec <Dio_enuReadPort+0x6a>
    11b4:	2d 81       	ldd	r18, Y+5	; 0x05
    11b6:	3e 81       	ldd	r19, Y+6	; 0x06
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <Dio_enuReadPort+0x46>
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <Dio_enuReadPort+0x5c>
    11c6:	29 c0       	rjmp	.+82     	; 0x121a <Dio_enuReadPort+0x98>
    11c8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ca:	3e 81       	ldd	r19, Y+6	; 0x06
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	a1 f0       	breq	.+40     	; 0x11fa <Dio_enuReadPort+0x78>
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	b1 f0       	breq	.+44     	; 0x1208 <Dio_enuReadPort+0x86>
    11dc:	1e c0       	rjmp	.+60     	; 0x121a <Dio_enuReadPort+0x98>
		{
		case PORT_A:
			*Add_pu8PortValue = PORTA;
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	eb 81       	ldd	r30, Y+3	; 0x03
    11e6:	fc 81       	ldd	r31, Y+4	; 0x04
    11e8:	80 83       	st	Z, r24
    11ea:	17 c0       	rjmp	.+46     	; 0x121a <Dio_enuReadPort+0x98>
			break;
		case PORT_B:
			*Add_pu8PortValue = PORTB;
    11ec:	e8 e3       	ldi	r30, 0x38	; 56
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	eb 81       	ldd	r30, Y+3	; 0x03
    11f4:	fc 81       	ldd	r31, Y+4	; 0x04
    11f6:	80 83       	st	Z, r24
    11f8:	10 c0       	rjmp	.+32     	; 0x121a <Dio_enuReadPort+0x98>
			break ;
		case PORT_C:
			*Add_pu8PortValue = PORTC;
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	eb 81       	ldd	r30, Y+3	; 0x03
    1202:	fc 81       	ldd	r31, Y+4	; 0x04
    1204:	80 83       	st	Z, r24
    1206:	09 c0       	rjmp	.+18     	; 0x121a <Dio_enuReadPort+0x98>
			break ;
		case PORT_D:
			*Add_pu8PortValue =PORTD;
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	eb 81       	ldd	r30, Y+3	; 0x03
    1210:	fc 81       	ldd	r31, Y+4	; 0x04
    1212:	80 83       	st	Z, r24
    1214:	02 c0       	rjmp	.+4      	; 0x121a <Dio_enuReadPort+0x98>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
    121a:	89 81       	ldd	r24, Y+1	; 0x01

}
    121c:	26 96       	adiw	r28, 0x06	; 6
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <Dio_enuFlipChannel>:
  Toggle Pin
  take one arg Copy_u8ChannedId
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannedId)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <Dio_enuFlipChannel+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <Dio_enuFlipChannel+0x8>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <Dio_enuFlipChannel+0xa>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	81 32       	cpi	r24, 0x21	; 33
    1246:	08 f0       	brcs	.+2      	; 0x124a <Dio_enuFlipChannel+0x1c>
    1248:	77 c0       	rjmp	.+238    	; 0x1338 <Dio_enuFlipChannel+0x10a>
	{
		u8 Loc_u8Port= Copy_u8ChannedId/8 ;
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	86 95       	lsr	r24
    124e:	86 95       	lsr	r24
    1250:	86 95       	lsr	r24
    1252:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = Copy_u8ChannedId%8 ;
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	87 70       	andi	r24, 0x07	; 7
    1258:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8Port)
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3e 83       	std	Y+6, r19	; 0x06
    1262:	2d 83       	std	Y+5, r18	; 0x05
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	49 f1       	breq	.+82     	; 0x12c0 <Dio_enuFlipChannel+0x92>
    126e:	2d 81       	ldd	r18, Y+5	; 0x05
    1270:	3e 81       	ldd	r19, Y+6	; 0x06
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <Dio_enuFlipChannel+0x54>
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	61 f0       	breq	.+24     	; 0x1298 <Dio_enuFlipChannel+0x6a>
    1280:	5d c0       	rjmp	.+186    	; 0x133c <Dio_enuFlipChannel+0x10e>
    1282:	2d 81       	ldd	r18, Y+5	; 0x05
    1284:	3e 81       	ldd	r19, Y+6	; 0x06
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	71 f1       	breq	.+92     	; 0x12e8 <Dio_enuFlipChannel+0xba>
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	e9 f1       	breq	.+122    	; 0x1310 <Dio_enuFlipChannel+0xe2>
    1296:	52 c0       	rjmp	.+164    	; 0x133c <Dio_enuFlipChannel+0x10e>
		{
		case PORT_A:
			TGL_BIT(PORTA,Loc_u8Pin);
    1298:	ab e3       	ldi	r26, 0x3B	; 59
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <Dio_enuFlipChannel+0x88>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <Dio_enuFlipChannel+0x84>
    12ba:	84 27       	eor	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	3e c0       	rjmp	.+124    	; 0x133c <Dio_enuFlipChannel+0x10e>
			break;
		case PORT_B:
			TGL_BIT(PORTA,Loc_u8Pin);
    12c0:	ab e3       	ldi	r26, 0x3B	; 59
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <Dio_enuFlipChannel+0xb0>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <Dio_enuFlipChannel+0xac>
    12e2:	84 27       	eor	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	2a c0       	rjmp	.+84     	; 0x133c <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_C:
			TGL_BIT(PORTA,Loc_u8Pin);
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <Dio_enuFlipChannel+0xd8>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <Dio_enuFlipChannel+0xd4>
    130a:	84 27       	eor	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	16 c0       	rjmp	.+44     	; 0x133c <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_D:
			TGL_BIT(PORTA,Loc_u8Pin);
    1310:	ab e3       	ldi	r26, 0x3B	; 59
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	eb e3       	ldi	r30, 0x3B	; 59
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <Dio_enuFlipChannel+0x100>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <Dio_enuFlipChannel+0xfc>
    1332:	84 27       	eor	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	02 c0       	rjmp	.+4      	; 0x133c <Dio_enuFlipChannel+0x10e>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
    133c:	8b 81       	ldd	r24, Y+3	; 0x03

}
    133e:	26 96       	adiw	r28, 0x06	; 6
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <Port_enuSetPinDir>:
#include "Port_cfg.h"
#include "Port.h"


Port_tenuErrorStatus Port_enuSetPinDir(u8 copy_u8PinNum, u8 copy_u8PinDir)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	27 97       	sbiw	r28, 0x07	; 7
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	8c 83       	std	Y+4, r24	; 0x04
    1366:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	8b 83       	std	Y+3, r24	; 0x03

	/*make the checking before the logic bec. if there is an error we will return from the function*/
	/*if the number of pins exceed the number of the HW pins*/
	if (copy_u8PinNum>MAX_PIN_NUM)
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	80 32       	cpi	r24, 0x20	; 32
    1370:	10 f0       	brcs	.+4      	; 0x1376 <Port_enuSetPinDir+0x26>
	{
		/*pin number error */
		Loc_ErrorStatus = Port_enuPinError;
    1372:	1b 82       	std	Y+3, r1	; 0x03
    1374:	df c0       	rjmp	.+446    	; 0x1534 <Port_enuSetPinDir+0x1e4>
	}
	/*if the user pass parameter other than the two directions (input/output)*/
	else if(copy_u8PinDir > 1)
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	18 f0       	brcs	.+6      	; 0x1382 <Port_enuSetPinDir+0x32>
	{
		/*Direction error*/
		Loc_ErrorStatus = Port_enuPortError;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	d9 c0       	rjmp	.+434    	; 0x1534 <Port_enuSetPinDir+0x1e4>
	}

	else
	{
		u8 Loc_u8PinIndex = copy_u8PinNum%PIN_AND_PORT_DIVISOR;
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	87 70       	andi	r24, 0x07	; 7
    1386:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PortIndex = copy_u8PinNum/PIN_AND_PORT_DIVISOR;
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	86 95       	lsr	r24
    138c:	86 95       	lsr	r24
    138e:	86 95       	lsr	r24
    1390:	89 83       	std	Y+1, r24	; 0x01
		/* switch on the port index and according to the pin Dir the pin will be set or cleared*/
		switch (Loc_u8PortIndex)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3f 83       	std	Y+7, r19	; 0x07
    139a:	2e 83       	std	Y+6, r18	; 0x06
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <Port_enuSetPinDir+0x58>
    13a6:	43 c0       	rjmp	.+134    	; 0x142e <Port_enuSetPinDir+0xde>
    13a8:	2e 81       	ldd	r18, Y+6	; 0x06
    13aa:	3f 81       	ldd	r19, Y+7	; 0x07
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	2c f4       	brge	.+10     	; 0x13bc <Port_enuSetPinDir+0x6c>
    13b2:	8e 81       	ldd	r24, Y+6	; 0x06
    13b4:	9f 81       	ldd	r25, Y+7	; 0x07
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <Port_enuSetPinDir+0x86>
    13ba:	bc c0       	rjmp	.+376    	; 0x1534 <Port_enuSetPinDir+0x1e4>
    13bc:	2e 81       	ldd	r18, Y+6	; 0x06
    13be:	3f 81       	ldd	r19, Y+7	; 0x07
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <Port_enuSetPinDir+0x78>
    13c6:	5f c0       	rjmp	.+190    	; 0x1486 <Port_enuSetPinDir+0x136>
    13c8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ca:	9f 81       	ldd	r25, Y+7	; 0x07
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <Port_enuSetPinDir+0x84>
    13d2:	85 c0       	rjmp	.+266    	; 0x14de <Port_enuSetPinDir+0x18e>
    13d4:	af c0       	rjmp	.+350    	; 0x1534 <Port_enuSetPinDir+0x1e4>
		{
		case PORT_A:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	a1 f4       	brne	.+40     	; 0x1404 <Port_enuSetPinDir+0xb4>
			{
				SET_BIT(DDRA,Loc_u8PinIndex);
    13dc:	aa e3       	ldi	r26, 0x3A	; 58
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	ea e3       	ldi	r30, 0x3A	; 58
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <Port_enuSetPinDir+0xaa>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <Port_enuSetPinDir+0xa6>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	98 c0       	rjmp	.+304    	; 0x1534 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1404:	aa e3       	ldi	r26, 0x3A	; 58
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ea e3       	ldi	r30, 0x3A	; 58
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <Port_enuSetPinDir+0xd2>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <Port_enuSetPinDir+0xce>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	83 c0       	rjmp	.+262    	; 0x1534 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_B:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	a1 f4       	brne	.+40     	; 0x145c <Port_enuSetPinDir+0x10c>
			{
				SET_BIT(DDRB,Loc_u8PinIndex);
    1434:	a7 e3       	ldi	r26, 0x37	; 55
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e7 e3       	ldi	r30, 0x37	; 55
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <Port_enuSetPinDir+0x102>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <Port_enuSetPinDir+0xfe>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	6c c0       	rjmp	.+216    	; 0x1534 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRB,Loc_u8PinIndex);
    145c:	a7 e3       	ldi	r26, 0x37	; 55
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e7 e3       	ldi	r30, 0x37	; 55
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <Port_enuSetPinDir+0x12a>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <Port_enuSetPinDir+0x126>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	57 c0       	rjmp	.+174    	; 0x1534 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_C:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	a1 f4       	brne	.+40     	; 0x14b4 <Port_enuSetPinDir+0x164>
			{
				SET_BIT(DDRC,Loc_u8PinIndex);
    148c:	a4 e3       	ldi	r26, 0x34	; 52
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e4 e3       	ldi	r30, 0x34	; 52
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <Port_enuSetPinDir+0x15a>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <Port_enuSetPinDir+0x156>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	40 c0       	rjmp	.+128    	; 0x1534 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRC,Loc_u8PinIndex);
    14b4:	a4 e3       	ldi	r26, 0x34	; 52
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e4 e3       	ldi	r30, 0x34	; 52
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <Port_enuSetPinDir+0x182>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <Port_enuSetPinDir+0x17e>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	2b c0       	rjmp	.+86     	; 0x1534 <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_D:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	a1 f4       	brne	.+40     	; 0x150c <Port_enuSetPinDir+0x1bc>
			{
				SET_BIT(DDRD,Loc_u8PinIndex);
    14e4:	a1 e3       	ldi	r26, 0x31	; 49
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e1 e3       	ldi	r30, 0x31	; 49
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <Port_enuSetPinDir+0x1b2>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <Port_enuSetPinDir+0x1ae>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRD,Loc_u8PinIndex);
    150c:	a1 e3       	ldi	r26, 0x31	; 49
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e1 e3       	ldi	r30, 0x31	; 49
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <Port_enuSetPinDir+0x1da>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <Port_enuSetPinDir+0x1d6>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
		default:
			/*Do nothing*/
			break;
		}
	}
	return Loc_ErrorStatus;
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1536:	27 96       	adiw	r28, 0x07	; 7
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 copy_u8PinNum, Port_tenuPinMode enu_PinMode)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	2f 97       	sbiw	r28, 0x0f	; 15
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	8c 83       	std	Y+4, r24	; 0x04
    155e:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	8b 83       	std	Y+3, r24	; 0x03
	if(enu_PinMode>NUMBER_OF_MODES)
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	85 30       	cpi	r24, 0x05	; 5
    1568:	18 f0       	brcs	.+6      	; 0x1570 <Port_enuSetPinMode+0x28>
	{
		Loc_ErrorStatus = Port_enuModeError;
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	8b 83       	std	Y+3, r24	; 0x03
    156e:	23 c3       	rjmp	.+1606   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
	}
	else if(copy_u8PinNum>MAX_PIN_NUM)
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	80 32       	cpi	r24, 0x20	; 32
    1574:	10 f0       	brcs	.+4      	; 0x157a <Port_enuSetPinMode+0x32>
	{
		Loc_ErrorStatus = Port_enuPinError;
    1576:	1b 82       	std	Y+3, r1	; 0x03
    1578:	1e c3       	rjmp	.+1596   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
	}
	else
	{
		u8 Loc_u8PortIndex = (copy_u8PinNum /PIN_AND_PORT_DIVISOR);
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	86 95       	lsr	r24
    157e:	86 95       	lsr	r24
    1580:	86 95       	lsr	r24
    1582:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PinIndex  = (copy_u8PinNum %PIN_AND_PORT_DIVISOR);
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	87 70       	andi	r24, 0x07	; 7
    1588:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8PortIndex)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3f 87       	std	Y+15, r19	; 0x0f
    1592:	2e 87       	std	Y+14, r18	; 0x0e
    1594:	8e 85       	ldd	r24, Y+14	; 0x0e
    1596:	9f 85       	ldd	r25, Y+15	; 0x0f
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <Port_enuSetPinMode+0x58>
    159e:	d4 c0       	rjmp	.+424    	; 0x1748 <Port_enuSetPinMode+0x200>
    15a0:	2e 85       	ldd	r18, Y+14	; 0x0e
    15a2:	3f 85       	ldd	r19, Y+15	; 0x0f
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <Port_enuSetPinMode+0x6c>
    15aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	71 f0       	breq	.+28     	; 0x15ce <Port_enuSetPinMode+0x86>
    15b2:	01 c3       	rjmp	.+1538   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
    15b4:	2e 85       	ldd	r18, Y+14	; 0x0e
    15b6:	3f 85       	ldd	r19, Y+15	; 0x0f
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <Port_enuSetPinMode+0x78>
    15be:	81 c1       	rjmp	.+770    	; 0x18c2 <Port_enuSetPinMode+0x37a>
    15c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <Port_enuSetPinMode+0x84>
    15ca:	39 c2       	rjmp	.+1138   	; 0x1a3e <Port_enuSetPinMode+0x4f6>
    15cc:	f4 c2       	rjmp	.+1512   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
		{
		case PORT_A:
			switch(enu_PinMode)
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3d 87       	std	Y+13, r19	; 0x0d
    15d6:	2c 87       	std	Y+12, r18	; 0x0c
    15d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15da:	9d 85       	ldd	r25, Y+13	; 0x0d
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	b9 f0       	breq	.+46     	; 0x1610 <Port_enuSetPinMode+0xc8>
    15e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	31 05       	cpc	r19, r1
    15ea:	2c f4       	brge	.+10     	; 0x15f6 <Port_enuSetPinMode+0xae>
    15ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	a1 f1       	breq	.+104    	; 0x165c <Port_enuSetPinMode+0x114>
    15f4:	e0 c2       	rjmp	.+1472   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
    15f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f8:	3d 85       	ldd	r19, Y+13	; 0x0d
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <Port_enuSetPinMode+0xba>
    1600:	54 c0       	rjmp	.+168    	; 0x16aa <Port_enuSetPinMode+0x162>
    1602:	8c 85       	ldd	r24, Y+12	; 0x0c
    1604:	9d 85       	ldd	r25, Y+13	; 0x0d
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <Port_enuSetPinMode+0xc6>
    160c:	75 c0       	rjmp	.+234    	; 0x16f8 <Port_enuSetPinMode+0x1b0>
    160e:	d3 c2       	rjmp	.+1446   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
			{
			case Output_enuHigh:
				SET_BIT(DDRA,Loc_u8PinIndex);
    1610:	aa e3       	ldi	r26, 0x3A	; 58
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ea e3       	ldi	r30, 0x3A	; 58
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <Port_enuSetPinMode+0xe4>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	2a 95       	dec	r18
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <Port_enuSetPinMode+0xe0>
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    1634:	ab e3       	ldi	r26, 0x3B	; 59
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <Port_enuSetPinMode+0x10a>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <Port_enuSetPinMode+0x106>
    1656:	84 2b       	or	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	ad c2       	rjmp	.+1370   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
				break;
			case Output_enuLow:
				SET_BIT(DDRA,Loc_u8PinIndex);
    165c:	aa e3       	ldi	r26, 0x3A	; 58
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ea e3       	ldi	r30, 0x3A	; 58
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <Port_enuSetPinMode+0x130>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	2a 95       	dec	r18
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <Port_enuSetPinMode+0x12c>
    167c:	84 2b       	or	r24, r20
    167e:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    1680:	ab e3       	ldi	r26, 0x3B	; 59
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <Port_enuSetPinMode+0x156>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <Port_enuSetPinMode+0x152>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	86 c2       	rjmp	.+1292   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuPullup:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    16aa:	aa e3       	ldi	r26, 0x3A	; 58
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ea e3       	ldi	r30, 0x3A	; 58
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <Port_enuSetPinMode+0x17e>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	2a 95       	dec	r18
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <Port_enuSetPinMode+0x17a>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    16d0:	ab e3       	ldi	r26, 0x3B	; 59
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	eb e3       	ldi	r30, 0x3B	; 59
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <Port_enuSetPinMode+0x1a6>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <Port_enuSetPinMode+0x1a2>
    16f2:	84 2b       	or	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	5f c2       	rjmp	.+1214   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuHighImpedence:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    16f8:	aa e3       	ldi	r26, 0x3A	; 58
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	ea e3       	ldi	r30, 0x3A	; 58
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <Port_enuSetPinMode+0x1cc>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	2a 95       	dec	r18
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <Port_enuSetPinMode+0x1c8>
    1718:	80 95       	com	r24
    171a:	84 23       	and	r24, r20
    171c:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    171e:	ab e3       	ldi	r26, 0x3B	; 59
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <Port_enuSetPinMode+0x1f4>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <Port_enuSetPinMode+0x1f0>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	37 c2       	rjmp	.+1134   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
				/*do nothing*/
				break;
			}
			break;
			case PORT_B:
				switch(enu_PinMode)
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3b 87       	std	Y+11, r19	; 0x0b
    1750:	2a 87       	std	Y+10, r18	; 0x0a
    1752:	8a 85       	ldd	r24, Y+10	; 0x0a
    1754:	9b 85       	ldd	r25, Y+11	; 0x0b
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	b9 f0       	breq	.+46     	; 0x178a <Port_enuSetPinMode+0x242>
    175c:	2a 85       	ldd	r18, Y+10	; 0x0a
    175e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <Port_enuSetPinMode+0x228>
    1766:	8a 85       	ldd	r24, Y+10	; 0x0a
    1768:	9b 85       	ldd	r25, Y+11	; 0x0b
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	a1 f1       	breq	.+104    	; 0x17d6 <Port_enuSetPinMode+0x28e>
    176e:	23 c2       	rjmp	.+1094   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
    1770:	2a 85       	ldd	r18, Y+10	; 0x0a
    1772:	3b 85       	ldd	r19, Y+11	; 0x0b
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <Port_enuSetPinMode+0x234>
    177a:	54 c0       	rjmp	.+168    	; 0x1824 <Port_enuSetPinMode+0x2dc>
    177c:	8a 85       	ldd	r24, Y+10	; 0x0a
    177e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <Port_enuSetPinMode+0x240>
    1786:	75 c0       	rjmp	.+234    	; 0x1872 <Port_enuSetPinMode+0x32a>
    1788:	16 c2       	rjmp	.+1068   	; 0x1bb6 <Port_enuSetPinMode+0x66e>
				{
				case Output_enuHigh:
					SET_BIT(DDRB,Loc_u8PinIndex);
    178a:	a7 e3       	ldi	r26, 0x37	; 55
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e7 e3       	ldi	r30, 0x37	; 55
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <Port_enuSetPinMode+0x25e>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	2a 95       	dec	r18
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <Port_enuSetPinMode+0x25a>
    17aa:	84 2b       	or	r24, r20
    17ac:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    17ae:	a8 e3       	ldi	r26, 0x38	; 56
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e8 e3       	ldi	r30, 0x38	; 56
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <Port_enuSetPinMode+0x284>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <Port_enuSetPinMode+0x280>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	f0 c1       	rjmp	.+992    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
					break;
				case Output_enuLow:
					SET_BIT(DDRB,Loc_u8PinIndex);
    17d6:	a7 e3       	ldi	r26, 0x37	; 55
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e7 e3       	ldi	r30, 0x37	; 55
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <Port_enuSetPinMode+0x2aa>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	2a 95       	dec	r18
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <Port_enuSetPinMode+0x2a6>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    17fa:	a8 e3       	ldi	r26, 0x38	; 56
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <Port_enuSetPinMode+0x2d0>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <Port_enuSetPinMode+0x2cc>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	c9 c1       	rjmp	.+914    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuPullup:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    1824:	a7 e3       	ldi	r26, 0x37	; 55
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e7 e3       	ldi	r30, 0x37	; 55
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <Port_enuSetPinMode+0x2f8>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	2a 95       	dec	r18
    1842:	e2 f7       	brpl	.-8      	; 0x183c <Port_enuSetPinMode+0x2f4>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    184a:	a8 e3       	ldi	r26, 0x38	; 56
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e8 e3       	ldi	r30, 0x38	; 56
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <Port_enuSetPinMode+0x320>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <Port_enuSetPinMode+0x31c>
    186c:	84 2b       	or	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	a2 c1       	rjmp	.+836    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuHighImpedence:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    1872:	a7 e3       	ldi	r26, 0x37	; 55
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e7 e3       	ldi	r30, 0x37	; 55
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 c0       	rjmp	.+4      	; 0x188e <Port_enuSetPinMode+0x346>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	2a 95       	dec	r18
    1890:	e2 f7       	brpl	.-8      	; 0x188a <Port_enuSetPinMode+0x342>
    1892:	80 95       	com	r24
    1894:	84 23       	and	r24, r20
    1896:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    1898:	a8 e3       	ldi	r26, 0x38	; 56
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e8 e3       	ldi	r30, 0x38	; 56
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <Port_enuSetPinMode+0x36e>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <Port_enuSetPinMode+0x36a>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	7a c1       	rjmp	.+756    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
					/*do nothing*/
					break;
				}
				break ;
				case PORT_C:
					switch(enu_PinMode)
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	39 87       	std	Y+9, r19	; 0x09
    18ca:	28 87       	std	Y+8, r18	; 0x08
    18cc:	88 85       	ldd	r24, Y+8	; 0x08
    18ce:	99 85       	ldd	r25, Y+9	; 0x09
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	91 05       	cpc	r25, r1
    18d4:	b9 f0       	breq	.+46     	; 0x1904 <Port_enuSetPinMode+0x3bc>
    18d6:	28 85       	ldd	r18, Y+8	; 0x08
    18d8:	39 85       	ldd	r19, Y+9	; 0x09
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	2c f4       	brge	.+10     	; 0x18ea <Port_enuSetPinMode+0x3a2>
    18e0:	88 85       	ldd	r24, Y+8	; 0x08
    18e2:	99 85       	ldd	r25, Y+9	; 0x09
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	a1 f1       	breq	.+104    	; 0x1950 <Port_enuSetPinMode+0x408>
    18e8:	66 c1       	rjmp	.+716    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
    18ea:	28 85       	ldd	r18, Y+8	; 0x08
    18ec:	39 85       	ldd	r19, Y+9	; 0x09
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <Port_enuSetPinMode+0x3ae>
    18f4:	55 c0       	rjmp	.+170    	; 0x19a0 <Port_enuSetPinMode+0x458>
    18f6:	88 85       	ldd	r24, Y+8	; 0x08
    18f8:	99 85       	ldd	r25, Y+9	; 0x09
    18fa:	83 30       	cpi	r24, 0x03	; 3
    18fc:	91 05       	cpc	r25, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <Port_enuSetPinMode+0x3ba>
    1900:	76 c0       	rjmp	.+236    	; 0x19ee <Port_enuSetPinMode+0x4a6>
    1902:	59 c1       	rjmp	.+690    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
					{
					case Output_enuHigh:
						SET_BIT(DDRC,Loc_u8PinIndex);
    1904:	a4 e3       	ldi	r26, 0x34	; 52
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e4 e3       	ldi	r30, 0x34	; 52
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <Port_enuSetPinMode+0x3d8>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	2a 95       	dec	r18
    1922:	e2 f7       	brpl	.-8      	; 0x191c <Port_enuSetPinMode+0x3d4>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    1928:	a5 e3       	ldi	r26, 0x35	; 53
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e5 e3       	ldi	r30, 0x35	; 53
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <Port_enuSetPinMode+0x3fe>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <Port_enuSetPinMode+0x3fa>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	33 c1       	rjmp	.+614    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
						break;
					case Output_enuLow:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    1950:	a4 e3       	ldi	r26, 0x34	; 52
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e4 e3       	ldi	r30, 0x34	; 52
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 c0       	rjmp	.+4      	; 0x196c <Port_enuSetPinMode+0x424>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	2a 95       	dec	r18
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <Port_enuSetPinMode+0x420>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    1976:	a5 e3       	ldi	r26, 0x35	; 53
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e5 e3       	ldi	r30, 0x35	; 53
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <Port_enuSetPinMode+0x44c>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <Port_enuSetPinMode+0x448>
    1998:	80 95       	com	r24
    199a:	84 23       	and	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	0b c1       	rjmp	.+534    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuPullup:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    19a0:	a4 e3       	ldi	r26, 0x34	; 52
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e4 e3       	ldi	r30, 0x34	; 52
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <Port_enuSetPinMode+0x474>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	2a 95       	dec	r18
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <Port_enuSetPinMode+0x470>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    19c6:	a5 e3       	ldi	r26, 0x35	; 53
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e3       	ldi	r30, 0x35	; 53
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <Port_enuSetPinMode+0x49c>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <Port_enuSetPinMode+0x498>
    19e8:	84 2b       	or	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	e4 c0       	rjmp	.+456    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuHighImpedence:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    19ee:	a4 e3       	ldi	r26, 0x34	; 52
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e4 e3       	ldi	r30, 0x34	; 52
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <Port_enuSetPinMode+0x4c2>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	2a 95       	dec	r18
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <Port_enuSetPinMode+0x4be>
    1a0e:	80 95       	com	r24
    1a10:	84 23       	and	r24, r20
    1a12:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    1a14:	a5 e3       	ldi	r26, 0x35	; 53
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e5 e3       	ldi	r30, 0x35	; 53
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <Port_enuSetPinMode+0x4ea>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <Port_enuSetPinMode+0x4e6>
    1a36:	80 95       	com	r24
    1a38:	84 23       	and	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	bc c0       	rjmp	.+376    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
						/*do nothing*/
						break;
					}
					break ;
					case PORT_D:
						switch(enu_PinMode)
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3f 83       	std	Y+7, r19	; 0x07
    1a46:	2e 83       	std	Y+6, r18	; 0x06
    1a48:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	b9 f0       	breq	.+46     	; 0x1a80 <Port_enuSetPinMode+0x538>
    1a52:	2e 81       	ldd	r18, Y+6	; 0x06
    1a54:	3f 81       	ldd	r19, Y+7	; 0x07
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <Port_enuSetPinMode+0x51e>
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	a1 f1       	breq	.+104    	; 0x1acc <Port_enuSetPinMode+0x584>
    1a64:	a8 c0       	rjmp	.+336    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
    1a66:	2e 81       	ldd	r18, Y+6	; 0x06
    1a68:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <Port_enuSetPinMode+0x52a>
    1a70:	54 c0       	rjmp	.+168    	; 0x1b1a <Port_enuSetPinMode+0x5d2>
    1a72:	8e 81       	ldd	r24, Y+6	; 0x06
    1a74:	9f 81       	ldd	r25, Y+7	; 0x07
    1a76:	83 30       	cpi	r24, 0x03	; 3
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <Port_enuSetPinMode+0x536>
    1a7c:	75 c0       	rjmp	.+234    	; 0x1b68 <Port_enuSetPinMode+0x620>
    1a7e:	9b c0       	rjmp	.+310    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
						{
						case Output_enuHigh:
							SET_BIT(DDRD,Loc_u8PinIndex);
    1a80:	a1 e3       	ldi	r26, 0x31	; 49
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e1 e3       	ldi	r30, 0x31	; 49
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <Port_enuSetPinMode+0x554>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	2a 95       	dec	r18
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <Port_enuSetPinMode+0x550>
    1aa0:	84 2b       	or	r24, r20
    1aa2:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8PinIndex);
    1aa4:	a2 e3       	ldi	r26, 0x32	; 50
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e2 e3       	ldi	r30, 0x32	; 50
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <Port_enuSetPinMode+0x57a>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <Port_enuSetPinMode+0x576>
    1ac6:	84 2b       	or	r24, r20
    1ac8:	8c 93       	st	X, r24
    1aca:	75 c0       	rjmp	.+234    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
							break;
						case Output_enuLow:
							SET_BIT(DDRD,Loc_u8PinIndex);
    1acc:	a1 e3       	ldi	r26, 0x31	; 49
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e1 e3       	ldi	r30, 0x31	; 49
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <Port_enuSetPinMode+0x5a0>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	2a 95       	dec	r18
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <Port_enuSetPinMode+0x59c>
    1aec:	84 2b       	or	r24, r20
    1aee:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    1af0:	a2 e3       	ldi	r26, 0x32	; 50
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e2 e3       	ldi	r30, 0x32	; 50
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <Port_enuSetPinMode+0x5c6>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <Port_enuSetPinMode+0x5c2>
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	4e c0       	rjmp	.+156    	; 0x1bb6 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuPullup:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    1b1a:	a1 e3       	ldi	r26, 0x31	; 49
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e1 e3       	ldi	r30, 0x31	; 49
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <Port_enuSetPinMode+0x5ee>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	2a 95       	dec	r18
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <Port_enuSetPinMode+0x5ea>
    1b3a:	80 95       	com	r24
    1b3c:	84 23       	and	r24, r20
    1b3e:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8PinIndex);
    1b40:	ab e3       	ldi	r26, 0x3B	; 59
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e3       	ldi	r30, 0x3B	; 59
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <Port_enuSetPinMode+0x616>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <Port_enuSetPinMode+0x612>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	27 c0       	rjmp	.+78     	; 0x1bb6 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuHighImpedence:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    1b68:	a1 e3       	ldi	r26, 0x31	; 49
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e1 e3       	ldi	r30, 0x31	; 49
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <Port_enuSetPinMode+0x63c>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	2a 95       	dec	r18
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <Port_enuSetPinMode+0x638>
    1b88:	80 95       	com	r24
    1b8a:	84 23       	and	r24, r20
    1b8c:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    1b8e:	a2 e3       	ldi	r26, 0x32	; 50
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e2 e3       	ldi	r30, 0x32	; 50
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <Port_enuSetPinMode+0x664>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <Port_enuSetPinMode+0x660>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
							/*do nothing*/
							break;
		}

	}
	return Loc_ErrorStatus;
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1bb8:	2f 96       	adiw	r28, 0x0f	; 15
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <Port_vidInit>:

void Port_vidInit(void)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
#define b7_DDRA		1
#define b7_PORTA	0
#endif


	DDRA=CONC(b7_DDRA,b6_DDRA,b5_DDRA,b4_DDRA,b3_DDRA,b2_DDRA,b1_DDRA,b0_DDRA);
    1bd2:	ea e3       	ldi	r30, 0x3A	; 58
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8e ef       	ldi	r24, 0xFE	; 254
    1bd8:	80 83       	st	Z, r24
	PORTA=CONC(b7_PORTA,b6_PORTA,b5_PORTA,b4_PORTA,b3_PORTA,b2_PORTA,b1_PORTA,b0_PORTA);
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	80 83       	st	Z, r24
#elif PORT_PIN_15_INIT_CFG == OUTPUT_LOW
#define b15_DDRB		1
#define b15_PORTB		0
#endif

	DDRB=CONC(b15_DDRB,b14_DDRB,b13_DDRB,b12_DDRB,b11_DDRB,b10_DDRB,b9_DDRB,b8_DDRB);
    1be2:	e7 e3       	ldi	r30, 0x37	; 55
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	80 83       	st	Z, r24
	PORTB=CONC(b15_PORTB,b14_PORTB,b13_PORTB,b12_PORTB,b11_PORTB,b10_PORTB,b9_PORTB,b8_PORTB);
    1bea:	e8 e3       	ldi	r30, 0x38	; 56
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 ef       	ldi	r24, 0xF0	; 240
    1bf0:	80 83       	st	Z, r24
#elif PORT_PIN_23_INIT_CFG == OUTPUT_LOW
#define b23_DDRC		1
#define b23_PORTC		0
#endif

	DDRC=CONC(b23_DDRC,b22_DDRC,b21_DDRC,b20_DDRC,b19_DDRC,b18_DDRC,b17_DDRC,b16_DDRC);
    1bf2:	e4 e3       	ldi	r30, 0x34	; 52
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	80 83       	st	Z, r24
	PORTC=CONC(b23_PORTC,b22_PORTC,b21_PORTC,b20_PORTC,b19_PORTC,b18_PORTC,b17_PORTC,b16_PORTC);
    1bfa:	e5 e3       	ldi	r30, 0x35	; 53
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	10 82       	st	Z, r1
#elif PORT_PIN_31_INIT_CFG == OUTPUT_LOW
#define b31_DDRD		1
#define b31_PORTD		0
#endif

	DDRD=CONC(b31_DDRD,b30_DDRD,b29_DDRD,b28_DDRD,b27_DDRD,b26_DDRD,b25_DDRD,b24_DDRD);
    1c00:	e1 e3       	ldi	r30, 0x31	; 49
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	8e ef       	ldi	r24, 0xFE	; 254
    1c06:	80 83       	st	Z, r24
	PORTD=CONC(b31_PORTD,b30_PORTD,b29_PORTD,b28_PORTD,b27_PORTD,b26_PORTD,b25_PORTD,b24_PORTD);
    1c08:	e2 e3       	ldi	r30, 0x32	; 50
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	80 83       	st	Z, r24
}
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <Lcd_vidInit>:




void Lcd_vidInit(void)
{
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	c6 54       	subi	r28, 0x46	; 70
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	fe 01       	movw	r30, r28
    1c32:	ed 5b       	subi	r30, 0xBD	; 189
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a0 ef       	ldi	r26, 0xF0	; 240
    1c3c:	b1 e4       	ldi	r27, 0x41	; 65
    1c3e:	80 83       	st	Z, r24
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	a2 83       	std	Z+2, r26	; 0x02
    1c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	8e 01       	movw	r16, r28
    1c48:	01 5c       	subi	r16, 0xC1	; 193
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ed 5b       	subi	r30, 0xBD	; 189
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a ef       	ldi	r20, 0xFA	; 250
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	a2 83       	std	Z+2, r26	; 0x02
    1c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c74:	fe 01       	movw	r30, r28
    1c76:	ff 96       	adiw	r30, 0x3f	; 63
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <Lcd_vidInit+0x84>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9e af       	std	Y+62, r25	; 0x3e
    1c96:	8d af       	std	Y+61, r24	; 0x3d
    1c98:	46 c0       	rjmp	.+140    	; 0x1d26 <Lcd_vidInit+0x110>
	else if (__tmp > 65535)
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ff 96       	adiw	r30, 0x3f	; 63
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	64 f5       	brge	.+88     	; 0x1d0e <Lcd_vidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ed 5b       	subi	r30, 0xBD	; 189
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e af       	std	Y+62, r25	; 0x3e
    1ce2:	8d af       	std	Y+61, r24	; 0x3d
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <Lcd_vidInit+0xee>
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c af       	std	Y+60, r25	; 0x3c
    1cec:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cee:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cf0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <Lcd_vidInit+0xdc>
    1cf6:	9c af       	std	Y+60, r25	; 0x3c
    1cf8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e af       	std	Y+62, r25	; 0x3e
    1d02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <Lcd_vidInit+0xd0>
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <Lcd_vidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ff 96       	adiw	r30, 0x3f	; 63
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e af       	std	Y+62, r25	; 0x3e
    1d24:	8d af       	std	Y+61, r24	; 0x3d
    1d26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2a:	9a af       	std	Y+58, r25	; 0x3a
    1d2c:	89 af       	std	Y+57, r24	; 0x39
    1d2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <Lcd_vidInit+0x11c>
    1d36:	9a af       	std	Y+58, r25	; 0x3a
    1d38:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(LCD_u8DELAY_FOR_INITIALIZATION);
	Lcd_vidSendCommand(LCD_u8FUNCTION_SET_CFG);  		//Function Set: 8-bit, 2 Line, 5x7 Dots
    1d3a:	88 e3       	ldi	r24, 0x38	; 56
    1d3c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <Lcd_vidSendCommand>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	8d ab       	std	Y+53, r24	; 0x35
    1d4a:	9e ab       	std	Y+54, r25	; 0x36
    1d4c:	af ab       	std	Y+55, r26	; 0x37
    1d4e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	6d a9       	ldd	r22, Y+53	; 0x35
    1d52:	7e a9       	ldd	r23, Y+54	; 0x36
    1d54:	8f a9       	ldd	r24, Y+55	; 0x37
    1d56:	98 ad       	ldd	r25, Y+56	; 0x38
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a ef       	ldi	r20, 0xFA	; 250
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	89 ab       	std	Y+49, r24	; 0x31
    1d6a:	9a ab       	std	Y+50, r25	; 0x32
    1d6c:	ab ab       	std	Y+51, r26	; 0x33
    1d6e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d70:	69 a9       	ldd	r22, Y+49	; 0x31
    1d72:	7a a9       	ldd	r23, Y+50	; 0x32
    1d74:	8b a9       	ldd	r24, Y+51	; 0x33
    1d76:	9c a9       	ldd	r25, Y+52	; 0x34
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <Lcd_vidInit+0x17c>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	98 ab       	std	Y+48, r25	; 0x30
    1d8e:	8f a7       	std	Y+47, r24	; 0x2f
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <Lcd_vidInit+0x1fa>
	else if (__tmp > 65535)
    1d92:	69 a9       	ldd	r22, Y+49	; 0x31
    1d94:	7a a9       	ldd	r23, Y+50	; 0x32
    1d96:	8b a9       	ldd	r24, Y+51	; 0x33
    1d98:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <Lcd_vidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	6d a9       	ldd	r22, Y+53	; 0x35
    1dac:	7e a9       	ldd	r23, Y+54	; 0x36
    1dae:	8f a9       	ldd	r24, Y+55	; 0x37
    1db0:	98 ad       	ldd	r25, Y+56	; 0x38
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	98 ab       	std	Y+48, r25	; 0x30
    1dd0:	8f a7       	std	Y+47, r24	; 0x2f
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <Lcd_vidInit+0x1dc>
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9e a7       	std	Y+46, r25	; 0x2e
    1dda:	8d a7       	std	Y+45, r24	; 0x2d
    1ddc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dde:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <Lcd_vidInit+0x1ca>
    1de4:	9e a7       	std	Y+46, r25	; 0x2e
    1de6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dea:	98 a9       	ldd	r25, Y+48	; 0x30
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	98 ab       	std	Y+48, r25	; 0x30
    1df0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df4:	98 a9       	ldd	r25, Y+48	; 0x30
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <Lcd_vidInit+0x1be>
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <Lcd_vidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1e00:	8b a9       	ldd	r24, Y+51	; 0x33
    1e02:	9c a9       	ldd	r25, Y+52	; 0x34
    1e04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	98 ab       	std	Y+48, r25	; 0x30
    1e0e:	8f a7       	std	Y+47, r24	; 0x2f
    1e10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e12:	98 a9       	ldd	r25, Y+48	; 0x30
    1e14:	9c a7       	std	Y+44, r25	; 0x2c
    1e16:	8b a7       	std	Y+43, r24	; 0x2b
    1e18:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <Lcd_vidInit+0x206>
    1e20:	9c a7       	std	Y+44, r25	; 0x2c
    1e22:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
	Lcd_vidSendCommand(LCD_u8DISPLAY_ON_CFG);   		//Display on Cursor off
    1e24:	8c e0       	ldi	r24, 0x0C	; 12
    1e26:	0e 94 7d 10 	call	0x20fa	; 0x20fa <Lcd_vidSendCommand>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e8       	ldi	r26, 0x80	; 128
    1e30:	bf e3       	ldi	r27, 0x3F	; 63
    1e32:	8f a3       	std	Y+39, r24	; 0x27
    1e34:	98 a7       	std	Y+40, r25	; 0x28
    1e36:	a9 a7       	std	Y+41, r26	; 0x29
    1e38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a ef       	ldi	r20, 0xFA	; 250
    1e48:	54 e4       	ldi	r21, 0x44	; 68
    1e4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	8b a3       	std	Y+35, r24	; 0x23
    1e54:	9c a3       	std	Y+36, r25	; 0x24
    1e56:	ad a3       	std	Y+37, r26	; 0x25
    1e58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e60:	9e a1       	ldd	r25, Y+38	; 0x26
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <Lcd_vidInit+0x266>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9a a3       	std	Y+34, r25	; 0x22
    1e78:	89 a3       	std	Y+33, r24	; 0x21
    1e7a:	3f c0       	rjmp	.+126    	; 0x1efa <Lcd_vidInit+0x2e4>
	else if (__tmp > 65535)
    1e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e80:	8d a1       	ldd	r24, Y+37	; 0x25
    1e82:	9e a1       	ldd	r25, Y+38	; 0x26
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	4c f5       	brge	.+82     	; 0x1ee6 <Lcd_vidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e94:	6f a1       	ldd	r22, Y+39	; 0x27
    1e96:	78 a5       	ldd	r23, Y+40	; 0x28
    1e98:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e2       	ldi	r20, 0x20	; 32
    1ea2:	51 e4       	ldi	r21, 0x41	; 65
    1ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9a a3       	std	Y+34, r25	; 0x22
    1eba:	89 a3       	std	Y+33, r24	; 0x21
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <Lcd_vidInit+0x2c6>
    1ebe:	88 ec       	ldi	r24, 0xC8	; 200
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	98 a3       	std	Y+32, r25	; 0x20
    1ec4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec8:	98 a1       	ldd	r25, Y+32	; 0x20
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <Lcd_vidInit+0x2b4>
    1ece:	98 a3       	std	Y+32, r25	; 0x20
    1ed0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	9a a3       	std	Y+34, r25	; 0x22
    1eda:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ede:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <Lcd_vidInit+0x2a8>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <Lcd_vidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eea:	8d a1       	ldd	r24, Y+37	; 0x25
    1eec:	9e a1       	ldd	r25, Y+38	; 0x26
    1eee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
    1efa:	89 a1       	ldd	r24, Y+33	; 0x21
    1efc:	9a a1       	ldd	r25, Y+34	; 0x22
    1efe:	9e 8f       	std	Y+30, r25	; 0x1e
    1f00:	8d 8f       	std	Y+29, r24	; 0x1d
    1f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <Lcd_vidInit+0x2f0>
    1f0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
	Lcd_vidSendCommand(LCD_u8CLEAR_DISPLAY_CFG); 		//Clear LCD
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	0e 94 7d 10 	call	0x20fa	; 0x20fa <Lcd_vidSendCommand>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e8       	ldi	r26, 0x80	; 128
    1f1a:	bf e3       	ldi	r27, 0x3F	; 63
    1f1c:	89 8f       	std	Y+25, r24	; 0x19
    1f1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f20:	ab 8f       	std	Y+27, r26	; 0x1b
    1f22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	69 8d       	ldd	r22, Y+25	; 0x19
    1f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8d 8b       	std	Y+21, r24	; 0x15
    1f3e:	9e 8b       	std	Y+22, r25	; 0x16
    1f40:	af 8b       	std	Y+23, r26	; 0x17
    1f42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f44:	6d 89       	ldd	r22, Y+21	; 0x15
    1f46:	7e 89       	ldd	r23, Y+22	; 0x16
    1f48:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <Lcd_vidInit+0x350>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9c 8b       	std	Y+20, r25	; 0x14
    1f62:	8b 8b       	std	Y+19, r24	; 0x13
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <Lcd_vidInit+0x3ce>
	else if (__tmp > 65535)
    1f66:	6d 89       	ldd	r22, Y+21	; 0x15
    1f68:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <Lcd_vidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9c 8b       	std	Y+20, r25	; 0x14
    1fa4:	8b 8b       	std	Y+19, r24	; 0x13
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <Lcd_vidInit+0x3b0>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9a 8b       	std	Y+18, r25	; 0x12
    1fae:	89 8b       	std	Y+17, r24	; 0x11
    1fb0:	89 89       	ldd	r24, Y+17	; 0x11
    1fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <Lcd_vidInit+0x39e>
    1fb8:	9a 8b       	std	Y+18, r25	; 0x12
    1fba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9c 8b       	std	Y+20, r25	; 0x14
    1fc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <Lcd_vidInit+0x392>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <Lcd_vidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	98 8b       	std	Y+16, r25	; 0x10
    1fea:	8f 87       	std	Y+15, r24	; 0x0f
    1fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fee:	98 89       	ldd	r25, Y+16	; 0x10
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <Lcd_vidInit+0x3da>
    1ff4:	98 8b       	std	Y+16, r25	; 0x10
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
	Lcd_vidSendCommand(LCD_u8ENTRY_MODE_SET_CFG);       //Entry Mode
    1ff8:	86 e0       	ldi	r24, 0x06	; 6
    1ffa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <Lcd_vidSendCommand>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e8       	ldi	r26, 0x80	; 128
    2004:	bf e3       	ldi	r27, 0x3F	; 63
    2006:	8b 87       	std	Y+11, r24	; 0x0b
    2008:	9c 87       	std	Y+12, r25	; 0x0c
    200a:	ad 87       	std	Y+13, r26	; 0x0d
    200c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2010:	7c 85       	ldd	r23, Y+12	; 0x0c
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4a ef       	ldi	r20, 0xFA	; 250
    201c:	54 e4       	ldi	r21, 0x44	; 68
    201e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8f 83       	std	Y+7, r24	; 0x07
    2028:	98 87       	std	Y+8, r25	; 0x08
    202a:	a9 87       	std	Y+9, r26	; 0x09
    202c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202e:	6f 81       	ldd	r22, Y+7	; 0x07
    2030:	78 85       	ldd	r23, Y+8	; 0x08
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	2c f4       	brge	.+10     	; 0x2050 <Lcd_vidInit+0x43a>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	3f c0       	rjmp	.+126    	; 0x20ce <Lcd_vidInit+0x4b8>
	else if (__tmp > 65535)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	4c f5       	brge	.+82     	; 0x20ba <Lcd_vidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <Lcd_vidInit+0x49a>
    2092:	88 ec       	ldi	r24, 0xC8	; 200
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <Lcd_vidInit+0x488>
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <Lcd_vidInit+0x47c>
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <Lcd_vidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <Lcd_vidInit+0x4c4>
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
}
    20e2:	ca 5b       	subi	r28, 0xBA	; 186
    20e4:	df 4f       	sbci	r29, 0xFF	; 255
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	1f 91       	pop	r17
    20f6:	0f 91       	pop	r16
    20f8:	08 95       	ret

000020fa <Lcd_vidSendCommand>:
void Lcd_vidSendCommand(u8 copy_data)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	ab 97       	sbiw	r28, 0x2b	; 43
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_enuWriteChannelId(LCD_u8EN_PIN,DIO_u8LOW);
    2110:	8a e0       	ldi	r24, 0x0A	; 10
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RS_PIN,DIO_u8LOW);
    2118:	88 e0       	ldi	r24, 0x08	; 8
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RW_PIN,DIO_u8LOW);
    2120:	89 e0       	ldi	r24, 0x09	; 9
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>

	Lcd_prvSendData(copy_data);
    2128:	8b a5       	ldd	r24, Y+43	; 0x2b
    212a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Lcd_prvSendData>
	Applying_Falling_Edge_On_EN();
    212e:	8a e0       	ldi	r24, 0x0A	; 10
    2130:	61 e0       	ldi	r22, 0x01	; 1
    2132:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e4       	ldi	r27, 0x40	; 64
    213e:	8f a3       	std	Y+39, r24	; 0x27
    2140:	98 a7       	std	Y+40, r25	; 0x28
    2142:	a9 a7       	std	Y+41, r26	; 0x29
    2144:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6f a1       	ldd	r22, Y+39	; 0x27
    2148:	78 a5       	ldd	r23, Y+40	; 0x28
    214a:	89 a5       	ldd	r24, Y+41	; 0x29
    214c:	9a a5       	ldd	r25, Y+42	; 0x2a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8b a3       	std	Y+35, r24	; 0x23
    2160:	9c a3       	std	Y+36, r25	; 0x24
    2162:	ad a3       	std	Y+37, r26	; 0x25
    2164:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2166:	6b a1       	ldd	r22, Y+35	; 0x23
    2168:	7c a1       	ldd	r23, Y+36	; 0x24
    216a:	8d a1       	ldd	r24, Y+37	; 0x25
    216c:	9e a1       	ldd	r25, Y+38	; 0x26
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <Lcd_vidSendCommand+0x8e>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <Lcd_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    2188:	6b a1       	ldd	r22, Y+35	; 0x23
    218a:	7c a1       	ldd	r23, Y+36	; 0x24
    218c:	8d a1       	ldd	r24, Y+37	; 0x25
    218e:	9e a1       	ldd	r25, Y+38	; 0x26
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <Lcd_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6f a1       	ldd	r22, Y+39	; 0x27
    21a2:	78 a5       	ldd	r23, Y+40	; 0x28
    21a4:	89 a5       	ldd	r24, Y+41	; 0x29
    21a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9a a3       	std	Y+34, r25	; 0x22
    21c6:	89 a3       	std	Y+33, r24	; 0x21
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <Lcd_vidSendCommand+0xee>
    21ca:	88 ec       	ldi	r24, 0xC8	; 200
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	98 a3       	std	Y+32, r25	; 0x20
    21d0:	8f 8f       	std	Y+31, r24	; 0x1f
    21d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d4:	98 a1       	ldd	r25, Y+32	; 0x20
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <Lcd_vidSendCommand+0xdc>
    21da:	98 a3       	std	Y+32, r25	; 0x20
    21dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	89 a1       	ldd	r24, Y+33	; 0x21
    21e0:	9a a1       	ldd	r25, Y+34	; 0x22
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9a a3       	std	Y+34, r25	; 0x22
    21e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ea:	9a a1       	ldd	r25, Y+34	; 0x22
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <Lcd_vidSendCommand+0xd0>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <Lcd_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	6b a1       	ldd	r22, Y+35	; 0x23
    21f4:	7c a1       	ldd	r23, Y+36	; 0x24
    21f6:	8d a1       	ldd	r24, Y+37	; 0x25
    21f8:	9e a1       	ldd	r25, Y+38	; 0x26
    21fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9a a3       	std	Y+34, r25	; 0x22
    2204:	89 a3       	std	Y+33, r24	; 0x21
    2206:	89 a1       	ldd	r24, Y+33	; 0x21
    2208:	9a a1       	ldd	r25, Y+34	; 0x22
    220a:	9e 8f       	std	Y+30, r25	; 0x1e
    220c:	8d 8f       	std	Y+29, r24	; 0x1d
    220e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2210:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <Lcd_vidSendCommand+0x118>
    2216:	9e 8f       	std	Y+30, r25	; 0x1e
    2218:	8d 8f       	std	Y+29, r24	; 0x1d
    221a:	8a e0       	ldi	r24, 0x0A	; 10
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e0       	ldi	r26, 0x00	; 0
    2228:	b0 e4       	ldi	r27, 0x40	; 64
    222a:	89 8f       	std	Y+25, r24	; 0x19
    222c:	9a 8f       	std	Y+26, r25	; 0x1a
    222e:	ab 8f       	std	Y+27, r26	; 0x1b
    2230:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	69 8d       	ldd	r22, Y+25	; 0x19
    2234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8d 8b       	std	Y+21, r24	; 0x15
    224c:	9e 8b       	std	Y+22, r25	; 0x16
    224e:	af 8b       	std	Y+23, r26	; 0x17
    2250:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2252:	6d 89       	ldd	r22, Y+21	; 0x15
    2254:	7e 89       	ldd	r23, Y+22	; 0x16
    2256:	8f 89       	ldd	r24, Y+23	; 0x17
    2258:	98 8d       	ldd	r25, Y+24	; 0x18
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <Lcd_vidSendCommand+0x17a>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <Lcd_vidSendCommand+0x1f8>
	else if (__tmp > 65535)
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <Lcd_vidSendCommand+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	69 8d       	ldd	r22, Y+25	; 0x19
    228e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <Lcd_vidSendCommand+0x1da>
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	89 8b       	std	Y+17, r24	; 0x11
    22be:	89 89       	ldd	r24, Y+17	; 0x11
    22c0:	9a 89       	ldd	r25, Y+18	; 0x12
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <Lcd_vidSendCommand+0x1c8>
    22c6:	9a 8b       	std	Y+18, r25	; 0x12
    22c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9c 8b       	std	Y+20, r25	; 0x14
    22d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <Lcd_vidSendCommand+0x1bc>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <Lcd_vidSendCommand+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	8b 89       	ldd	r24, Y+19	; 0x13
    22f4:	9c 89       	ldd	r25, Y+20	; 0x14
    22f6:	98 8b       	std	Y+16, r25	; 0x10
    22f8:	8f 87       	std	Y+15, r24	; 0x0f
    22fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fc:	98 89       	ldd	r25, Y+16	; 0x10
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <Lcd_vidSendCommand+0x204>
    2302:	98 8b       	std	Y+16, r25	; 0x10
    2304:	8f 87       	std	Y+15, r24	; 0x0f
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e8       	ldi	r26, 0x80	; 128
    230c:	bf e3       	ldi	r27, 0x3F	; 63
    230e:	8b 87       	std	Y+11, r24	; 0x0b
    2310:	9c 87       	std	Y+12, r25	; 0x0c
    2312:	ad 87       	std	Y+13, r26	; 0x0d
    2314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8f 83       	std	Y+7, r24	; 0x07
    2330:	98 87       	std	Y+8, r25	; 0x08
    2332:	a9 87       	std	Y+9, r26	; 0x09
    2334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <Lcd_vidSendCommand+0x25e>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <Lcd_vidSendCommand+0x2dc>
	else if (__tmp > 65535)
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <Lcd_vidSendCommand+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <Lcd_vidSendCommand+0x2be>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <Lcd_vidSendCommand+0x2ac>
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <Lcd_vidSendCommand+0x2a0>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <Lcd_vidSendCommand+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <Lcd_vidSendCommand+0x2e8>
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
}
    23ea:	ab 96       	adiw	r28, 0x2b	; 43
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <Lcd_vidDiaplayChar>:

void Lcd_vidDiaplayChar(u8 copy_data)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	ab 97       	sbiw	r28, 0x2b	; 43
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_enuWriteChannelId(LCD_u8EN_PIN,DIO_u8LOW);
    2412:	8a e0       	ldi	r24, 0x0A	; 10
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RS_PIN,DIO_u8HIGH);
    241a:	88 e0       	ldi	r24, 0x08	; 8
    241c:	61 e0       	ldi	r22, 0x01	; 1
    241e:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8RW_PIN,DIO_u8LOW);
    2422:	89 e0       	ldi	r24, 0x09	; 9
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Lcd_prvSendData(copy_data);
    242a:	8b a5       	ldd	r24, Y+43	; 0x2b
    242c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Lcd_prvSendData>
	Applying_Falling_Edge_On_EN();
    2430:	8a e0       	ldi	r24, 0x0A	; 10
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e0       	ldi	r26, 0x00	; 0
    243e:	b0 e4       	ldi	r27, 0x40	; 64
    2440:	8f a3       	std	Y+39, r24	; 0x27
    2442:	98 a7       	std	Y+40, r25	; 0x28
    2444:	a9 a7       	std	Y+41, r26	; 0x29
    2446:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6f a1       	ldd	r22, Y+39	; 0x27
    244a:	78 a5       	ldd	r23, Y+40	; 0x28
    244c:	89 a5       	ldd	r24, Y+41	; 0x29
    244e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a ef       	ldi	r20, 0xFA	; 250
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8b a3       	std	Y+35, r24	; 0x23
    2462:	9c a3       	std	Y+36, r25	; 0x24
    2464:	ad a3       	std	Y+37, r26	; 0x25
    2466:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2468:	6b a1       	ldd	r22, Y+35	; 0x23
    246a:	7c a1       	ldd	r23, Y+36	; 0x24
    246c:	8d a1       	ldd	r24, Y+37	; 0x25
    246e:	9e a1       	ldd	r25, Y+38	; 0x26
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <Lcd_vidDiaplayChar+0x8e>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9a a3       	std	Y+34, r25	; 0x22
    2486:	89 a3       	std	Y+33, r24	; 0x21
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <Lcd_vidDiaplayChar+0x10c>
	else if (__tmp > 65535)
    248a:	6b a1       	ldd	r22, Y+35	; 0x23
    248c:	7c a1       	ldd	r23, Y+36	; 0x24
    248e:	8d a1       	ldd	r24, Y+37	; 0x25
    2490:	9e a1       	ldd	r25, Y+38	; 0x26
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <Lcd_vidDiaplayChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6f a1       	ldd	r22, Y+39	; 0x27
    24a4:	78 a5       	ldd	r23, Y+40	; 0x28
    24a6:	89 a5       	ldd	r24, Y+41	; 0x29
    24a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9a a3       	std	Y+34, r25	; 0x22
    24c8:	89 a3       	std	Y+33, r24	; 0x21
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <Lcd_vidDiaplayChar+0xee>
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	98 a3       	std	Y+32, r25	; 0x20
    24d2:	8f 8f       	std	Y+31, r24	; 0x1f
    24d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24d6:	98 a1       	ldd	r25, Y+32	; 0x20
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <Lcd_vidDiaplayChar+0xdc>
    24dc:	98 a3       	std	Y+32, r25	; 0x20
    24de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	89 a1       	ldd	r24, Y+33	; 0x21
    24e2:	9a a1       	ldd	r25, Y+34	; 0x22
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9a a3       	std	Y+34, r25	; 0x22
    24e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	89 a1       	ldd	r24, Y+33	; 0x21
    24ec:	9a a1       	ldd	r25, Y+34	; 0x22
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <Lcd_vidDiaplayChar+0xd0>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <Lcd_vidDiaplayChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6b a1       	ldd	r22, Y+35	; 0x23
    24f6:	7c a1       	ldd	r23, Y+36	; 0x24
    24f8:	8d a1       	ldd	r24, Y+37	; 0x25
    24fa:	9e a1       	ldd	r25, Y+38	; 0x26
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9a a3       	std	Y+34, r25	; 0x22
    2506:	89 a3       	std	Y+33, r24	; 0x21
    2508:	89 a1       	ldd	r24, Y+33	; 0x21
    250a:	9a a1       	ldd	r25, Y+34	; 0x22
    250c:	9e 8f       	std	Y+30, r25	; 0x1e
    250e:	8d 8f       	std	Y+29, r24	; 0x1d
    2510:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2512:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <Lcd_vidDiaplayChar+0x118>
    2518:	9e 8f       	std	Y+30, r25	; 0x1e
    251a:	8d 8f       	std	Y+29, r24	; 0x1d
    251c:	8a e0       	ldi	r24, 0x0A	; 10
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e0       	ldi	r26, 0x00	; 0
    252a:	b0 e4       	ldi	r27, 0x40	; 64
    252c:	89 8f       	std	Y+25, r24	; 0x19
    252e:	9a 8f       	std	Y+26, r25	; 0x1a
    2530:	ab 8f       	std	Y+27, r26	; 0x1b
    2532:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	69 8d       	ldd	r22, Y+25	; 0x19
    2536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8d 8b       	std	Y+21, r24	; 0x15
    254e:	9e 8b       	std	Y+22, r25	; 0x16
    2550:	af 8b       	std	Y+23, r26	; 0x17
    2552:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <Lcd_vidDiaplayChar+0x17a>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <Lcd_vidDiaplayChar+0x1f8>
	else if (__tmp > 65535)
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <Lcd_vidDiaplayChar+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	69 8d       	ldd	r22, Y+25	; 0x19
    2590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <Lcd_vidDiaplayChar+0x1da>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9a 8b       	std	Y+18, r25	; 0x12
    25be:	89 8b       	std	Y+17, r24	; 0x11
    25c0:	89 89       	ldd	r24, Y+17	; 0x11
    25c2:	9a 89       	ldd	r25, Y+18	; 0x12
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <Lcd_vidDiaplayChar+0x1c8>
    25c8:	9a 8b       	std	Y+18, r25	; 0x12
    25ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	9c 89       	ldd	r25, Y+20	; 0x14
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <Lcd_vidDiaplayChar+0x1bc>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <Lcd_vidDiaplayChar+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6d 89       	ldd	r22, Y+21	; 0x15
    25e2:	7e 89       	ldd	r23, Y+22	; 0x16
    25e4:	8f 89       	ldd	r24, Y+23	; 0x17
    25e6:	98 8d       	ldd	r25, Y+24	; 0x18
    25e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	98 8b       	std	Y+16, r25	; 0x10
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
    25fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fe:	98 89       	ldd	r25, Y+16	; 0x10
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <Lcd_vidDiaplayChar+0x204>
    2604:	98 8b       	std	Y+16, r25	; 0x10
    2606:	8f 87       	std	Y+15, r24	; 0x0f
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e8       	ldi	r26, 0x80	; 128
    260e:	bf e3       	ldi	r27, 0x3F	; 63
    2610:	8b 87       	std	Y+11, r24	; 0x0b
    2612:	9c 87       	std	Y+12, r25	; 0x0c
    2614:	ad 87       	std	Y+13, r26	; 0x0d
    2616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	6b 85       	ldd	r22, Y+11	; 0x0b
    261a:	7c 85       	ldd	r23, Y+12	; 0x0c
    261c:	8d 85       	ldd	r24, Y+13	; 0x0d
    261e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4a ef       	ldi	r20, 0xFA	; 250
    2626:	54 e4       	ldi	r21, 0x44	; 68
    2628:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	8f 83       	std	Y+7, r24	; 0x07
    2632:	98 87       	std	Y+8, r25	; 0x08
    2634:	a9 87       	std	Y+9, r26	; 0x09
    2636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	2c f4       	brge	.+10     	; 0x265a <Lcd_vidDiaplayChar+0x25e>
		__ticks = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	3f c0       	rjmp	.+126    	; 0x26d8 <Lcd_vidDiaplayChar+0x2dc>
	else if (__tmp > 65535)
    265a:	6f 81       	ldd	r22, Y+7	; 0x07
    265c:	78 85       	ldd	r23, Y+8	; 0x08
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	9a 85       	ldd	r25, Y+10	; 0x0a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	3f ef       	ldi	r19, 0xFF	; 255
    2666:	4f e7       	ldi	r20, 0x7F	; 127
    2668:	57 e4       	ldi	r21, 0x47	; 71
    266a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    266e:	18 16       	cp	r1, r24
    2670:	4c f5       	brge	.+82     	; 0x26c4 <Lcd_vidDiaplayChar+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	6b 85       	ldd	r22, Y+11	; 0x0b
    2674:	7c 85       	ldd	r23, Y+12	; 0x0c
    2676:	8d 85       	ldd	r24, Y+13	; 0x0d
    2678:	9e 85       	ldd	r25, Y+14	; 0x0e
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e2       	ldi	r20, 0x20	; 32
    2680:	51 e4       	ldi	r21, 0x41	; 65
    2682:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	8d 83       	std	Y+5, r24	; 0x05
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <Lcd_vidDiaplayChar+0x2be>
    269c:	88 ec       	ldi	r24, 0xC8	; 200
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9c 83       	std	Y+4, r25	; 0x04
    26a2:	8b 83       	std	Y+3, r24	; 0x03
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <Lcd_vidDiaplayChar+0x2ac>
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	69 f7       	brne	.-38     	; 0x269c <Lcd_vidDiaplayChar+0x2a0>
    26c2:	14 c0       	rjmp	.+40     	; 0x26ec <Lcd_vidDiaplayChar+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <Lcd_vidDiaplayChar+0x2e8>
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_u8DELAY_FOR_APPLYING_SEQ);
}
    26ec:	ab 96       	adiw	r28, 0x2b	; 43
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <Lcd_vidGoTo>:

void Lcd_vidGoTo(u8 Copy_u8Row , u8 Copy_u8Column)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	6e 97       	sbiw	r28, 0x1e	; 30
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	8d 8f       	std	Y+29, r24	; 0x1d
    2714:	6e 8f       	std	Y+30, r22	; 0x1e
	if(Copy_u8Row == 0)
    2716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2718:	88 23       	and	r24, r24
    271a:	09 f0       	breq	.+2      	; 0x271e <Lcd_vidGoTo+0x20>
    271c:	77 c0       	rjmp	.+238    	; 0x280c <Lcd_vidGoTo+0x10e>
	{
		Lcd_vidSendCommand((0x80)+(Copy_u8Column));
    271e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2720:	80 58       	subi	r24, 0x80	; 128
    2722:	0e 94 7d 10 	call	0x20fa	; 0x20fa <Lcd_vidSendCommand>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a0 e0       	ldi	r26, 0x00	; 0
    272c:	b0 e4       	ldi	r27, 0x40	; 64
    272e:	89 8f       	std	Y+25, r24	; 0x19
    2730:	9a 8f       	std	Y+26, r25	; 0x1a
    2732:	ab 8f       	std	Y+27, r26	; 0x1b
    2734:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	69 8d       	ldd	r22, Y+25	; 0x19
    2738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    273a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a ef       	ldi	r20, 0xFA	; 250
    2744:	54 e4       	ldi	r21, 0x44	; 68
    2746:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8d 8b       	std	Y+21, r24	; 0x15
    2750:	9e 8b       	std	Y+22, r25	; 0x16
    2752:	af 8b       	std	Y+23, r26	; 0x17
    2754:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2756:	6d 89       	ldd	r22, Y+21	; 0x15
    2758:	7e 89       	ldd	r23, Y+22	; 0x16
    275a:	8f 89       	ldd	r24, Y+23	; 0x17
    275c:	98 8d       	ldd	r25, Y+24	; 0x18
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <Lcd_vidGoTo+0x7a>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <Lcd_vidGoTo+0xf8>
	else if (__tmp > 65535)
    2778:	6d 89       	ldd	r22, Y+21	; 0x15
    277a:	7e 89       	ldd	r23, Y+22	; 0x16
    277c:	8f 89       	ldd	r24, Y+23	; 0x17
    277e:	98 8d       	ldd	r25, Y+24	; 0x18
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <Lcd_vidGoTo+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	69 8d       	ldd	r22, Y+25	; 0x19
    2792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9c 8b       	std	Y+20, r25	; 0x14
    27b6:	8b 8b       	std	Y+19, r24	; 0x13
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <Lcd_vidGoTo+0xda>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9a 8b       	std	Y+18, r25	; 0x12
    27c0:	89 8b       	std	Y+17, r24	; 0x11
    27c2:	89 89       	ldd	r24, Y+17	; 0x11
    27c4:	9a 89       	ldd	r25, Y+18	; 0x12
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <Lcd_vidGoTo+0xc8>
    27ca:	9a 8b       	std	Y+18, r25	; 0x12
    27cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8b 89       	ldd	r24, Y+19	; 0x13
    27da:	9c 89       	ldd	r25, Y+20	; 0x14
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <Lcd_vidGoTo+0xbc>
    27e0:	8f c0       	rjmp	.+286    	; 0x2900 <Lcd_vidGoTo+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6d 89       	ldd	r22, Y+21	; 0x15
    27e4:	7e 89       	ldd	r23, Y+22	; 0x16
    27e6:	8f 89       	ldd	r24, Y+23	; 0x17
    27e8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	98 8b       	std	Y+16, r25	; 0x10
    27fc:	8f 87       	std	Y+15, r24	; 0x0f
    27fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2800:	98 89       	ldd	r25, Y+16	; 0x10
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <Lcd_vidGoTo+0x104>
    2806:	98 8b       	std	Y+16, r25	; 0x10
    2808:	8f 87       	std	Y+15, r24	; 0x0f
    280a:	7a c0       	rjmp	.+244    	; 0x2900 <Lcd_vidGoTo+0x202>
		_delay_ms(2);
	}
	else if(Copy_u8Row == 1)
    280c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280e:	81 30       	cpi	r24, 0x01	; 1
    2810:	09 f0       	breq	.+2      	; 0x2814 <Lcd_vidGoTo+0x116>
    2812:	76 c0       	rjmp	.+236    	; 0x2900 <Lcd_vidGoTo+0x202>
	{
		Lcd_vidSendCommand((0xC0)+(Copy_u8Column));
    2814:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2816:	80 54       	subi	r24, 0x40	; 64
    2818:	0e 94 7d 10 	call	0x20fa	; 0x20fa <Lcd_vidSendCommand>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 e0       	ldi	r26, 0x00	; 0
    2822:	b0 e4       	ldi	r27, 0x40	; 64
    2824:	8b 87       	std	Y+11, r24	; 0x0b
    2826:	9c 87       	std	Y+12, r25	; 0x0c
    2828:	ad 87       	std	Y+13, r26	; 0x0d
    282a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8f 83       	std	Y+7, r24	; 0x07
    2846:	98 87       	std	Y+8, r25	; 0x08
    2848:	a9 87       	std	Y+9, r26	; 0x09
    284a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <Lcd_vidGoTo+0x170>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <Lcd_vidGoTo+0x1ee>
	else if (__tmp > 65535)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <Lcd_vidGoTo+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <Lcd_vidGoTo+0x1d0>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <Lcd_vidGoTo+0x1be>
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <Lcd_vidGoTo+0x1b2>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <Lcd_vidGoTo+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <Lcd_vidGoTo+0x1fa>
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    2900:	6e 96       	adiw	r28, 0x1e	; 30
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <Lcd_vidCreateCustomCharacter>:

void Lcd_vidCreateCustomCharacter (pu8 Pattern, u8 Location)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <Lcd_vidCreateCustomCharacter+0x6>
    2918:	00 d0       	rcall	.+0      	; 0x291a <Lcd_vidCreateCustomCharacter+0x8>
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	9b 83       	std	Y+3, r25	; 0x03
    2920:	8a 83       	std	Y+2, r24	; 0x02
    2922:	6c 83       	std	Y+4, r22	; 0x04
	u8 i=0;
    2924:	19 82       	std	Y+1, r1	; 0x01
	Lcd_vidSendCommand (0x40+(Location*8));     //Send the Address of CGRAM
    2926:	8c 81       	ldd	r24, Y+4	; 0x04
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	08 96       	adiw	r24, 0x08	; 8
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <Lcd_vidSendCommand>
	for (i=0; i<8; i++)
    293e:	19 82       	std	Y+1, r1	; 0x01
    2940:	0e c0       	rjmp	.+28     	; 0x295e <Lcd_vidCreateCustomCharacter+0x4c>
	{
		Lcd_vidDiaplayChar (Pattern [ i ] );         //Pass the bytes of pattern on LCD
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
    294c:	fc 01       	movw	r30, r24
    294e:	e2 0f       	add	r30, r18
    2950:	f3 1f       	adc	r31, r19
    2952:	80 81       	ld	r24, Z
    2954:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>

void Lcd_vidCreateCustomCharacter (pu8 Pattern, u8 Location)
{
	u8 i=0;
	Lcd_vidSendCommand (0x40+(Location*8));     //Send the Address of CGRAM
	for (i=0; i<8; i++)
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	8f 5f       	subi	r24, 0xFF	; 255
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	88 30       	cpi	r24, 0x08	; 8
    2962:	78 f3       	brcs	.-34     	; 0x2942 <Lcd_vidCreateCustomCharacter+0x30>
	{
		Lcd_vidDiaplayChar (Pattern [ i ] );         //Pass the bytes of pattern on LCD
	}
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <Lcd_vidDisplayNumber>:

void Lcd_vidDisplayNumber(u16 copy_number)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	00 d0       	rcall	.+0      	; 0x2978 <Lcd_vidDisplayNumber+0x6>
    2978:	00 d0       	rcall	.+0      	; 0x297a <Lcd_vidDisplayNumber+0x8>
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
	u16 Loc_value = 0;
    2982:	1a 82       	std	Y+2, r1	; 0x02
    2984:	19 82       	std	Y+1, r1	; 0x01
	if (copy_number==0)
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	21 f4       	brne	.+8      	; 0x2996 <Lcd_vidDisplayNumber+0x24>
	{
		Lcd_vidDiaplayChar('0');
    298e:	80 e3       	ldi	r24, 0x30	; 48
    2990:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
    2994:	1f c0       	rjmp	.+62     	; 0x29d4 <Lcd_vidDisplayNumber+0x62>
	}
	else if(copy_number!=0)
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	d9 f0       	breq	.+54     	; 0x29d4 <Lcd_vidDisplayNumber+0x62>
	{
		Loc_value=copy_number/10;
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	2a e0       	ldi	r18, 0x0A	; 10
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	b9 01       	movw	r22, r18
    29a8:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__udivmodhi4>
    29ac:	cb 01       	movw	r24, r22
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
		Lcd_vidDiaplayChar('0'+Loc_value);
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	80 5d       	subi	r24, 0xD0	; 208
    29b6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
		Loc_value=copy_number%10;
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	2a e0       	ldi	r18, 0x0A	; 10
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	b9 01       	movw	r22, r18
    29c4:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__udivmodhi4>
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
		Lcd_vidDiaplayChar('0'+Loc_value);
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	80 5d       	subi	r24, 0xD0	; 208
    29d0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
	}
}
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <Lcd_vidDiaplayString>:

void Lcd_vidDiaplayString(pu8 string)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <Lcd_vidDiaplayString+0x6>
    29e8:	0f 92       	push	r0
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	9b 83       	std	Y+3, r25	; 0x03
    29f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator=0;
    29f2:	19 82       	std	Y+1, r1	; 0x01
    29f4:	0e c0       	rjmp	.+28     	; 0x2a12 <Lcd_vidDiaplayString+0x30>
	while (string[iterator]!='\0')
	{
		Lcd_vidDiaplayChar(string[iterator]);
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	fc 01       	movw	r30, r24
    2a02:	e2 0f       	add	r30, r18
    2a04:	f3 1f       	adc	r31, r19
    2a06:	80 81       	ld	r24, Z
    2a08:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
		iterator ++;
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	8f 5f       	subi	r24, 0xFF	; 255
    2a10:	89 83       	std	Y+1, r24	; 0x01
}

void Lcd_vidDiaplayString(pu8 string)
{
	u8 iterator=0;
	while (string[iterator]!='\0')
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	e2 0f       	add	r30, r18
    2a20:	f3 1f       	adc	r31, r19
    2a22:	80 81       	ld	r24, Z
    2a24:	88 23       	and	r24, r24
    2a26:	39 f7       	brne	.-50     	; 0x29f6 <Lcd_vidDiaplayString+0x14>
	{
		Lcd_vidDiaplayChar(string[iterator]);
		iterator ++;
	}
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <Lcd_prvSendData>:
 * note:
 * in this function I use WriteChannelID not WritePort because
 * if the user want to connect the LCD pins in different place
 * */
static void Lcd_prvSendData(u8 copy_data)
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	0f 92       	push	r0
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	89 83       	std	Y+1, r24	; 0x01
	Dio_enuWriteChannelId(LCD_u8D0_PIN,GET_BIT(copy_data,0));
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	98 2f       	mov	r25, r24
    2a44:	91 70       	andi	r25, 0x01	; 1
    2a46:	80 e1       	ldi	r24, 0x10	; 16
    2a48:	69 2f       	mov	r22, r25
    2a4a:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D1_PIN,GET_BIT(copy_data,1));
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	86 95       	lsr	r24
    2a52:	98 2f       	mov	r25, r24
    2a54:	91 70       	andi	r25, 0x01	; 1
    2a56:	81 e1       	ldi	r24, 0x11	; 17
    2a58:	69 2f       	mov	r22, r25
    2a5a:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D2_PIN,GET_BIT(copy_data,2));
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	86 95       	lsr	r24
    2a62:	86 95       	lsr	r24
    2a64:	98 2f       	mov	r25, r24
    2a66:	91 70       	andi	r25, 0x01	; 1
    2a68:	82 e1       	ldi	r24, 0x12	; 18
    2a6a:	69 2f       	mov	r22, r25
    2a6c:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D3_PIN,GET_BIT(copy_data,3));
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	86 95       	lsr	r24
    2a74:	86 95       	lsr	r24
    2a76:	86 95       	lsr	r24
    2a78:	98 2f       	mov	r25, r24
    2a7a:	91 70       	andi	r25, 0x01	; 1
    2a7c:	83 e1       	ldi	r24, 0x13	; 19
    2a7e:	69 2f       	mov	r22, r25
    2a80:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D4_PIN,GET_BIT(copy_data,4));
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	82 95       	swap	r24
    2a88:	8f 70       	andi	r24, 0x0F	; 15
    2a8a:	98 2f       	mov	r25, r24
    2a8c:	91 70       	andi	r25, 0x01	; 1
    2a8e:	84 e1       	ldi	r24, 0x14	; 20
    2a90:	69 2f       	mov	r22, r25
    2a92:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D5_PIN,GET_BIT(copy_data,5));
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	82 95       	swap	r24
    2a9a:	86 95       	lsr	r24
    2a9c:	87 70       	andi	r24, 0x07	; 7
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	91 70       	andi	r25, 0x01	; 1
    2aa2:	85 e1       	ldi	r24, 0x15	; 21
    2aa4:	69 2f       	mov	r22, r25
    2aa6:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D6_PIN,GET_BIT(copy_data,6));
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	82 95       	swap	r24
    2aae:	86 95       	lsr	r24
    2ab0:	86 95       	lsr	r24
    2ab2:	83 70       	andi	r24, 0x03	; 3
    2ab4:	98 2f       	mov	r25, r24
    2ab6:	91 70       	andi	r25, 0x01	; 1
    2ab8:	86 e1       	ldi	r24, 0x16	; 22
    2aba:	69 2f       	mov	r22, r25
    2abc:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8D7_PIN,GET_BIT(copy_data,7));
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	99 27       	eor	r25, r25
    2ac8:	99 1f       	adc	r25, r25
    2aca:	87 e1       	ldi	r24, 0x17	; 23
    2acc:	69 2f       	mov	r22, r25
    2ace:	0e 94 d6 06 	call	0xdac	; 0xdac <Dio_enuWriteChannelId>

}
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <main>:
#include "../MCAL/Adc.h"
#include <avr/delay.h>
#include <stdlib.h>

int main (void)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	ac 97       	sbiw	r28, 0x2c	; 44
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
	f32 AdcResult=0;
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	a0 e0       	ldi	r26, 0x00	; 0
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	8c 8b       	std	Y+20, r24	; 0x14
    2af8:	9d 8b       	std	Y+21, r25	; 0x15
    2afa:	ae 8b       	std	Y+22, r26	; 0x16
    2afc:	bf 8b       	std	Y+23, r27	; 0x17
	u32 AnalogValue=0;
    2afe:	18 8a       	std	Y+16, r1	; 0x10
    2b00:	19 8a       	std	Y+17, r1	; 0x11
    2b02:	1a 8a       	std	Y+18, r1	; 0x12
    2b04:	1b 8a       	std	Y+19, r1	; 0x13
	u8 flag=0;
    2b06:	1f 86       	std	Y+15, r1	; 0x0f
	u8 buffer[20];
	Port_vidInit();
    2b08:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <Port_vidInit>
	Adc_vidInit();
    2b0c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <Adc_vidInit>
	Adc_vidControl(ADC_u8ENABLE);
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <Adc_vidControl>
	Lcd_vidInit();
    2b16:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Lcd_vidInit>
	Lcd_vidDiaplayString((pu8)"Volt");
    2b1a:	80 e6       	ldi	r24, 0x60	; 96
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Lcd_vidDiaplayString>
	while (1)
	{
		u8 switchbtn=0;
    2b22:	1c a6       	std	Y+44, r1	; 0x2c
		Adc_vidStartConversion();
    2b24:	0e 94 8b 06 	call	0xd16	; 0xd16 <Adc_vidStartConversion>
		AdcResult=Adc_u16GetResult();
    2b28:	0e 94 99 06 	call	0xd32	; 0xd32 <Adc_u16GetResult>
    2b2c:	cc 01       	movw	r24, r24
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8c 8b       	std	Y+20, r24	; 0x14
    2b40:	9d 8b       	std	Y+21, r25	; 0x15
    2b42:	ae 8b       	std	Y+22, r26	; 0x16
    2b44:	bf 8b       	std	Y+23, r27	; 0x17
		AnalogValue=(AdcResult* ((5000)/1024));
    2b46:	6c 89       	ldd	r22, Y+20	; 0x14
    2b48:	7d 89       	ldd	r23, Y+21	; 0x15
    2b4a:	8e 89       	ldd	r24, Y+22	; 0x16
    2b4c:	9f 89       	ldd	r25, Y+23	; 0x17
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	50 e4       	ldi	r21, 0x40	; 64
    2b56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	88 8b       	std	Y+16, r24	; 0x10
    2b6c:	99 8b       	std	Y+17, r25	; 0x11
    2b6e:	aa 8b       	std	Y+18, r26	; 0x12
    2b70:	bb 8b       	std	Y+19, r27	; 0x13
		itoa(AnalogValue,buffer,10);
    2b72:	88 89       	ldd	r24, Y+16	; 0x10
    2b74:	99 89       	ldd	r25, Y+17	; 0x11
    2b76:	9e 01       	movw	r18, r28
    2b78:	28 5e       	subi	r18, 0xE8	; 232
    2b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7c:	b9 01       	movw	r22, r18
    2b7e:	4a e0       	ldi	r20, 0x0A	; 10
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <itoa>
		Dio_enuReadChannelId(DIO_PIN_24,&switchbtn);
    2b86:	9e 01       	movw	r18, r28
    2b88:	24 5d       	subi	r18, 0xD4	; 212
    2b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8c:	88 e1       	ldi	r24, 0x18	; 24
    2b8e:	b9 01       	movw	r22, r18
    2b90:	0e 94 dd 07 	call	0xfba	; 0xfba <Dio_enuReadChannelId>
		if(switchbtn==0)
    2b94:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b96:	88 23       	and	r24, r24
    2b98:	09 f0       	breq	.+2      	; 0x2b9c <main+0xc2>
    2b9a:	76 c0       	rjmp	.+236    	; 0x2c88 <main+0x1ae>
		{
			flag^=1;
    2b9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	89 27       	eor	r24, r25
    2ba2:	8f 87       	std	Y+15, r24	; 0x0f
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a8 e4       	ldi	r26, 0x48	; 72
    2baa:	b3 e4       	ldi	r27, 0x43	; 67
    2bac:	8b 87       	std	Y+11, r24	; 0x0b
    2bae:	9c 87       	std	Y+12, r25	; 0x0c
    2bb0:	ad 87       	std	Y+13, r26	; 0x0d
    2bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	4a ef       	ldi	r20, 0xFA	; 250
    2bc2:	54 e4       	ldi	r21, 0x44	; 68
    2bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	8f 83       	std	Y+7, r24	; 0x07
    2bce:	98 87       	std	Y+8, r25	; 0x08
    2bd0:	a9 87       	std	Y+9, r26	; 0x09
    2bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd6:	78 85       	ldd	r23, Y+8	; 0x08
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2be8:	88 23       	and	r24, r24
    2bea:	2c f4       	brge	.+10     	; 0x2bf6 <main+0x11c>
		__ticks = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	9e 83       	std	Y+6, r25	; 0x06
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
    2bf4:	3f c0       	rjmp	.+126    	; 0x2c74 <main+0x19a>
	else if (__tmp > 65535)
    2bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf8:	78 85       	ldd	r23, Y+8	; 0x08
    2bfa:	89 85       	ldd	r24, Y+9	; 0x09
    2bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	3f ef       	ldi	r19, 0xFF	; 255
    2c02:	4f e7       	ldi	r20, 0x7F	; 127
    2c04:	57 e4       	ldi	r21, 0x47	; 71
    2c06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c0a:	18 16       	cp	r1, r24
    2c0c:	4c f5       	brge	.+82     	; 0x2c60 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e2       	ldi	r20, 0x20	; 32
    2c1c:	51 e4       	ldi	r21, 0x41	; 65
    2c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9e 83       	std	Y+6, r25	; 0x06
    2c34:	8d 83       	std	Y+5, r24	; 0x05
    2c36:	0f c0       	rjmp	.+30     	; 0x2c56 <main+0x17c>
    2c38:	88 ec       	ldi	r24, 0xC8	; 200
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9c 83       	std	Y+4, r25	; 0x04
    2c3e:	8b 83       	std	Y+3, r24	; 0x03
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <main+0x16a>
    2c48:	9c 83       	std	Y+4, r25	; 0x04
    2c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c56:	8d 81       	ldd	r24, Y+5	; 0x05
    2c58:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	69 f7       	brne	.-38     	; 0x2c38 <main+0x15e>
    2c5e:	14 c0       	rjmp	.+40     	; 0x2c88 <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c60:	6f 81       	ldd	r22, Y+7	; 0x07
    2c62:	78 85       	ldd	r23, Y+8	; 0x08
    2c64:	89 85       	ldd	r24, Y+9	; 0x09
    2c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	9e 83       	std	Y+6, r25	; 0x06
    2c72:	8d 83       	std	Y+5, r24	; 0x05
    2c74:	8d 81       	ldd	r24, Y+5	; 0x05
    2c76:	9e 81       	ldd	r25, Y+6	; 0x06
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <main+0x1a6>
    2c84:	9a 83       	std	Y+2, r25	; 0x02
    2c86:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
		}
		if(flag==0)
    2c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c8a:	88 23       	and	r24, r24
    2c8c:	89 f4       	brne	.+34     	; 0x2cb0 <main+0x1d6>
		{
			Lcd_vidGoTo(1,8);
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	68 e0       	ldi	r22, 0x08	; 8
    2c92:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Lcd_vidGoTo>
			Lcd_vidDiaplayString(buffer);
    2c96:	ce 01       	movw	r24, r28
    2c98:	48 96       	adiw	r24, 0x18	; 24
    2c9a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Lcd_vidDiaplayString>
			Lcd_vidGoTo(1,14);
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	6e e0       	ldi	r22, 0x0E	; 14
    2ca2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Lcd_vidGoTo>
			Lcd_vidDiaplayString("mv");
    2ca6:	85 e6       	ldi	r24, 0x65	; 101
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Lcd_vidDiaplayString>
    2cae:	39 cf       	rjmp	.-398    	; 0x2b22 <main+0x48>
		}
		else
		{
			Lcd_vidGoTo(1,8);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	68 e0       	ldi	r22, 0x08	; 8
    2cb4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Lcd_vidGoTo>
			Lcd_vidDiaplayChar(buffer[0]);
    2cb8:	88 8d       	ldd	r24, Y+24	; 0x18
    2cba:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar('.');
    2cbe:	8e e2       	ldi	r24, 0x2E	; 46
    2cc0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(buffer[1]);
    2cc4:	89 8d       	ldd	r24, Y+25	; 0x19
    2cc6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(buffer[2]);
    2cca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ccc:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
			Lcd_vidDiaplayChar(buffer[3]);
    2cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd2:	0e 94 fe 11 	call	0x23fc	; 0x23fc <Lcd_vidDiaplayChar>
			Lcd_vidGoTo(1,14);
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	6e e0       	ldi	r22, 0x0E	; 14
    2cda:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Lcd_vidGoTo>
			Lcd_vidDiaplayString("  ");
    2cde:	88 e6       	ldi	r24, 0x68	; 104
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Lcd_vidDiaplayString>
			Lcd_vidGoTo(1,14);
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	6e e0       	ldi	r22, 0x0E	; 14
    2cea:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Lcd_vidGoTo>
			Lcd_vidDiaplayString("v");
    2cee:	8b e6       	ldi	r24, 0x6B	; 107
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Lcd_vidDiaplayString>
    2cf6:	15 cf       	rjmp	.-470    	; 0x2b22 <main+0x48>

00002cf8 <__udivmodhi4>:
    2cf8:	aa 1b       	sub	r26, r26
    2cfa:	bb 1b       	sub	r27, r27
    2cfc:	51 e1       	ldi	r21, 0x11	; 17
    2cfe:	07 c0       	rjmp	.+14     	; 0x2d0e <__udivmodhi4_ep>

00002d00 <__udivmodhi4_loop>:
    2d00:	aa 1f       	adc	r26, r26
    2d02:	bb 1f       	adc	r27, r27
    2d04:	a6 17       	cp	r26, r22
    2d06:	b7 07       	cpc	r27, r23
    2d08:	10 f0       	brcs	.+4      	; 0x2d0e <__udivmodhi4_ep>
    2d0a:	a6 1b       	sub	r26, r22
    2d0c:	b7 0b       	sbc	r27, r23

00002d0e <__udivmodhi4_ep>:
    2d0e:	88 1f       	adc	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	5a 95       	dec	r21
    2d14:	a9 f7       	brne	.-22     	; 0x2d00 <__udivmodhi4_loop>
    2d16:	80 95       	com	r24
    2d18:	90 95       	com	r25
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	08 95       	ret

00002d20 <__prologue_saves__>:
    2d20:	2f 92       	push	r2
    2d22:	3f 92       	push	r3
    2d24:	4f 92       	push	r4
    2d26:	5f 92       	push	r5
    2d28:	6f 92       	push	r6
    2d2a:	7f 92       	push	r7
    2d2c:	8f 92       	push	r8
    2d2e:	9f 92       	push	r9
    2d30:	af 92       	push	r10
    2d32:	bf 92       	push	r11
    2d34:	cf 92       	push	r12
    2d36:	df 92       	push	r13
    2d38:	ef 92       	push	r14
    2d3a:	ff 92       	push	r15
    2d3c:	0f 93       	push	r16
    2d3e:	1f 93       	push	r17
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	ca 1b       	sub	r28, r26
    2d4a:	db 0b       	sbc	r29, r27
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	09 94       	ijmp

00002d58 <__epilogue_restores__>:
    2d58:	2a 88       	ldd	r2, Y+18	; 0x12
    2d5a:	39 88       	ldd	r3, Y+17	; 0x11
    2d5c:	48 88       	ldd	r4, Y+16	; 0x10
    2d5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d6e:	df 80       	ldd	r13, Y+7	; 0x07
    2d70:	ee 80       	ldd	r14, Y+6	; 0x06
    2d72:	fd 80       	ldd	r15, Y+5	; 0x05
    2d74:	0c 81       	ldd	r16, Y+4	; 0x04
    2d76:	1b 81       	ldd	r17, Y+3	; 0x03
    2d78:	aa 81       	ldd	r26, Y+2	; 0x02
    2d7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d7c:	ce 0f       	add	r28, r30
    2d7e:	d1 1d       	adc	r29, r1
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	ed 01       	movw	r28, r26
    2d8c:	08 95       	ret

00002d8e <itoa>:
    2d8e:	fb 01       	movw	r30, r22
    2d90:	9f 01       	movw	r18, r30
    2d92:	e8 94       	clt
    2d94:	42 30       	cpi	r20, 0x02	; 2
    2d96:	c4 f0       	brlt	.+48     	; 0x2dc8 <itoa+0x3a>
    2d98:	45 32       	cpi	r20, 0x25	; 37
    2d9a:	b4 f4       	brge	.+44     	; 0x2dc8 <itoa+0x3a>
    2d9c:	4a 30       	cpi	r20, 0x0A	; 10
    2d9e:	29 f4       	brne	.+10     	; 0x2daa <itoa+0x1c>
    2da0:	97 fb       	bst	r25, 7
    2da2:	1e f4       	brtc	.+6      	; 0x2daa <itoa+0x1c>
    2da4:	90 95       	com	r25
    2da6:	81 95       	neg	r24
    2da8:	9f 4f       	sbci	r25, 0xFF	; 255
    2daa:	64 2f       	mov	r22, r20
    2dac:	77 27       	eor	r23, r23
    2dae:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__udivmodhi4>
    2db2:	80 5d       	subi	r24, 0xD0	; 208
    2db4:	8a 33       	cpi	r24, 0x3A	; 58
    2db6:	0c f0       	brlt	.+2      	; 0x2dba <itoa+0x2c>
    2db8:	89 5d       	subi	r24, 0xD9	; 217
    2dba:	81 93       	st	Z+, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	a1 f7       	brne	.-24     	; 0x2daa <itoa+0x1c>
    2dc2:	16 f4       	brtc	.+4      	; 0x2dc8 <itoa+0x3a>
    2dc4:	5d e2       	ldi	r21, 0x2D	; 45
    2dc6:	51 93       	st	Z+, r21
    2dc8:	10 82       	st	Z, r1
    2dca:	c9 01       	movw	r24, r18
    2dcc:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <strrev>

00002dd0 <strrev>:
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	67 2f       	mov	r22, r23
    2dd6:	71 91       	ld	r23, Z+
    2dd8:	77 23       	and	r23, r23
    2dda:	e1 f7       	brne	.-8      	; 0x2dd4 <strrev+0x4>
    2ddc:	32 97       	sbiw	r30, 0x02	; 2
    2dde:	04 c0       	rjmp	.+8      	; 0x2de8 <strrev+0x18>
    2de0:	7c 91       	ld	r23, X
    2de2:	6d 93       	st	X+, r22
    2de4:	70 83       	st	Z, r23
    2de6:	62 91       	ld	r22, -Z
    2de8:	ae 17       	cp	r26, r30
    2dea:	bf 07       	cpc	r27, r31
    2dec:	c8 f3       	brcs	.-14     	; 0x2de0 <strrev+0x10>
    2dee:	08 95       	ret

00002df0 <_exit>:
    2df0:	f8 94       	cli

00002df2 <__stop_program>:
    2df2:	ff cf       	rjmp	.-2      	; 0x2df2 <__stop_program>

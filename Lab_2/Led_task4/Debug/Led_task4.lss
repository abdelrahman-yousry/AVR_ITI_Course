
Led_task4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000026fe  00002772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ae8  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fc6  00000000  00000000  00004264  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000522a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000536a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000054da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000800e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000091a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ce 0c 	call	0x199c	; 0x199c <main>
      7a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 46 13 	jmp	0x268c	; 0x268c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 46 13 	jmp	0x268c	; 0x268c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Dio_enuWriteChannelId>:
  Write on pin
  take two args Copy_u8ChannedId and Copy_u8Level
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuWriteChannelId(u8 Copy_u8ChannedId,u8 Copy_u8Level)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8c 83       	std	Y+4, r24	; 0x04
     b4c:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port = Copy_u8ChannedId/8 ;
     b52:	8c 81       	ldd	r24, Y+4	; 0x04
     b54:	86 95       	lsr	r24
     b56:	86 95       	lsr	r24
     b58:	86 95       	lsr	r24
     b5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Pin = (Copy_u8ChannedId%8) ;
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	87 70       	andi	r24, 0x07	; 7
     b60:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8ChannedId<=32)
     b62:	8c 81       	ldd	r24, Y+4	; 0x04
     b64:	81 32       	cpi	r24, 0x21	; 33
     b66:	08 f0       	brcs	.+2      	; 0xb6a <Dio_enuWriteChannelId+0x34>
     b68:	e1 c0       	rjmp	.+450    	; 0xd2c <Dio_enuWriteChannelId+0x1f6>
	{
		switch (Loc_u8Port)
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3f 83       	std	Y+7, r19	; 0x07
     b72:	2e 83       	std	Y+6, r18	; 0x06
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <Dio_enuWriteChannelId+0x4a>
     b7e:	47 c0       	rjmp	.+142    	; 0xc0e <Dio_enuWriteChannelId+0xd8>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <Dio_enuWriteChannelId+0x5e>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <Dio_enuWriteChannelId+0x78>
     b92:	ce c0       	rjmp	.+412    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <Dio_enuWriteChannelId+0x6a>
     b9e:	67 c0       	rjmp	.+206    	; 0xc6e <Dio_enuWriteChannelId+0x138>
     ba0:	8e 81       	ldd	r24, Y+6	; 0x06
     ba2:	9f 81       	ldd	r25, Y+7	; 0x07
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <Dio_enuWriteChannelId+0x76>
     baa:	91 c0       	rjmp	.+290    	; 0xcce <Dio_enuWriteChannelId+0x198>
     bac:	c1 c0       	rjmp	.+386    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
		{
		case PORT_A:

			if(Copy_u8Level==DIO_u8HIGH)
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <Dio_enuWriteChannelId+0xa6>
			{
				SET_BIT(PORTA,Loc_u8Pin);
     bb4:	ab e3       	ldi	r26, 0x3B	; 59
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	eb e3       	ldi	r30, 0x3B	; 59
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Dio_enuWriteChannelId+0x9c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <Dio_enuWriteChannelId+0x98>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	aa c0       	rjmp	.+340    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     bdc:	8d 81       	ldd	r24, Y+5	; 0x05
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <Dio_enuWriteChannelId+0xae>
     be2:	a6 c0       	rjmp	.+332    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTA,Loc_u8Pin);
     be4:	ab e3       	ldi	r26, 0x3B	; 59
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	eb e3       	ldi	r30, 0x3B	; 59
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <Dio_enuWriteChannelId+0xcc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <Dio_enuWriteChannelId+0xc8>
     c06:	80 95       	com	r24
     c08:	84 23       	and	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	91 c0       	rjmp	.+290    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}

			break;
		case PORT_B:
			if(Copy_u8Level==DIO_u8HIGH)
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	a1 f4       	brne	.+40     	; 0xc3c <Dio_enuWriteChannelId+0x106>
			{
				SET_BIT(PORTB,Loc_u8Pin);
     c14:	a8 e3       	ldi	r26, 0x38	; 56
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e8 e3       	ldi	r30, 0x38	; 56
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <Dio_enuWriteChannelId+0xfc>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <Dio_enuWriteChannelId+0xf8>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	7a c0       	rjmp	.+244    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <Dio_enuWriteChannelId+0x10e>
     c42:	76 c0       	rjmp	.+236    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTB,Loc_u8Pin);
     c44:	a8 e3       	ldi	r26, 0x38	; 56
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 e3       	ldi	r30, 0x38	; 56
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <Dio_enuWriteChannelId+0x12c>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <Dio_enuWriteChannelId+0x128>
     c66:	80 95       	com	r24
     c68:	84 23       	and	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	61 c0       	rjmp	.+194    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_C:
			if(Copy_u8Level==DIO_u8HIGH)
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <Dio_enuWriteChannelId+0x166>
			{
				SET_BIT(PORTC,Loc_u8Pin);
     c74:	a5 e3       	ldi	r26, 0x35	; 53
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e5 e3       	ldi	r30, 0x35	; 53
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <Dio_enuWriteChannelId+0x15c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <Dio_enuWriteChannelId+0x158>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	4a c0       	rjmp	.+148    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	88 23       	and	r24, r24
     ca0:	09 f0       	breq	.+2      	; 0xca4 <Dio_enuWriteChannelId+0x16e>
     ca2:	46 c0       	rjmp	.+140    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTC,Loc_u8Pin);
     ca4:	a5 e3       	ldi	r26, 0x35	; 53
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e5 e3       	ldi	r30, 0x35	; 53
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <Dio_enuWriteChannelId+0x18c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <Dio_enuWriteChannelId+0x188>
     cc6:	80 95       	com	r24
     cc8:	84 23       	and	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	31 c0       	rjmp	.+98     	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_D:
			if(Copy_u8Level==DIO_u8HIGH)
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	a1 f4       	brne	.+40     	; 0xcfc <Dio_enuWriteChannelId+0x1c6>
			{
				SET_BIT(PORTD,Loc_u8Pin);
     cd4:	a2 e3       	ldi	r26, 0x32	; 50
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <Dio_enuWriteChannelId+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <Dio_enuWriteChannelId+0x1b8>
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	1a c0       	rjmp	.+52     	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	88 23       	and	r24, r24
     d00:	b9 f4       	brne	.+46     	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTD,Loc_u8Pin);
     d02:	a2 e3       	ldi	r26, 0x32	; 50
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e2 e3       	ldi	r30, 0x32	; 50
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <Dio_enuWriteChannelId+0x1ea>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <Dio_enuWriteChannelId+0x1e6>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =  Dio_enuPortError ;
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	8b 83       	std	Y+3, r24	; 0x03

	}
	return Loc_enuReturnStatus;
     d30:	8b 81       	ldd	r24, Y+3	; 0x03

}
     d32:	27 96       	adiw	r28, 0x07	; 7
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <Dio_enuReadChannelId>:
  Read from pin
  take two args Copy_u8ChannedId and Add_pu8ChannelLevel
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadChannelId(u8 Copy_u8ChannedId, pu8 Add_pu8ChannelLevel)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	28 97       	sbiw	r28, 0x08	; 8
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	8c 83       	std	Y+4, r24	; 0x04
     d5a:	7e 83       	std	Y+6, r23	; 0x06
     d5c:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	81 32       	cpi	r24, 0x21	; 33
     d66:	08 f0       	brcs	.+2      	; 0xd6a <Dio_enuReadChannelId+0x26>
     d68:	79 c0       	rjmp	.+242    	; 0xe5c <Dio_enuReadChannelId+0x118>
	{
		u8 Loc_u8Port = (Copy_u8ChannedId/8) ;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	86 95       	lsr	r24
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = (Copy_u8ChannedId%8)  ;
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	87 70       	andi	r24, 0x07	; 7
     d78:	89 83       	std	Y+1, r24	; 0x01

		switch (Loc_u8Port)
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	38 87       	std	Y+8, r19	; 0x08
     d82:	2f 83       	std	Y+7, r18	; 0x07
     d84:	4f 81       	ldd	r20, Y+7	; 0x07
     d86:	58 85       	ldd	r21, Y+8	; 0x08
     d88:	41 30       	cpi	r20, 0x01	; 1
     d8a:	51 05       	cpc	r21, r1
     d8c:	59 f1       	breq	.+86     	; 0xde4 <Dio_enuReadChannelId+0xa0>
     d8e:	8f 81       	ldd	r24, Y+7	; 0x07
     d90:	98 85       	ldd	r25, Y+8	; 0x08
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	34 f4       	brge	.+12     	; 0xda4 <Dio_enuReadChannelId+0x60>
     d98:	2f 81       	ldd	r18, Y+7	; 0x07
     d9a:	38 85       	ldd	r19, Y+8	; 0x08
     d9c:	21 15       	cp	r18, r1
     d9e:	31 05       	cpc	r19, r1
     da0:	69 f0       	breq	.+26     	; 0xdbc <Dio_enuReadChannelId+0x78>
     da2:	5e c0       	rjmp	.+188    	; 0xe60 <Dio_enuReadChannelId+0x11c>
     da4:	4f 81       	ldd	r20, Y+7	; 0x07
     da6:	58 85       	ldd	r21, Y+8	; 0x08
     da8:	42 30       	cpi	r20, 0x02	; 2
     daa:	51 05       	cpc	r21, r1
     dac:	79 f1       	breq	.+94     	; 0xe0c <Dio_enuReadChannelId+0xc8>
     dae:	8f 81       	ldd	r24, Y+7	; 0x07
     db0:	98 85       	ldd	r25, Y+8	; 0x08
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <Dio_enuReadChannelId+0x76>
     db8:	3d c0       	rjmp	.+122    	; 0xe34 <Dio_enuReadChannelId+0xf0>
     dba:	52 c0       	rjmp	.+164    	; 0xe60 <Dio_enuReadChannelId+0x11c>
		{
		case PORT_A:
			*Add_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
     dbc:	e9 e3       	ldi	r30, 0x39	; 57
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <Dio_enuReadChannelId+0x90>
     dd0:	55 95       	asr	r21
     dd2:	47 95       	ror	r20
     dd4:	8a 95       	dec	r24
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <Dio_enuReadChannelId+0x8c>
     dd8:	ca 01       	movw	r24, r20
     dda:	81 70       	andi	r24, 0x01	; 1
     ddc:	ed 81       	ldd	r30, Y+5	; 0x05
     dde:	fe 81       	ldd	r31, Y+6	; 0x06
     de0:	80 83       	st	Z, r24
     de2:	3e c0       	rjmp	.+124    	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break;
		case PORT_B:
			*Add_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
     de4:	e6 e3       	ldi	r30, 0x36	; 54
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a9 01       	movw	r20, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <Dio_enuReadChannelId+0xb8>
     df8:	55 95       	asr	r21
     dfa:	47 95       	ror	r20
     dfc:	8a 95       	dec	r24
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <Dio_enuReadChannelId+0xb4>
     e00:	ca 01       	movw	r24, r20
     e02:	81 70       	andi	r24, 0x01	; 1
     e04:	ed 81       	ldd	r30, Y+5	; 0x05
     e06:	fe 81       	ldd	r31, Y+6	; 0x06
     e08:	80 83       	st	Z, r24
     e0a:	2a c0       	rjmp	.+84     	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_C:
			*Add_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
     e0c:	e3 e3       	ldi	r30, 0x33	; 51
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <Dio_enuReadChannelId+0xe0>
     e20:	55 95       	asr	r21
     e22:	47 95       	ror	r20
     e24:	8a 95       	dec	r24
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <Dio_enuReadChannelId+0xdc>
     e28:	ca 01       	movw	r24, r20
     e2a:	81 70       	andi	r24, 0x01	; 1
     e2c:	ed 81       	ldd	r30, Y+5	; 0x05
     e2e:	fe 81       	ldd	r31, Y+6	; 0x06
     e30:	80 83       	st	Z, r24
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_D:
			*Add_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
     e34:	e0 e3       	ldi	r30, 0x30	; 48
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <Dio_enuReadChannelId+0x108>
     e48:	55 95       	asr	r21
     e4a:	47 95       	ror	r20
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <Dio_enuReadChannelId+0x104>
     e50:	ca 01       	movw	r24, r20
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	ed 81       	ldd	r30, Y+5	; 0x05
     e56:	fe 81       	ldd	r31, Y+6	; 0x06
     e58:	80 83       	st	Z, r24
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
     e60:	8b 81       	ldd	r24, Y+3	; 0x03

}
     e62:	28 96       	adiw	r28, 0x08	; 8
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <Dio_enuWritePort>:
  take two args Copy_u8PortID and Copy_u8Level
  return Dio_tenuErrorStatus
 */

Dio_tenuErrorStatus Dio_enuWritePort(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <Dio_enuWritePort+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <Dio_enuWritePort+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	8a 83       	std	Y+2, r24	; 0x02
     e84:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID<=PORT_SIZE)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	98 f5       	brcc	.+102    	; 0xef6 <Dio_enuWritePort+0x82>
	{
		switch (Copy_u8PortID)
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	3d 83       	std	Y+5, r19	; 0x05
     e98:	2c 83       	std	Y+4, r18	; 0x04
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	91 05       	cpc	r25, r1
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <Dio_enuWritePort+0x64>
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	2c f4       	brge	.+10     	; 0xeb8 <Dio_enuWritePort+0x44>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	61 f0       	breq	.+24     	; 0xece <Dio_enuWritePort+0x5a>
     eb6:	21 c0       	rjmp	.+66     	; 0xefa <Dio_enuWritePort+0x86>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	22 30       	cpi	r18, 0x02	; 2
     ebe:	31 05       	cpc	r19, r1
     ec0:	81 f0       	breq	.+32     	; 0xee2 <Dio_enuWritePort+0x6e>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	91 05       	cpc	r25, r1
     eca:	81 f0       	breq	.+32     	; 0xeec <Dio_enuWritePort+0x78>
     ecc:	16 c0       	rjmp	.+44     	; 0xefa <Dio_enuWritePort+0x86>
		{
		case PORT_A:
			ASSIGN_REG(PORTA,Copy_u8Value);
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	80 83       	st	Z, r24
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <Dio_enuWritePort+0x86>
			break;
		case PORT_B:
			ASSIGN_REG(PORTB,Copy_u8Value);
     ed8:	e8 e3       	ldi	r30, 0x38	; 56
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	80 83       	st	Z, r24
     ee0:	0c c0       	rjmp	.+24     	; 0xefa <Dio_enuWritePort+0x86>
			break ;
		case PORT_C:
			ASSIGN_REG(PORTC,Copy_u8Value);
     ee2:	e5 e3       	ldi	r30, 0x35	; 53
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	80 83       	st	Z, r24
     eea:	07 c0       	rjmp	.+14     	; 0xefa <Dio_enuWritePort+0x86>
			break ;
		case PORT_D:
			ASSIGN_REG(PORTD,Copy_u8Value);
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	80 83       	st	Z, r24
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <Dio_enuWritePort+0x86>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPortError;
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <Dio_enuReadPort>:
  Read from port
  take two args Copy_u8PortID and Add_pu8PortValue
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadPort(u8 Copy_u8PortId, pu8 Add_pu8PortValue)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <Dio_enuReadPort+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <Dio_enuReadPort+0x8>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <Dio_enuReadPort+0xa>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	7c 83       	std	Y+4, r23	; 0x04
     f1e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<=PORT_SIZE)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	d8 f5       	brcc	.+118    	; 0xfa0 <Dio_enuReadPort+0x94>
	{

		switch (Copy_u8PortId)
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	e1 f0       	breq	.+56     	; 0xf76 <Dio_enuReadPort+0x6a>
     f3e:	2d 81       	ldd	r18, Y+5	; 0x05
     f40:	3e 81       	ldd	r19, Y+6	; 0x06
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	2c f4       	brge	.+10     	; 0xf52 <Dio_enuReadPort+0x46>
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	61 f0       	breq	.+24     	; 0xf68 <Dio_enuReadPort+0x5c>
     f50:	29 c0       	rjmp	.+82     	; 0xfa4 <Dio_enuReadPort+0x98>
     f52:	2d 81       	ldd	r18, Y+5	; 0x05
     f54:	3e 81       	ldd	r19, Y+6	; 0x06
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	a1 f0       	breq	.+40     	; 0xf84 <Dio_enuReadPort+0x78>
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	b1 f0       	breq	.+44     	; 0xf92 <Dio_enuReadPort+0x86>
     f66:	1e c0       	rjmp	.+60     	; 0xfa4 <Dio_enuReadPort+0x98>
		{
		case PORT_A:
			*Add_pu8PortValue = PORTA;
     f68:	eb e3       	ldi	r30, 0x3B	; 59
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	eb 81       	ldd	r30, Y+3	; 0x03
     f70:	fc 81       	ldd	r31, Y+4	; 0x04
     f72:	80 83       	st	Z, r24
     f74:	17 c0       	rjmp	.+46     	; 0xfa4 <Dio_enuReadPort+0x98>
			break;
		case PORT_B:
			*Add_pu8PortValue = PORTB;
     f76:	e8 e3       	ldi	r30, 0x38	; 56
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	eb 81       	ldd	r30, Y+3	; 0x03
     f7e:	fc 81       	ldd	r31, Y+4	; 0x04
     f80:	80 83       	st	Z, r24
     f82:	10 c0       	rjmp	.+32     	; 0xfa4 <Dio_enuReadPort+0x98>
			break ;
		case PORT_C:
			*Add_pu8PortValue = PORTC;
     f84:	e5 e3       	ldi	r30, 0x35	; 53
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	eb 81       	ldd	r30, Y+3	; 0x03
     f8c:	fc 81       	ldd	r31, Y+4	; 0x04
     f8e:	80 83       	st	Z, r24
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <Dio_enuReadPort+0x98>
			break ;
		case PORT_D:
			*Add_pu8PortValue =PORTD;
     f92:	e2 e3       	ldi	r30, 0x32	; 50
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	eb 81       	ldd	r30, Y+3	; 0x03
     f9a:	fc 81       	ldd	r31, Y+4	; 0x04
     f9c:	80 83       	st	Z, r24
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <Dio_enuReadPort+0x98>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01

}
     fa6:	26 96       	adiw	r28, 0x06	; 6
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <Dio_enuFlipChannel>:
  Toggle Pin
  take one arg Copy_u8ChannedId
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannedId)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <Dio_enuFlipChannel+0x6>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <Dio_enuFlipChannel+0x8>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <Dio_enuFlipChannel+0xa>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	81 32       	cpi	r24, 0x21	; 33
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <Dio_enuFlipChannel+0x1c>
     fd2:	77 c0       	rjmp	.+238    	; 0x10c2 <Dio_enuFlipChannel+0x10a>
	{
		u8 Loc_u8Port= Copy_u8ChannedId/8 ;
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	86 95       	lsr	r24
     fd8:	86 95       	lsr	r24
     fda:	86 95       	lsr	r24
     fdc:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = Copy_u8ChannedId%8 ;
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	87 70       	andi	r24, 0x07	; 7
     fe2:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8Port)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3e 83       	std	Y+6, r19	; 0x06
     fec:	2d 83       	std	Y+5, r18	; 0x05
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	91 05       	cpc	r25, r1
     ff6:	49 f1       	breq	.+82     	; 0x104a <Dio_enuFlipChannel+0x92>
     ff8:	2d 81       	ldd	r18, Y+5	; 0x05
     ffa:	3e 81       	ldd	r19, Y+6	; 0x06
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	2c f4       	brge	.+10     	; 0x100c <Dio_enuFlipChannel+0x54>
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	9e 81       	ldd	r25, Y+6	; 0x06
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	61 f0       	breq	.+24     	; 0x1022 <Dio_enuFlipChannel+0x6a>
    100a:	5d c0       	rjmp	.+186    	; 0x10c6 <Dio_enuFlipChannel+0x10e>
    100c:	2d 81       	ldd	r18, Y+5	; 0x05
    100e:	3e 81       	ldd	r19, Y+6	; 0x06
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	71 f1       	breq	.+92     	; 0x1072 <Dio_enuFlipChannel+0xba>
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	e9 f1       	breq	.+122    	; 0x109a <Dio_enuFlipChannel+0xe2>
    1020:	52 c0       	rjmp	.+164    	; 0x10c6 <Dio_enuFlipChannel+0x10e>
		{
		case PORT_A:
			TGL_BIT(PORTA,Loc_u8Pin);
    1022:	ab e3       	ldi	r26, 0x3B	; 59
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	eb e3       	ldi	r30, 0x3B	; 59
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <Dio_enuFlipChannel+0x88>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <Dio_enuFlipChannel+0x84>
    1044:	84 27       	eor	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	3e c0       	rjmp	.+124    	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break;
		case PORT_B:
			TGL_BIT(PORTA,Loc_u8Pin);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <Dio_enuFlipChannel+0xb0>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <Dio_enuFlipChannel+0xac>
    106c:	84 27       	eor	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	2a c0       	rjmp	.+84     	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_C:
			TGL_BIT(PORTA,Loc_u8Pin);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <Dio_enuFlipChannel+0xd8>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <Dio_enuFlipChannel+0xd4>
    1094:	84 27       	eor	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	16 c0       	rjmp	.+44     	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_D:
			TGL_BIT(PORTA,Loc_u8Pin);
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <Dio_enuFlipChannel+0x100>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <Dio_enuFlipChannel+0xfc>
    10bc:	84 27       	eor	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    10c8:	26 96       	adiw	r28, 0x06	; 6
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <Port_enuSetPinDir>:
#include "Port.h"
#include "Port_prv_cfg.h"
#include "Port_cfg.h"
#include <avr/io.h>
Port_tenuErrorStatus Port_enuSetPinDir(u8 copy_u8PinNum, u8 copy_u8PinDir)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	27 97       	sbiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	8c 83       	std	Y+4, r24	; 0x04
    10f0:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    10f2:	83 e0       	ldi	r24, 0x03	; 3
    10f4:	8b 83       	std	Y+3, r24	; 0x03

	/*make the checking before the logic bec. if there is an error we will return from the function*/
	/*if the number of pins exceed the number of the HW pins*/
	if (copy_u8PinNum>MAX_PIN_NUM)
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	80 32       	cpi	r24, 0x20	; 32
    10fa:	10 f0       	brcs	.+4      	; 0x1100 <Port_enuSetPinDir+0x26>
	{
		/*pin number error */
		Loc_ErrorStatus = Port_enuPinError;
    10fc:	1b 82       	std	Y+3, r1	; 0x03
    10fe:	df c0       	rjmp	.+446    	; 0x12be <Port_enuSetPinDir+0x1e4>
	}
	/*if the user pass parameter other than the two directions (input/output)*/
	else if(copy_u8PinDir > 1)
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	18 f0       	brcs	.+6      	; 0x110c <Port_enuSetPinDir+0x32>
	{
		/*Direction error*/
		Loc_ErrorStatus = Port_enuPortError;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	8b 83       	std	Y+3, r24	; 0x03
    110a:	d9 c0       	rjmp	.+434    	; 0x12be <Port_enuSetPinDir+0x1e4>
	}

	else
	{
		u8 Loc_u8PinIndex = copy_u8PinNum%PIN_AND_PORT_DIVISOR;
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	87 70       	andi	r24, 0x07	; 7
    1110:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PortIndex = copy_u8PinNum/PIN_AND_PORT_DIVISOR;
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	86 95       	lsr	r24
    1116:	86 95       	lsr	r24
    1118:	86 95       	lsr	r24
    111a:	89 83       	std	Y+1, r24	; 0x01
		/* switch on the port index and according to the pin Dir the pin will be set or cleared*/
		switch (Loc_u8PortIndex)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3f 83       	std	Y+7, r19	; 0x07
    1124:	2e 83       	std	Y+6, r18	; 0x06
    1126:	8e 81       	ldd	r24, Y+6	; 0x06
    1128:	9f 81       	ldd	r25, Y+7	; 0x07
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <Port_enuSetPinDir+0x58>
    1130:	43 c0       	rjmp	.+134    	; 0x11b8 <Port_enuSetPinDir+0xde>
    1132:	2e 81       	ldd	r18, Y+6	; 0x06
    1134:	3f 81       	ldd	r19, Y+7	; 0x07
    1136:	22 30       	cpi	r18, 0x02	; 2
    1138:	31 05       	cpc	r19, r1
    113a:	2c f4       	brge	.+10     	; 0x1146 <Port_enuSetPinDir+0x6c>
    113c:	8e 81       	ldd	r24, Y+6	; 0x06
    113e:	9f 81       	ldd	r25, Y+7	; 0x07
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	71 f0       	breq	.+28     	; 0x1160 <Port_enuSetPinDir+0x86>
    1144:	bc c0       	rjmp	.+376    	; 0x12be <Port_enuSetPinDir+0x1e4>
    1146:	2e 81       	ldd	r18, Y+6	; 0x06
    1148:	3f 81       	ldd	r19, Y+7	; 0x07
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <Port_enuSetPinDir+0x78>
    1150:	5f c0       	rjmp	.+190    	; 0x1210 <Port_enuSetPinDir+0x136>
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	9f 81       	ldd	r25, Y+7	; 0x07
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <Port_enuSetPinDir+0x84>
    115c:	85 c0       	rjmp	.+266    	; 0x1268 <Port_enuSetPinDir+0x18e>
    115e:	af c0       	rjmp	.+350    	; 0x12be <Port_enuSetPinDir+0x1e4>
		{
		case PORT_A:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	a1 f4       	brne	.+40     	; 0x118e <Port_enuSetPinDir+0xb4>
			{
				SET_BIT(DDRA,Loc_u8PinIndex);
    1166:	aa e3       	ldi	r26, 0x3A	; 58
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ea e3       	ldi	r30, 0x3A	; 58
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <Port_enuSetPinDir+0xaa>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <Port_enuSetPinDir+0xa6>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	98 c0       	rjmp	.+304    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRA,Loc_u8PinIndex);
    118e:	aa e3       	ldi	r26, 0x3A	; 58
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ea e3       	ldi	r30, 0x3A	; 58
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <Port_enuSetPinDir+0xd2>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <Port_enuSetPinDir+0xce>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	83 c0       	rjmp	.+262    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_B:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <Port_enuSetPinDir+0x10c>
			{
				SET_BIT(DDRB,Loc_u8PinIndex);
    11be:	a7 e3       	ldi	r26, 0x37	; 55
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e7 e3       	ldi	r30, 0x37	; 55
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <Port_enuSetPinDir+0x102>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <Port_enuSetPinDir+0xfe>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	6c c0       	rjmp	.+216    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRB,Loc_u8PinIndex);
    11e6:	a7 e3       	ldi	r26, 0x37	; 55
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e7 e3       	ldi	r30, 0x37	; 55
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <Port_enuSetPinDir+0x12a>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <Port_enuSetPinDir+0x126>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	57 c0       	rjmp	.+174    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_C:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	a1 f4       	brne	.+40     	; 0x123e <Port_enuSetPinDir+0x164>
			{
				SET_BIT(DDRC,Loc_u8PinIndex);
    1216:	a4 e3       	ldi	r26, 0x34	; 52
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <Port_enuSetPinDir+0x15a>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <Port_enuSetPinDir+0x156>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	40 c0       	rjmp	.+128    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRC,Loc_u8PinIndex);
    123e:	a4 e3       	ldi	r26, 0x34	; 52
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e4 e3       	ldi	r30, 0x34	; 52
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <Port_enuSetPinDir+0x182>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <Port_enuSetPinDir+0x17e>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	2b c0       	rjmp	.+86     	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_D:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	a1 f4       	brne	.+40     	; 0x1296 <Port_enuSetPinDir+0x1bc>
			{
				SET_BIT(DDRD,Loc_u8PinIndex);
    126e:	a1 e3       	ldi	r26, 0x31	; 49
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e1 e3       	ldi	r30, 0x31	; 49
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <Port_enuSetPinDir+0x1b2>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <Port_enuSetPinDir+0x1ae>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	14 c0       	rjmp	.+40     	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRD,Loc_u8PinIndex);
    1296:	a1 e3       	ldi	r26, 0x31	; 49
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Port_enuSetPinDir+0x1da>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <Port_enuSetPinDir+0x1d6>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
		default:
			/*Do nothing*/
			break;
		}
	}
	return Loc_ErrorStatus;
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12c0:	27 96       	adiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 copy_u8PinNum, Port_tenuPinMode enu_PinMode)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2f 97       	sbiw	r28, 0x0f	; 15
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	8b 83       	std	Y+3, r24	; 0x03
	if(enu_PinMode>NUMBER_OF_MODES)
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	85 30       	cpi	r24, 0x05	; 5
    12f2:	18 f0       	brcs	.+6      	; 0x12fa <Port_enuSetPinMode+0x28>
	{
		Loc_ErrorStatus = Port_enuModeError;
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	23 c3       	rjmp	.+1606   	; 0x1940 <Port_enuSetPinMode+0x66e>
	}
	else if(copy_u8PinNum>MAX_PIN_NUM)
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	80 32       	cpi	r24, 0x20	; 32
    12fe:	10 f0       	brcs	.+4      	; 0x1304 <Port_enuSetPinMode+0x32>
	{
		Loc_ErrorStatus = Port_enuPinError;
    1300:	1b 82       	std	Y+3, r1	; 0x03
    1302:	1e c3       	rjmp	.+1596   	; 0x1940 <Port_enuSetPinMode+0x66e>
	}
	else
	{
		u8 Loc_u8PortIndex = (copy_u8PinNum /PIN_AND_PORT_DIVISOR);
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	86 95       	lsr	r24
    1308:	86 95       	lsr	r24
    130a:	86 95       	lsr	r24
    130c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PinIndex  = (copy_u8PinNum %PIN_AND_PORT_DIVISOR);
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8PortIndex)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3f 87       	std	Y+15, r19	; 0x0f
    131c:	2e 87       	std	Y+14, r18	; 0x0e
    131e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1320:	9f 85       	ldd	r25, Y+15	; 0x0f
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <Port_enuSetPinMode+0x58>
    1328:	d4 c0       	rjmp	.+424    	; 0x14d2 <Port_enuSetPinMode+0x200>
    132a:	2e 85       	ldd	r18, Y+14	; 0x0e
    132c:	3f 85       	ldd	r19, Y+15	; 0x0f
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <Port_enuSetPinMode+0x6c>
    1334:	8e 85       	ldd	r24, Y+14	; 0x0e
    1336:	9f 85       	ldd	r25, Y+15	; 0x0f
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	71 f0       	breq	.+28     	; 0x1358 <Port_enuSetPinMode+0x86>
    133c:	01 c3       	rjmp	.+1538   	; 0x1940 <Port_enuSetPinMode+0x66e>
    133e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1340:	3f 85       	ldd	r19, Y+15	; 0x0f
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <Port_enuSetPinMode+0x78>
    1348:	81 c1       	rjmp	.+770    	; 0x164c <Port_enuSetPinMode+0x37a>
    134a:	8e 85       	ldd	r24, Y+14	; 0x0e
    134c:	9f 85       	ldd	r25, Y+15	; 0x0f
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <Port_enuSetPinMode+0x84>
    1354:	39 c2       	rjmp	.+1138   	; 0x17c8 <Port_enuSetPinMode+0x4f6>
    1356:	f4 c2       	rjmp	.+1512   	; 0x1940 <Port_enuSetPinMode+0x66e>
		{
		case PORT_A:
			switch(enu_PinMode)
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3d 87       	std	Y+13, r19	; 0x0d
    1360:	2c 87       	std	Y+12, r18	; 0x0c
    1362:	8c 85       	ldd	r24, Y+12	; 0x0c
    1364:	9d 85       	ldd	r25, Y+13	; 0x0d
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	b9 f0       	breq	.+46     	; 0x139a <Port_enuSetPinMode+0xc8>
    136c:	2c 85       	ldd	r18, Y+12	; 0x0c
    136e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <Port_enuSetPinMode+0xae>
    1376:	8c 85       	ldd	r24, Y+12	; 0x0c
    1378:	9d 85       	ldd	r25, Y+13	; 0x0d
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	a1 f1       	breq	.+104    	; 0x13e6 <Port_enuSetPinMode+0x114>
    137e:	e0 c2       	rjmp	.+1472   	; 0x1940 <Port_enuSetPinMode+0x66e>
    1380:	2c 85       	ldd	r18, Y+12	; 0x0c
    1382:	3d 85       	ldd	r19, Y+13	; 0x0d
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <Port_enuSetPinMode+0xba>
    138a:	54 c0       	rjmp	.+168    	; 0x1434 <Port_enuSetPinMode+0x162>
    138c:	8c 85       	ldd	r24, Y+12	; 0x0c
    138e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <Port_enuSetPinMode+0xc6>
    1396:	75 c0       	rjmp	.+234    	; 0x1482 <Port_enuSetPinMode+0x1b0>
    1398:	d3 c2       	rjmp	.+1446   	; 0x1940 <Port_enuSetPinMode+0x66e>
			{
			case Output_enuHigh:
				SET_BIT(DDRA,Loc_u8PinIndex);
    139a:	aa e3       	ldi	r26, 0x3A	; 58
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <Port_enuSetPinMode+0xe4>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	2a 95       	dec	r18
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <Port_enuSetPinMode+0xe0>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    13be:	ab e3       	ldi	r26, 0x3B	; 59
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	eb e3       	ldi	r30, 0x3B	; 59
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <Port_enuSetPinMode+0x10a>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <Port_enuSetPinMode+0x106>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	ad c2       	rjmp	.+1370   	; 0x1940 <Port_enuSetPinMode+0x66e>
				break;
			case Output_enuLow:
				SET_BIT(DDRA,Loc_u8PinIndex);
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <Port_enuSetPinMode+0x130>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <Port_enuSetPinMode+0x12c>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    140a:	ab e3       	ldi	r26, 0x3B	; 59
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e3       	ldi	r30, 0x3B	; 59
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <Port_enuSetPinMode+0x156>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <Port_enuSetPinMode+0x152>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	86 c2       	rjmp	.+1292   	; 0x1940 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuPullup:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1434:	aa e3       	ldi	r26, 0x3A	; 58
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ea e3       	ldi	r30, 0x3A	; 58
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <Port_enuSetPinMode+0x17e>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	2a 95       	dec	r18
    1452:	e2 f7       	brpl	.-8      	; 0x144c <Port_enuSetPinMode+0x17a>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    145a:	ab e3       	ldi	r26, 0x3B	; 59
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <Port_enuSetPinMode+0x1a6>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <Port_enuSetPinMode+0x1a2>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	5f c2       	rjmp	.+1214   	; 0x1940 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuHighImpedence:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1482:	aa e3       	ldi	r26, 0x3A	; 58
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ea e3       	ldi	r30, 0x3A	; 58
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <Port_enuSetPinMode+0x1cc>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	2a 95       	dec	r18
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <Port_enuSetPinMode+0x1c8>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    14a8:	ab e3       	ldi	r26, 0x3B	; 59
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	eb e3       	ldi	r30, 0x3B	; 59
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <Port_enuSetPinMode+0x1f4>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <Port_enuSetPinMode+0x1f0>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	37 c2       	rjmp	.+1134   	; 0x1940 <Port_enuSetPinMode+0x66e>
				/*do nothing*/
				break;
			}
			break;
			case PORT_B:
				switch(enu_PinMode)
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3b 87       	std	Y+11, r19	; 0x0b
    14da:	2a 87       	std	Y+10, r18	; 0x0a
    14dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    14de:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	b9 f0       	breq	.+46     	; 0x1514 <Port_enuSetPinMode+0x242>
    14e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    14e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	2c f4       	brge	.+10     	; 0x14fa <Port_enuSetPinMode+0x228>
    14f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	a1 f1       	breq	.+104    	; 0x1560 <Port_enuSetPinMode+0x28e>
    14f8:	23 c2       	rjmp	.+1094   	; 0x1940 <Port_enuSetPinMode+0x66e>
    14fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    14fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <Port_enuSetPinMode+0x234>
    1504:	54 c0       	rjmp	.+168    	; 0x15ae <Port_enuSetPinMode+0x2dc>
    1506:	8a 85       	ldd	r24, Y+10	; 0x0a
    1508:	9b 85       	ldd	r25, Y+11	; 0x0b
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <Port_enuSetPinMode+0x240>
    1510:	75 c0       	rjmp	.+234    	; 0x15fc <Port_enuSetPinMode+0x32a>
    1512:	16 c2       	rjmp	.+1068   	; 0x1940 <Port_enuSetPinMode+0x66e>
				{
				case Output_enuHigh:
					SET_BIT(DDRB,Loc_u8PinIndex);
    1514:	a7 e3       	ldi	r26, 0x37	; 55
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e7 e3       	ldi	r30, 0x37	; 55
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <Port_enuSetPinMode+0x25e>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	2a 95       	dec	r18
    1532:	e2 f7       	brpl	.-8      	; 0x152c <Port_enuSetPinMode+0x25a>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <Port_enuSetPinMode+0x284>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <Port_enuSetPinMode+0x280>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	f0 c1       	rjmp	.+992    	; 0x1940 <Port_enuSetPinMode+0x66e>
					break;
				case Output_enuLow:
					SET_BIT(DDRB,Loc_u8PinIndex);
    1560:	a7 e3       	ldi	r26, 0x37	; 55
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e7 e3       	ldi	r30, 0x37	; 55
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <Port_enuSetPinMode+0x2aa>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	2a 95       	dec	r18
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <Port_enuSetPinMode+0x2a6>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    1584:	a8 e3       	ldi	r26, 0x38	; 56
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e3       	ldi	r30, 0x38	; 56
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <Port_enuSetPinMode+0x2d0>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <Port_enuSetPinMode+0x2cc>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	c9 c1       	rjmp	.+914    	; 0x1940 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuPullup:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    15ae:	a7 e3       	ldi	r26, 0x37	; 55
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e7 e3       	ldi	r30, 0x37	; 55
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <Port_enuSetPinMode+0x2f8>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	2a 95       	dec	r18
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <Port_enuSetPinMode+0x2f4>
    15ce:	80 95       	com	r24
    15d0:	84 23       	and	r24, r20
    15d2:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    15d4:	a8 e3       	ldi	r26, 0x38	; 56
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e3       	ldi	r30, 0x38	; 56
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <Port_enuSetPinMode+0x320>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <Port_enuSetPinMode+0x31c>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	a2 c1       	rjmp	.+836    	; 0x1940 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuHighImpedence:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    15fc:	a7 e3       	ldi	r26, 0x37	; 55
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e3       	ldi	r30, 0x37	; 55
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <Port_enuSetPinMode+0x346>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	2a 95       	dec	r18
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <Port_enuSetPinMode+0x342>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    1622:	a8 e3       	ldi	r26, 0x38	; 56
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e8 e3       	ldi	r30, 0x38	; 56
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <Port_enuSetPinMode+0x36e>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <Port_enuSetPinMode+0x36a>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	7a c1       	rjmp	.+756    	; 0x1940 <Port_enuSetPinMode+0x66e>
					/*do nothing*/
					break;
				}
				break ;
				case PORT_C:
					switch(enu_PinMode)
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	39 87       	std	Y+9, r19	; 0x09
    1654:	28 87       	std	Y+8, r18	; 0x08
    1656:	88 85       	ldd	r24, Y+8	; 0x08
    1658:	99 85       	ldd	r25, Y+9	; 0x09
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	b9 f0       	breq	.+46     	; 0x168e <Port_enuSetPinMode+0x3bc>
    1660:	28 85       	ldd	r18, Y+8	; 0x08
    1662:	39 85       	ldd	r19, Y+9	; 0x09
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <Port_enuSetPinMode+0x3a2>
    166a:	88 85       	ldd	r24, Y+8	; 0x08
    166c:	99 85       	ldd	r25, Y+9	; 0x09
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	a1 f1       	breq	.+104    	; 0x16da <Port_enuSetPinMode+0x408>
    1672:	66 c1       	rjmp	.+716    	; 0x1940 <Port_enuSetPinMode+0x66e>
    1674:	28 85       	ldd	r18, Y+8	; 0x08
    1676:	39 85       	ldd	r19, Y+9	; 0x09
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <Port_enuSetPinMode+0x3ae>
    167e:	55 c0       	rjmp	.+170    	; 0x172a <Port_enuSetPinMode+0x458>
    1680:	88 85       	ldd	r24, Y+8	; 0x08
    1682:	99 85       	ldd	r25, Y+9	; 0x09
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <Port_enuSetPinMode+0x3ba>
    168a:	76 c0       	rjmp	.+236    	; 0x1778 <Port_enuSetPinMode+0x4a6>
    168c:	59 c1       	rjmp	.+690    	; 0x1940 <Port_enuSetPinMode+0x66e>
					{
					case Output_enuHigh:
						SET_BIT(DDRC,Loc_u8PinIndex);
    168e:	a4 e3       	ldi	r26, 0x34	; 52
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e4 e3       	ldi	r30, 0x34	; 52
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <Port_enuSetPinMode+0x3d8>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	2a 95       	dec	r18
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <Port_enuSetPinMode+0x3d4>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    16b2:	a5 e3       	ldi	r26, 0x35	; 53
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e5 e3       	ldi	r30, 0x35	; 53
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <Port_enuSetPinMode+0x3fe>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <Port_enuSetPinMode+0x3fa>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	33 c1       	rjmp	.+614    	; 0x1940 <Port_enuSetPinMode+0x66e>
						break;
					case Output_enuLow:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    16da:	a4 e3       	ldi	r26, 0x34	; 52
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e4 e3       	ldi	r30, 0x34	; 52
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <Port_enuSetPinMode+0x424>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	2a 95       	dec	r18
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <Port_enuSetPinMode+0x420>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <Port_enuSetPinMode+0x44c>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <Port_enuSetPinMode+0x448>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	0b c1       	rjmp	.+534    	; 0x1940 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuPullup:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    172a:	a4 e3       	ldi	r26, 0x34	; 52
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e4 e3       	ldi	r30, 0x34	; 52
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <Port_enuSetPinMode+0x474>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	2a 95       	dec	r18
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <Port_enuSetPinMode+0x470>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    1750:	a5 e3       	ldi	r26, 0x35	; 53
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <Port_enuSetPinMode+0x49c>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <Port_enuSetPinMode+0x498>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	e4 c0       	rjmp	.+456    	; 0x1940 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuHighImpedence:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    1778:	a4 e3       	ldi	r26, 0x34	; 52
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <Port_enuSetPinMode+0x4c2>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	2a 95       	dec	r18
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <Port_enuSetPinMode+0x4be>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    179e:	a5 e3       	ldi	r26, 0x35	; 53
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e5 e3       	ldi	r30, 0x35	; 53
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <Port_enuSetPinMode+0x4ea>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <Port_enuSetPinMode+0x4e6>
    17c0:	80 95       	com	r24
    17c2:	84 23       	and	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	bc c0       	rjmp	.+376    	; 0x1940 <Port_enuSetPinMode+0x66e>
						/*do nothing*/
						break;
					}
					break ;
					case PORT_D:
						switch(enu_PinMode)
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3f 83       	std	Y+7, r19	; 0x07
    17d0:	2e 83       	std	Y+6, r18	; 0x06
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	9f 81       	ldd	r25, Y+7	; 0x07
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	b9 f0       	breq	.+46     	; 0x180a <Port_enuSetPinMode+0x538>
    17dc:	2e 81       	ldd	r18, Y+6	; 0x06
    17de:	3f 81       	ldd	r19, Y+7	; 0x07
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <Port_enuSetPinMode+0x51e>
    17e6:	8e 81       	ldd	r24, Y+6	; 0x06
    17e8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	a1 f1       	breq	.+104    	; 0x1856 <Port_enuSetPinMode+0x584>
    17ee:	a8 c0       	rjmp	.+336    	; 0x1940 <Port_enuSetPinMode+0x66e>
    17f0:	2e 81       	ldd	r18, Y+6	; 0x06
    17f2:	3f 81       	ldd	r19, Y+7	; 0x07
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	09 f4       	brne	.+2      	; 0x17fc <Port_enuSetPinMode+0x52a>
    17fa:	54 c0       	rjmp	.+168    	; 0x18a4 <Port_enuSetPinMode+0x5d2>
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
    17fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <Port_enuSetPinMode+0x536>
    1806:	75 c0       	rjmp	.+234    	; 0x18f2 <Port_enuSetPinMode+0x620>
    1808:	9b c0       	rjmp	.+310    	; 0x1940 <Port_enuSetPinMode+0x66e>
						{
						case Output_enuHigh:
							SET_BIT(DDRD,Loc_u8PinIndex);
    180a:	a1 e3       	ldi	r26, 0x31	; 49
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e1 e3       	ldi	r30, 0x31	; 49
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <Port_enuSetPinMode+0x554>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	2a 95       	dec	r18
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <Port_enuSetPinMode+0x550>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8PinIndex);
    182e:	a2 e3       	ldi	r26, 0x32	; 50
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e2 e3       	ldi	r30, 0x32	; 50
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <Port_enuSetPinMode+0x57a>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <Port_enuSetPinMode+0x576>
    1850:	84 2b       	or	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	75 c0       	rjmp	.+234    	; 0x1940 <Port_enuSetPinMode+0x66e>
							break;
						case Output_enuLow:
							SET_BIT(DDRD,Loc_u8PinIndex);
    1856:	a1 e3       	ldi	r26, 0x31	; 49
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <Port_enuSetPinMode+0x5a0>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	2a 95       	dec	r18
    1874:	e2 f7       	brpl	.-8      	; 0x186e <Port_enuSetPinMode+0x59c>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    187a:	a2 e3       	ldi	r26, 0x32	; 50
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e2 e3       	ldi	r30, 0x32	; 50
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <Port_enuSetPinMode+0x5c6>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <Port_enuSetPinMode+0x5c2>
    189c:	80 95       	com	r24
    189e:	84 23       	and	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	4e c0       	rjmp	.+156    	; 0x1940 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuPullup:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    18a4:	a1 e3       	ldi	r26, 0x31	; 49
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e1 e3       	ldi	r30, 0x31	; 49
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <Port_enuSetPinMode+0x5ee>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	2a 95       	dec	r18
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <Port_enuSetPinMode+0x5ea>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8PinIndex);
    18ca:	ab e3       	ldi	r26, 0x3B	; 59
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <Port_enuSetPinMode+0x616>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <Port_enuSetPinMode+0x612>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	27 c0       	rjmp	.+78     	; 0x1940 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuHighImpedence:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    18f2:	a1 e3       	ldi	r26, 0x31	; 49
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <Port_enuSetPinMode+0x63c>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <Port_enuSetPinMode+0x638>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    1918:	a2 e3       	ldi	r26, 0x32	; 50
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e2 e3       	ldi	r30, 0x32	; 50
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <Port_enuSetPinMode+0x664>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <Port_enuSetPinMode+0x660>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
							/*do nothing*/
							break;
		}

	}
	return Loc_ErrorStatus;
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1942:	2f 96       	adiw	r28, 0x0f	; 15
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <Port_vidInit>:

void Port_vidInit(void)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
#define b7_DDRA		1
#define b7_PORTA	0
#endif


	DDRA=CONC(b7_DDRA,b6_DDRA,b5_DDRA,b4_DDRA,b3_DDRA,b2_DDRA,b1_DDRA,b0_DDRA);
    195c:	ea e3       	ldi	r30, 0x3A	; 58
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	80 83       	st	Z, r24
	PORTA=CONC(b7_PORTA,b6_PORTA,b5_PORTA,b4_PORTA,b3_PORTA,b2_PORTA,b1_PORTA,b0_PORTA);
    1964:	eb e3       	ldi	r30, 0x3B	; 59
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	10 82       	st	Z, r1
#elif PORT_PIN_15_INIT_CFG == OUTPUT_LOW
#define b15_DDRB		1
#define b15_PORTB		0
#endif

	DDRB=CONC(b15_DDRB,b14_DDRB,b13_DDRB,b12_DDRB,b11_DDRB,b10_DDRB,b9_DDRB,b8_DDRB);
    196a:	e7 e3       	ldi	r30, 0x37	; 55
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	80 83       	st	Z, r24
	PORTB=CONC(b15_PORTB,b14_PORTB,b13_PORTB,b12_PORTB,b11_PORTB,b10_PORTB,b9_PORTB,b8_PORTB);
    1972:	e8 e3       	ldi	r30, 0x38	; 56
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	80 83       	st	Z, r24
#elif PORT_PIN_23_INIT_CFG == OUTPUT_LOW
#define b23_DDRC		1
#define b23_PORTC		0
#endif

	DDRC=CONC(b23_DDRC,b22_DDRC,b21_DDRC,b20_DDRC,b19_DDRC,b18_DDRC,b17_DDRC,b16_DDRC);
    197a:	e4 e3       	ldi	r30, 0x34	; 52
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	80 83       	st	Z, r24
	PORTC=CONC(b23_PORTC,b22_PORTC,b21_PORTC,b20_PORTC,b19_PORTC,b18_PORTC,b17_PORTC,b16_PORTC);
    1982:	e5 e3       	ldi	r30, 0x35	; 53
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	10 82       	st	Z, r1
#elif PORT_PIN_31_INIT_CFG == OUTPUT_LOW
#define b31_DDRD		1
#define b31_PORTD		0
#endif

	DDRD=CONC(b31_DDRD,b30_DDRD,b29_DDRD,b28_DDRD,b27_DDRD,b26_DDRD,b25_DDRD,b24_DDRD);
    1988:	e1 e3       	ldi	r30, 0x31	; 49
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	80 83       	st	Z, r24
	DDRD=CONC(b31_PORTD,b30_PORTD,b29_PORTD,b28_PORTD,b27_PORTD,b26_PORTD,b25_PORTD,b24_PORTD);
    1990:	e1 e3       	ldi	r30, 0x31	; 49
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	10 82       	st	Z, r1
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <main>:
#define DECREMENT_SWITCH  PORT_u8PIN_5
#define BLINK_SWITCH 	  PORT_u8PIN_6
#define BLINKING_LED 	  PORT_u8PIN_1
#define PRESSED			  0
int main (void)
{
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	c4 58       	subi	r28, 0x84	; 132
    19aa:	d0 40       	sbci	r29, 0x00	; 0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
	u8 status_flag =0;
    19b6:	fe 01       	movw	r30, r28
    19b8:	ef 57       	subi	r30, 0x7F	; 127
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	10 82       	st	Z, r1
	s8 counter =0;
    19be:	fe 01       	movw	r30, r28
    19c0:	e0 58       	subi	r30, 0x80	; 128
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	10 82       	st	Z, r1
	u8 iterator;
	u8 Bit_value1=1;
    19c6:	fe 01       	movw	r30, r28
    19c8:	ee 57       	subi	r30, 0x7E	; 126
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	80 83       	st	Z, r24
	u8 Bit_value2=1;
    19d0:	fe 01       	movw	r30, r28
    19d2:	ed 57       	subi	r30, 0x7D	; 125
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	80 83       	st	Z, r24
	u8 Bit_value3=1;
    19da:	fe 01       	movw	r30, r28
    19dc:	ec 57       	subi	r30, 0x7C	; 124
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	80 83       	st	Z, r24
	/*initializing PORTB to be output which is connected to leds*/
	for(iterator=PORT_u8PIN_9;iterator<PORT_u8PIN_17;iterator++)
    19e4:	fe 01       	movw	r30, r28
    19e6:	e1 58       	subi	r30, 0x81	; 129
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	89 e0       	ldi	r24, 0x09	; 9
    19ec:	80 83       	st	Z, r24
    19ee:	13 c0       	rjmp	.+38     	; 0x1a16 <main+0x7a>
	{
		Port_enuSetPinMode(iterator,Output_enuLow);
    19f0:	fe 01       	movw	r30, r28
    19f2:	e1 58       	subi	r30, 0x81	; 129
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Port_enuSetPinMode>
	u8 iterator;
	u8 Bit_value1=1;
	u8 Bit_value2=1;
	u8 Bit_value3=1;
	/*initializing PORTB to be output which is connected to leds*/
	for(iterator=PORT_u8PIN_9;iterator<PORT_u8PIN_17;iterator++)
    1a04:	de 01       	movw	r26, r28
    1a06:	a1 58       	subi	r26, 0x81	; 129
    1a08:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e1 58       	subi	r30, 0x81	; 129
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	8c 93       	st	X, r24
    1a16:	fe 01       	movw	r30, r28
    1a18:	e1 58       	subi	r30, 0x81	; 129
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	81 31       	cpi	r24, 0x11	; 17
    1a20:	38 f3       	brcs	.-50     	; 0x19f0 <main+0x54>
	{
		Port_enuSetPinMode(iterator,Output_enuLow);
	}

	/*make the increment,decrement and blink switch input pullup*/
	Port_enuSetPinMode(INCREMENT_SWITCH,Input_enuPullup);
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Port_enuSetPinMode>
	Port_enuSetPinMode(DECREMENT_SWITCH,Input_enuPullup);
    1a2e:	85 e0       	ldi	r24, 0x05	; 5
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Port_enuSetPinMode>
	Port_enuSetPinMode(BLINK_SWITCH,Input_enuPullup);
    1a3a:	86 e0       	ldi	r24, 0x06	; 6
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	62 e0       	ldi	r22, 0x02	; 2
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Port_enuSetPinMode>
	/*make the blinking led pin to be output */
	Port_enuSetPinMode(PORT_u8PIN_1,Output_enuLow);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Port_enuSetPinMode>
	/*super loop*/
	while(1)
	{
		Dio_enuReadChannelId(DIO_PIN_4,&Bit_value1);
    1a52:	9e 01       	movw	r18, r28
    1a54:	2e 57       	subi	r18, 0x7E	; 126
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	84 e0       	ldi	r24, 0x04	; 4
    1a5a:	b9 01       	movw	r22, r18
    1a5c:	0e 94 a2 06 	call	0xd44	; 0xd44 <Dio_enuReadChannelId>
		/*if the increment switch is pressed then increment from the turning on leds for every press*/

		if(Bit_value1==PRESSED)
    1a60:	fe 01       	movw	r30, r28
    1a62:	ee 57       	subi	r30, 0x7E	; 126
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 81       	ld	r24, Z
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <main+0xd2>
    1a6c:	8a c1       	rjmp	.+788    	; 0x1d82 <main+0x3e6>
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e5 58       	subi	r30, 0x85	; 133
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a8 e4       	ldi	r26, 0x48	; 72
    1a7a:	b3 e4       	ldi	r27, 0x43	; 67
    1a7c:	80 83       	st	Z, r24
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	a2 83       	std	Z+2, r26	; 0x02
    1a82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	8e 01       	movw	r16, r28
    1a86:	09 58       	subi	r16, 0x89	; 137
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e5 58       	subi	r30, 0x85	; 133
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	80 83       	st	Z, r24
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	a2 83       	std	Z+2, r26	; 0x02
    1ab0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e9 58       	subi	r30, 0x89	; 137
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	44 f4       	brge	.+16     	; 0x1ae0 <main+0x144>
		__ticks = 1;
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	eb 58       	subi	r30, 0x8B	; 139
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	64 c0       	rjmp	.+200    	; 0x1ba8 <main+0x20c>
	else if (__tmp > 65535)
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e9 58       	subi	r30, 0x89	; 137
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	0c f0       	brlt	.+2      	; 0x1b00 <main+0x164>
    1afe:	43 c0       	rjmp	.+134    	; 0x1b86 <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	fe 01       	movw	r30, r28
    1b02:	e5 58       	subi	r30, 0x85	; 133
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8e 01       	movw	r16, r28
    1b20:	0b 58       	subi	r16, 0x8B	; 139
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	1f c0       	rjmp	.+62     	; 0x1b76 <main+0x1da>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ed 58       	subi	r30, 0x8D	; 141
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	88 ec       	ldi	r24, 0xC8	; 200
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b46:	fe 01       	movw	r30, r28
    1b48:	ed 58       	subi	r30, 0x8D	; 141
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <main+0x1b4>
    1b54:	fe 01       	movw	r30, r28
    1b56:	ed 58       	subi	r30, 0x8D	; 141
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	de 01       	movw	r26, r28
    1b60:	ab 58       	subi	r26, 0x8B	; 139
    1b62:	bf 4f       	sbci	r27, 0xFF	; 255
    1b64:	fe 01       	movw	r30, r28
    1b66:	eb 58       	subi	r30, 0x8B	; 139
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	11 96       	adiw	r26, 0x01	; 1
    1b72:	9c 93       	st	X, r25
    1b74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	fe 01       	movw	r30, r28
    1b78:	eb 58       	subi	r30, 0x8B	; 139
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	d1 f6       	brne	.-76     	; 0x1b38 <main+0x19c>
    1b84:	28 c0       	rjmp	.+80     	; 0x1bd6 <main+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	8e 01       	movw	r16, r28
    1b88:	0b 58       	subi	r16, 0x8B	; 139
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e9 58       	subi	r30, 0x89	; 137
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	de 01       	movw	r26, r28
    1baa:	af 58       	subi	r26, 0x8F	; 143
    1bac:	bf 4f       	sbci	r27, 0xFF	; 255
    1bae:	fe 01       	movw	r30, r28
    1bb0:	eb 58       	subi	r30, 0x8B	; 139
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	11 96       	adiw	r26, 0x01	; 1
    1bba:	9c 93       	st	X, r25
    1bbc:	8e 93       	st	-X, r24
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ef 58       	subi	r30, 0x8F	; 143
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <main+0x22c>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ef 58       	subi	r30, 0x8F	; 143
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	80 83       	st	Z, r24
		{
			_delay_ms(200);
			if(counter>7)
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e0 58       	subi	r30, 0x80	; 128
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	5c f0       	brlt	.+22     	; 0x1bf8 <main+0x25c>
			{
				counter =7;
    1be2:	fe 01       	movw	r30, r28
    1be4:	e0 58       	subi	r30, 0x80	; 128
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	87 e0       	ldi	r24, 0x07	; 7
    1bea:	80 83       	st	Z, r24
				status_flag = 1;
    1bec:	fe 01       	movw	r30, r28
    1bee:	ef 57       	subi	r30, 0x7F	; 127
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 83       	st	Z, r24
    1bf6:	42 c5       	rjmp	.+2692   	; 0x267c <main+0xce0>
			}
			else
			{
				Dio_enuWriteChannelId(counter+9,DIO_u8HIGH);
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e0 58       	subi	r30, 0x80	; 128
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	87 5f       	subi	r24, 0xF7	; 247
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e3 59       	subi	r30, 0x93	; 147
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	aa ef       	ldi	r26, 0xFA	; 250
    1c14:	b3 e4       	ldi	r27, 0x43	; 67
    1c16:	80 83       	st	Z, r24
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	a2 83       	std	Z+2, r26	; 0x02
    1c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	8e 01       	movw	r16, r28
    1c20:	07 59       	subi	r16, 0x97	; 151
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	fe 01       	movw	r30, r28
    1c26:	e3 59       	subi	r30, 0x93	; 147
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a ef       	ldi	r20, 0xFA	; 250
    1c38:	54 e4       	ldi	r21, 0x44	; 68
    1c3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e7 59       	subi	r30, 0x97	; 151
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	44 f4       	brge	.+16     	; 0x1c7a <main+0x2de>
		__ticks = 1;
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e9 59       	subi	r30, 0x99	; 153
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	64 c0       	rjmp	.+200    	; 0x1d42 <main+0x3a6>
	else if (__tmp > 65535)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e7 59       	subi	r30, 0x97	; 151
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <main+0x2fe>
    1c98:	43 c0       	rjmp	.+134    	; 0x1d20 <main+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e3 59       	subi	r30, 0x93	; 147
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8e 01       	movw	r16, r28
    1cba:	09 59       	subi	r16, 0x99	; 153
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	f8 01       	movw	r30, r16
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
    1cd0:	1f c0       	rjmp	.+62     	; 0x1d10 <main+0x374>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	eb 59       	subi	r30, 0x9B	; 155
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	88 ec       	ldi	r24, 0xC8	; 200
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	eb 59       	subi	r30, 0x9B	; 155
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <main+0x34e>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	eb 59       	subi	r30, 0x9B	; 155
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	de 01       	movw	r26, r28
    1cfa:	a9 59       	subi	r26, 0x99	; 153
    1cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e9 59       	subi	r30, 0x99	; 153
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	9c 93       	st	X, r25
    1d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	fe 01       	movw	r30, r28
    1d12:	e9 59       	subi	r30, 0x99	; 153
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	d1 f6       	brne	.-76     	; 0x1cd2 <main+0x336>
    1d1e:	27 c0       	rjmp	.+78     	; 0x1d6e <main+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	8e 01       	movw	r16, r28
    1d22:	09 59       	subi	r16, 0x99	; 153
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e7 59       	subi	r30, 0x97	; 151
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	de 01       	movw	r26, r28
    1d44:	ad 59       	subi	r26, 0x9D	; 157
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e9 59       	subi	r30, 0x99	; 153
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	8d 93       	st	X+, r24
    1d54:	9c 93       	st	X, r25
    1d56:	fe 01       	movw	r30, r28
    1d58:	ed 59       	subi	r30, 0x9D	; 157
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <main+0x3c4>
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 59       	subi	r30, 0x9D	; 157
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
				_delay_ms(500);
				counter++ ;
    1d6e:	de 01       	movw	r26, r28
    1d70:	a0 58       	subi	r26, 0x80	; 128
    1d72:	bf 4f       	sbci	r27, 0xFF	; 255
    1d74:	fe 01       	movw	r30, r28
    1d76:	e0 58       	subi	r30, 0x80	; 128
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	8c 93       	st	X, r24
    1d80:	7d c4       	rjmp	.+2298   	; 0x267c <main+0xce0>
			}
		}
		/*if the decrement switch is pressed then decrement from the turning on leds for every press*/
		else if((Dio_enuReadChannelId(DIO_PIN_5,&Bit_value2)==Dio_enuOK) &&(Bit_value2==PRESSED))
    1d82:	9e 01       	movw	r18, r28
    1d84:	2d 57       	subi	r18, 0x7D	; 125
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	85 e0       	ldi	r24, 0x05	; 5
    1d8a:	b9 01       	movw	r22, r18
    1d8c:	0e 94 a2 06 	call	0xd44	; 0xd44 <Dio_enuReadChannelId>
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <main+0x3fa>
    1d94:	90 c1       	rjmp	.+800    	; 0x20b6 <main+0x71a>
    1d96:	fe 01       	movw	r30, r28
    1d98:	ed 57       	subi	r30, 0x7D	; 125
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	88 23       	and	r24, r24
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <main+0x408>
    1da2:	89 c1       	rjmp	.+786    	; 0x20b6 <main+0x71a>
    1da4:	fe 01       	movw	r30, r28
    1da6:	e1 5a       	subi	r30, 0xA1	; 161
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a8 e4       	ldi	r26, 0x48	; 72
    1db0:	b3 e4       	ldi	r27, 0x43	; 67
    1db2:	80 83       	st	Z, r24
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	a2 83       	std	Z+2, r26	; 0x02
    1db8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	8e 01       	movw	r16, r28
    1dbc:	05 5a       	subi	r16, 0xA5	; 165
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e1 5a       	subi	r30, 0xA1	; 161
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	82 81       	ldd	r24, Z+2	; 0x02
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4a ef       	ldi	r20, 0xFA	; 250
    1dd4:	54 e4       	ldi	r21, 0x44	; 68
    1dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	f8 01       	movw	r30, r16
    1de0:	80 83       	st	Z, r24
    1de2:	91 83       	std	Z+1, r25	; 0x01
    1de4:	a2 83       	std	Z+2, r26	; 0x02
    1de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de8:	fe 01       	movw	r30, r28
    1dea:	e5 5a       	subi	r30, 0xA5	; 165
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	44 f4       	brge	.+16     	; 0x1e16 <main+0x47a>
		__ticks = 1;
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 5a       	subi	r30, 0xA7	; 167
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	80 83       	st	Z, r24
    1e14:	64 c0       	rjmp	.+200    	; 0x1ede <main+0x542>
	else if (__tmp > 65535)
    1e16:	fe 01       	movw	r30, r28
    1e18:	e5 5a       	subi	r30, 0xA5	; 165
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	4f e7       	ldi	r20, 0x7F	; 127
    1e2a:	57 e4       	ldi	r21, 0x47	; 71
    1e2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e30:	18 16       	cp	r1, r24
    1e32:	0c f0       	brlt	.+2      	; 0x1e36 <main+0x49a>
    1e34:	43 c0       	rjmp	.+134    	; 0x1ebc <main+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	fe 01       	movw	r30, r28
    1e38:	e1 5a       	subi	r30, 0xA1	; 161
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8e 01       	movw	r16, r28
    1e56:	07 5a       	subi	r16, 0xA7	; 167
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	f8 01       	movw	r30, r16
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	80 83       	st	Z, r24
    1e6c:	1f c0       	rjmp	.+62     	; 0x1eac <main+0x510>
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 5a       	subi	r30, 0xA9	; 169
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	88 ec       	ldi	r24, 0xC8	; 200
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 5a       	subi	r30, 0xA9	; 169
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <main+0x4ea>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e9 5a       	subi	r30, 0xA9	; 169
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	de 01       	movw	r26, r28
    1e96:	a7 5a       	subi	r26, 0xA7	; 167
    1e98:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e7 5a       	subi	r30, 0xA7	; 167
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	91 81       	ldd	r25, Z+1	; 0x01
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	11 96       	adiw	r26, 0x01	; 1
    1ea8:	9c 93       	st	X, r25
    1eaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eac:	fe 01       	movw	r30, r28
    1eae:	e7 5a       	subi	r30, 0xA7	; 167
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	d1 f6       	brne	.-76     	; 0x1e6e <main+0x4d2>
    1eba:	28 c0       	rjmp	.+80     	; 0x1f0c <main+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	8e 01       	movw	r16, r28
    1ebe:	07 5a       	subi	r16, 0xA7	; 167
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e5 5a       	subi	r30, 0xA5	; 165
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	60 81       	ld	r22, Z
    1eca:	71 81       	ldd	r23, Z+1	; 0x01
    1ecc:	82 81       	ldd	r24, Z+2	; 0x02
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	f8 01       	movw	r30, r16
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
    1ede:	de 01       	movw	r26, r28
    1ee0:	ab 5a       	subi	r26, 0xAB	; 171
    1ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e7 5a       	subi	r30, 0xA7	; 167
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	11 96       	adiw	r26, 0x01	; 1
    1ef0:	9c 93       	st	X, r25
    1ef2:	8e 93       	st	-X, r24
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	eb 5a       	subi	r30, 0xAB	; 171
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <main+0x562>
    1f02:	fe 01       	movw	r30, r28
    1f04:	eb 5a       	subi	r30, 0xAB	; 171
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
		{
			_delay_ms(200);
			if(counter<0)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e0 58       	subi	r30, 0x80	; 128
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	88 23       	and	r24, r24
    1f16:	54 f4       	brge	.+20     	; 0x1f2c <main+0x590>
			{
				counter=0;
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e0 58       	subi	r30, 0x80	; 128
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	10 82       	st	Z, r1
				status_flag = 1;
    1f20:	fe 01       	movw	r30, r28
    1f22:	ef 57       	subi	r30, 0x7F	; 127
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	80 83       	st	Z, r24
    1f2a:	a8 c3       	rjmp	.+1872   	; 0x267c <main+0xce0>
			}
			else
			{
				Dio_enuWriteChannelId(counter+9,DIO_u8LOW);
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e0 58       	subi	r30, 0x80	; 128
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	87 5f       	subi	r24, 0xF7	; 247
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ef 5a       	subi	r30, 0xAF	; 175
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	aa ef       	ldi	r26, 0xFA	; 250
    1f48:	b3 e4       	ldi	r27, 0x43	; 67
    1f4a:	80 83       	st	Z, r24
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	a2 83       	std	Z+2, r26	; 0x02
    1f50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	8e 01       	movw	r16, r28
    1f54:	03 5b       	subi	r16, 0xB3	; 179
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ef 5a       	subi	r30, 0xAF	; 175
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 83       	st	Z, r24
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	a2 83       	std	Z+2, r26	; 0x02
    1f7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f80:	fe 01       	movw	r30, r28
    1f82:	e3 5b       	subi	r30, 0xB3	; 179
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	44 f4       	brge	.+16     	; 0x1fae <main+0x612>
		__ticks = 1;
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e5 5b       	subi	r30, 0xB5	; 181
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
    1fac:	64 c0       	rjmp	.+200    	; 0x2076 <main+0x6da>
	else if (__tmp > 65535)
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e3 5b       	subi	r30, 0xB3	; 179
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	3f ef       	ldi	r19, 0xFF	; 255
    1fc0:	4f e7       	ldi	r20, 0x7F	; 127
    1fc2:	57 e4       	ldi	r21, 0x47	; 71
    1fc4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fc8:	18 16       	cp	r1, r24
    1fca:	0c f0       	brlt	.+2      	; 0x1fce <main+0x632>
    1fcc:	43 c0       	rjmp	.+134    	; 0x2054 <main+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ef 5a       	subi	r30, 0xAF	; 175
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8e 01       	movw	r16, r28
    1fee:	05 5b       	subi	r16, 0xB5	; 181
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	f8 01       	movw	r30, r16
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
    2004:	1f c0       	rjmp	.+62     	; 0x2044 <main+0x6a8>
    2006:	fe 01       	movw	r30, r28
    2008:	e7 5b       	subi	r30, 0xB7	; 183
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	88 ec       	ldi	r24, 0xC8	; 200
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	80 83       	st	Z, r24
    2014:	fe 01       	movw	r30, r28
    2016:	e7 5b       	subi	r30, 0xB7	; 183
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <main+0x682>
    2022:	fe 01       	movw	r30, r28
    2024:	e7 5b       	subi	r30, 0xB7	; 183
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	de 01       	movw	r26, r28
    202e:	a5 5b       	subi	r26, 0xB5	; 181
    2030:	bf 4f       	sbci	r27, 0xFF	; 255
    2032:	fe 01       	movw	r30, r28
    2034:	e5 5b       	subi	r30, 0xB5	; 181
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	9c 93       	st	X, r25
    2042:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2044:	fe 01       	movw	r30, r28
    2046:	e5 5b       	subi	r30, 0xB5	; 181
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	d1 f6       	brne	.-76     	; 0x2006 <main+0x66a>
    2052:	27 c0       	rjmp	.+78     	; 0x20a2 <main+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2054:	8e 01       	movw	r16, r28
    2056:	05 5b       	subi	r16, 0xB5	; 181
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	fe 01       	movw	r30, r28
    205c:	e3 5b       	subi	r30, 0xB3	; 179
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	de 01       	movw	r26, r28
    2078:	a9 5b       	subi	r26, 0xB9	; 185
    207a:	bf 4f       	sbci	r27, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e5 5b       	subi	r30, 0xB5	; 181
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	91 81       	ldd	r25, Z+1	; 0x01
    2086:	8d 93       	st	X+, r24
    2088:	9c 93       	st	X, r25
    208a:	fe 01       	movw	r30, r28
    208c:	e9 5b       	subi	r30, 0xB9	; 185
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <main+0x6f8>
    2098:	fe 01       	movw	r30, r28
    209a:	e9 5b       	subi	r30, 0xB9	; 185
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	80 83       	st	Z, r24
				_delay_ms(500);
				counter-- ;
    20a2:	de 01       	movw	r26, r28
    20a4:	a0 58       	subi	r26, 0x80	; 128
    20a6:	bf 4f       	sbci	r27, 0xFF	; 255
    20a8:	fe 01       	movw	r30, r28
    20aa:	e0 58       	subi	r30, 0x80	; 128
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 81       	ld	r24, Z
    20b0:	81 50       	subi	r24, 0x01	; 1
    20b2:	8c 93       	st	X, r24
    20b4:	e3 c2       	rjmp	.+1478   	; 0x267c <main+0xce0>
			}
		}
		/*if the blinking switch is pressed then blinking the leds which are in the ON state*/
		else if((Dio_enuReadChannelId(DIO_PIN_6,&Bit_value3)==Dio_enuOK) &&(Bit_value3==PRESSED))
    20b6:	9e 01       	movw	r18, r28
    20b8:	2c 57       	subi	r18, 0x7C	; 124
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	86 e0       	ldi	r24, 0x06	; 6
    20be:	b9 01       	movw	r22, r18
    20c0:	0e 94 a2 06 	call	0xd44	; 0xd44 <Dio_enuReadChannelId>
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	09 f0       	breq	.+2      	; 0x20ca <main+0x72e>
    20c8:	d9 c2       	rjmp	.+1458   	; 0x267c <main+0xce0>
    20ca:	fe 01       	movw	r30, r28
    20cc:	ec 57       	subi	r30, 0x7C	; 124
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	88 23       	and	r24, r24
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <main+0x73c>
    20d6:	d2 c2       	rjmp	.+1444   	; 0x267c <main+0xce0>
		{
			for(iterator=0;iterator<counter;iterator++)
    20d8:	fe 01       	movw	r30, r28
    20da:	e1 58       	subi	r30, 0x81	; 129
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	10 82       	st	Z, r1
    20e0:	10 c0       	rjmp	.+32     	; 0x2102 <main+0x766>

			{
				Dio_enuWriteChannelId(iterator,DIO_u8HIGH);
    20e2:	fe 01       	movw	r30, r28
    20e4:	e1 58       	subi	r30, 0x81	; 129
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
			}
		}
		/*if the blinking switch is pressed then blinking the leds which are in the ON state*/
		else if((Dio_enuReadChannelId(DIO_PIN_6,&Bit_value3)==Dio_enuOK) &&(Bit_value3==PRESSED))
		{
			for(iterator=0;iterator<counter;iterator++)
    20f0:	de 01       	movw	r26, r28
    20f2:	a1 58       	subi	r26, 0x81	; 129
    20f4:	bf 4f       	sbci	r27, 0xFF	; 255
    20f6:	fe 01       	movw	r30, r28
    20f8:	e1 58       	subi	r30, 0x81	; 129
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	8f 5f       	subi	r24, 0xFF	; 255
    2100:	8c 93       	st	X, r24
    2102:	fe 01       	movw	r30, r28
    2104:	e1 58       	subi	r30, 0x81	; 129
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	fe 01       	movw	r30, r28
    2110:	e0 58       	subi	r30, 0x80	; 128
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	99 27       	eor	r25, r25
    2118:	87 fd       	sbrc	r24, 7
    211a:	90 95       	com	r25
    211c:	28 17       	cp	r18, r24
    211e:	39 07       	cpc	r19, r25
    2120:	04 f3       	brlt	.-64     	; 0x20e2 <main+0x746>
    2122:	fe 01       	movw	r30, r28
    2124:	ed 5b       	subi	r30, 0xBD	; 189
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	aa ef       	ldi	r26, 0xFA	; 250
    212e:	b3 e4       	ldi	r27, 0x43	; 67
    2130:	80 83       	st	Z, r24
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	a2 83       	std	Z+2, r26	; 0x02
    2136:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	8e 01       	movw	r16, r28
    213a:	01 5c       	subi	r16, 0xC1	; 193
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	ed 5b       	subi	r30, 0xBD	; 189
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a ef       	ldi	r20, 0xFA	; 250
    2152:	54 e4       	ldi	r21, 0x44	; 68
    2154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	f8 01       	movw	r30, r16
    215e:	80 83       	st	Z, r24
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	a2 83       	std	Z+2, r26	; 0x02
    2164:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2166:	fe 01       	movw	r30, r28
    2168:	ff 96       	adiw	r30, 0x3f	; 63
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <main+0x7f0>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9e af       	std	Y+62, r25	; 0x3e
    2188:	8d af       	std	Y+61, r24	; 0x3d
    218a:	46 c0       	rjmp	.+140    	; 0x2218 <main+0x87c>
	else if (__tmp > 65535)
    218c:	fe 01       	movw	r30, r28
    218e:	ff 96       	adiw	r30, 0x3f	; 63
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	3f ef       	ldi	r19, 0xFF	; 255
    219c:	4f e7       	ldi	r20, 0x7F	; 127
    219e:	57 e4       	ldi	r21, 0x47	; 71
    21a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21a4:	18 16       	cp	r1, r24
    21a6:	64 f5       	brge	.+88     	; 0x2200 <main+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	fe 01       	movw	r30, r28
    21aa:	ed 5b       	subi	r30, 0xBD	; 189
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e af       	std	Y+62, r25	; 0x3e
    21d4:	8d af       	std	Y+61, r24	; 0x3d
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <main+0x85a>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c af       	std	Y+60, r25	; 0x3c
    21de:	8b af       	std	Y+59, r24	; 0x3b
    21e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    21e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <main+0x848>
    21e8:	9c af       	std	Y+60, r25	; 0x3c
    21ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9e af       	std	Y+62, r25	; 0x3e
    21f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <main+0x83c>
    21fe:	16 c0       	rjmp	.+44     	; 0x222c <main+0x890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	fe 01       	movw	r30, r28
    2202:	ff 96       	adiw	r30, 0x3f	; 63
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e af       	std	Y+62, r25	; 0x3e
    2216:	8d af       	std	Y+61, r24	; 0x3d
    2218:	8d ad       	ldd	r24, Y+61	; 0x3d
    221a:	9e ad       	ldd	r25, Y+62	; 0x3e
    221c:	9a af       	std	Y+58, r25	; 0x3a
    221e:	89 af       	std	Y+57, r24	; 0x39
    2220:	89 ad       	ldd	r24, Y+57	; 0x39
    2222:	9a ad       	ldd	r25, Y+58	; 0x3a
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <main+0x888>
    2228:	9a af       	std	Y+58, r25	; 0x3a
    222a:	89 af       	std	Y+57, r24	; 0x39

			{
				Dio_enuWriteChannelId(iterator,DIO_u8HIGH);
			}
			_delay_ms(500);
			for(iterator=0;iterator<counter;iterator++)
    222c:	fe 01       	movw	r30, r28
    222e:	e1 58       	subi	r30, 0x81	; 129
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	10 82       	st	Z, r1
    2234:	10 c0       	rjmp	.+32     	; 0x2256 <main+0x8ba>
			{
				Dio_enuWriteChannelId(iterator,DIO_u8LOW);
    2236:	fe 01       	movw	r30, r28
    2238:	e1 58       	subi	r30, 0x81	; 129
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>

			{
				Dio_enuWriteChannelId(iterator,DIO_u8HIGH);
			}
			_delay_ms(500);
			for(iterator=0;iterator<counter;iterator++)
    2244:	de 01       	movw	r26, r28
    2246:	a1 58       	subi	r26, 0x81	; 129
    2248:	bf 4f       	sbci	r27, 0xFF	; 255
    224a:	fe 01       	movw	r30, r28
    224c:	e1 58       	subi	r30, 0x81	; 129
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	8c 93       	st	X, r24
    2256:	fe 01       	movw	r30, r28
    2258:	e1 58       	subi	r30, 0x81	; 129
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	fe 01       	movw	r30, r28
    2264:	e0 58       	subi	r30, 0x80	; 128
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	99 27       	eor	r25, r25
    226c:	87 fd       	sbrc	r24, 7
    226e:	90 95       	com	r25
    2270:	28 17       	cp	r18, r24
    2272:	39 07       	cpc	r19, r25
    2274:	04 f3       	brlt	.-64     	; 0x2236 <main+0x89a>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	aa ef       	ldi	r26, 0xFA	; 250
    227c:	b3 e4       	ldi	r27, 0x43	; 67
    227e:	8d ab       	std	Y+53, r24	; 0x35
    2280:	9e ab       	std	Y+54, r25	; 0x36
    2282:	af ab       	std	Y+55, r26	; 0x37
    2284:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	6d a9       	ldd	r22, Y+53	; 0x35
    2288:	7e a9       	ldd	r23, Y+54	; 0x36
    228a:	8f a9       	ldd	r24, Y+55	; 0x37
    228c:	98 ad       	ldd	r25, Y+56	; 0x38
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	54 e4       	ldi	r21, 0x44	; 68
    2296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	89 ab       	std	Y+49, r24	; 0x31
    22a0:	9a ab       	std	Y+50, r25	; 0x32
    22a2:	ab ab       	std	Y+51, r26	; 0x33
    22a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22a6:	69 a9       	ldd	r22, Y+49	; 0x31
    22a8:	7a a9       	ldd	r23, Y+50	; 0x32
    22aa:	8b a9       	ldd	r24, Y+51	; 0x33
    22ac:	9c a9       	ldd	r25, Y+52	; 0x34
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <main+0x92c>
		__ticks = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	98 ab       	std	Y+48, r25	; 0x30
    22c4:	8f a7       	std	Y+47, r24	; 0x2f
    22c6:	3f c0       	rjmp	.+126    	; 0x2346 <main+0x9aa>
	else if (__tmp > 65535)
    22c8:	69 a9       	ldd	r22, Y+49	; 0x31
    22ca:	7a a9       	ldd	r23, Y+50	; 0x32
    22cc:	8b a9       	ldd	r24, Y+51	; 0x33
    22ce:	9c a9       	ldd	r25, Y+52	; 0x34
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	4c f5       	brge	.+82     	; 0x2332 <main+0x996>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	6d a9       	ldd	r22, Y+53	; 0x35
    22e2:	7e a9       	ldd	r23, Y+54	; 0x36
    22e4:	8f a9       	ldd	r24, Y+55	; 0x37
    22e6:	98 ad       	ldd	r25, Y+56	; 0x38
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	98 ab       	std	Y+48, r25	; 0x30
    2306:	8f a7       	std	Y+47, r24	; 0x2f
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <main+0x98c>
    230a:	88 ec       	ldi	r24, 0xC8	; 200
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9e a7       	std	Y+46, r25	; 0x2e
    2310:	8d a7       	std	Y+45, r24	; 0x2d
    2312:	8d a5       	ldd	r24, Y+45	; 0x2d
    2314:	9e a5       	ldd	r25, Y+46	; 0x2e
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <main+0x97a>
    231a:	9e a7       	std	Y+46, r25	; 0x2e
    231c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2320:	98 a9       	ldd	r25, Y+48	; 0x30
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	98 ab       	std	Y+48, r25	; 0x30
    2326:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	8f a5       	ldd	r24, Y+47	; 0x2f
    232a:	98 a9       	ldd	r25, Y+48	; 0x30
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	69 f7       	brne	.-38     	; 0x230a <main+0x96e>
    2330:	a5 c1       	rjmp	.+842    	; 0x267c <main+0xce0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	69 a9       	ldd	r22, Y+49	; 0x31
    2334:	7a a9       	ldd	r23, Y+50	; 0x32
    2336:	8b a9       	ldd	r24, Y+51	; 0x33
    2338:	9c a9       	ldd	r25, Y+52	; 0x34
    233a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	98 ab       	std	Y+48, r25	; 0x30
    2344:	8f a7       	std	Y+47, r24	; 0x2f
    2346:	8f a5       	ldd	r24, Y+47	; 0x2f
    2348:	98 a9       	ldd	r25, Y+48	; 0x30
    234a:	9c a7       	std	Y+44, r25	; 0x2c
    234c:	8b a7       	std	Y+43, r24	; 0x2b
    234e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2350:	9c a5       	ldd	r25, Y+44	; 0x2c
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <main+0x9b6>
    2356:	9c a7       	std	Y+44, r25	; 0x2c
    2358:	8b a7       	std	Y+43, r24	; 0x2b
    235a:	90 c1       	rjmp	.+800    	; 0x267c <main+0xce0>
			_delay_ms(500);
		}
		/*if we exceed the led no 8 or decremented less than led no 0, the status falg will be equal 1*/
		while(status_flag==1)
		{
			Dio_enuWriteChannelId(DIO_PIN_1,DIO_u8HIGH);
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	aa ef       	ldi	r26, 0xFA	; 250
    236a:	b3 e4       	ldi	r27, 0x43	; 67
    236c:	8f a3       	std	Y+39, r24	; 0x27
    236e:	98 a7       	std	Y+40, r25	; 0x28
    2370:	a9 a7       	std	Y+41, r26	; 0x29
    2372:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	6f a1       	ldd	r22, Y+39	; 0x27
    2376:	78 a5       	ldd	r23, Y+40	; 0x28
    2378:	89 a5       	ldd	r24, Y+41	; 0x29
    237a:	9a a5       	ldd	r25, Y+42	; 0x2a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a ef       	ldi	r20, 0xFA	; 250
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8b a3       	std	Y+35, r24	; 0x23
    238e:	9c a3       	std	Y+36, r25	; 0x24
    2390:	ad a3       	std	Y+37, r26	; 0x25
    2392:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2394:	6b a1       	ldd	r22, Y+35	; 0x23
    2396:	7c a1       	ldd	r23, Y+36	; 0x24
    2398:	8d a1       	ldd	r24, Y+37	; 0x25
    239a:	9e a1       	ldd	r25, Y+38	; 0x26
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <main+0xa1a>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	89 a3       	std	Y+33, r24	; 0x21
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <main+0xa98>
	else if (__tmp > 65535)
    23b6:	6b a1       	ldd	r22, Y+35	; 0x23
    23b8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ba:	8d a1       	ldd	r24, Y+37	; 0x25
    23bc:	9e a1       	ldd	r25, Y+38	; 0x26
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <main+0xa84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	6f a1       	ldd	r22, Y+39	; 0x27
    23d0:	78 a5       	ldd	r23, Y+40	; 0x28
    23d2:	89 a5       	ldd	r24, Y+41	; 0x29
    23d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9a a3       	std	Y+34, r25	; 0x22
    23f4:	89 a3       	std	Y+33, r24	; 0x21
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <main+0xa7a>
    23f8:	88 ec       	ldi	r24, 0xC8	; 200
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	98 a3       	std	Y+32, r25	; 0x20
    23fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2400:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2402:	98 a1       	ldd	r25, Y+32	; 0x20
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <main+0xa68>
    2408:	98 a3       	std	Y+32, r25	; 0x20
    240a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	89 a1       	ldd	r24, Y+33	; 0x21
    240e:	9a a1       	ldd	r25, Y+34	; 0x22
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9a a3       	std	Y+34, r25	; 0x22
    2414:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	89 a1       	ldd	r24, Y+33	; 0x21
    2418:	9a a1       	ldd	r25, Y+34	; 0x22
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <main+0xa5c>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6b a1       	ldd	r22, Y+35	; 0x23
    2422:	7c a1       	ldd	r23, Y+36	; 0x24
    2424:	8d a1       	ldd	r24, Y+37	; 0x25
    2426:	9e a1       	ldd	r25, Y+38	; 0x26
    2428:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9a a3       	std	Y+34, r25	; 0x22
    2432:	89 a3       	std	Y+33, r24	; 0x21
    2434:	89 a1       	ldd	r24, Y+33	; 0x21
    2436:	9a a1       	ldd	r25, Y+34	; 0x22
    2438:	9e 8f       	std	Y+30, r25	; 0x1e
    243a:	8d 8f       	std	Y+29, r24	; 0x1d
    243c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    243e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <main+0xaa4>
    2444:	9e 8f       	std	Y+30, r25	; 0x1e
    2446:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			Dio_enuWriteChannelId(DIO_PIN_1,DIO_u8LOW);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	aa ef       	ldi	r26, 0xFA	; 250
    2456:	b3 e4       	ldi	r27, 0x43	; 67
    2458:	89 8f       	std	Y+25, r24	; 0x19
    245a:	9a 8f       	std	Y+26, r25	; 0x1a
    245c:	ab 8f       	std	Y+27, r26	; 0x1b
    245e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	69 8d       	ldd	r22, Y+25	; 0x19
    2462:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2464:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2466:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4a ef       	ldi	r20, 0xFA	; 250
    246e:	54 e4       	ldi	r21, 0x44	; 68
    2470:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	8d 8b       	std	Y+21, r24	; 0x15
    247a:	9e 8b       	std	Y+22, r25	; 0x16
    247c:	af 8b       	std	Y+23, r26	; 0x17
    247e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2480:	6d 89       	ldd	r22, Y+21	; 0x15
    2482:	7e 89       	ldd	r23, Y+22	; 0x16
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <main+0xb06>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 8b       	std	Y+20, r25	; 0x14
    249e:	8b 8b       	std	Y+19, r24	; 0x13
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <main+0xb84>
	else if (__tmp > 65535)
    24a2:	6d 89       	ldd	r22, Y+21	; 0x15
    24a4:	7e 89       	ldd	r23, Y+22	; 0x16
    24a6:	8f 89       	ldd	r24, Y+23	; 0x17
    24a8:	98 8d       	ldd	r25, Y+24	; 0x18
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	3f ef       	ldi	r19, 0xFF	; 255
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	57 e4       	ldi	r21, 0x47	; 71
    24b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	4c f5       	brge	.+82     	; 0x250c <main+0xb70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	69 8d       	ldd	r22, Y+25	; 0x19
    24bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
    24e2:	0f c0       	rjmp	.+30     	; 0x2502 <main+0xb66>
    24e4:	88 ec       	ldi	r24, 0xC8	; 200
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9a 8b       	std	Y+18, r25	; 0x12
    24ea:	89 8b       	std	Y+17, r24	; 0x11
    24ec:	89 89       	ldd	r24, Y+17	; 0x11
    24ee:	9a 89       	ldd	r25, Y+18	; 0x12
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <main+0xb54>
    24f4:	9a 8b       	std	Y+18, r25	; 0x12
    24f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	8b 89       	ldd	r24, Y+19	; 0x13
    24fa:	9c 89       	ldd	r25, Y+20	; 0x14
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	9c 8b       	std	Y+20, r25	; 0x14
    2500:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	8b 89       	ldd	r24, Y+19	; 0x13
    2504:	9c 89       	ldd	r25, Y+20	; 0x14
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	69 f7       	brne	.-38     	; 0x24e4 <main+0xb48>
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <main+0xb98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	6d 89       	ldd	r22, Y+21	; 0x15
    250e:	7e 89       	ldd	r23, Y+22	; 0x16
    2510:	8f 89       	ldd	r24, Y+23	; 0x17
    2512:	98 8d       	ldd	r25, Y+24	; 0x18
    2514:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
    2520:	8b 89       	ldd	r24, Y+19	; 0x13
    2522:	9c 89       	ldd	r25, Y+20	; 0x14
    2524:	98 8b       	std	Y+16, r25	; 0x10
    2526:	8f 87       	std	Y+15, r24	; 0x0f
    2528:	8f 85       	ldd	r24, Y+15	; 0x0f
    252a:	98 89       	ldd	r25, Y+16	; 0x10
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <main+0xb90>
    2530:	98 8b       	std	Y+16, r25	; 0x10
    2532:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			/*conditions to break this while loop*/
			if((Dio_enuReadChannelId(DIO_PIN_4,&Bit_value1)==Dio_enuOK) &&(Bit_value1==PRESSED))
    2534:	9e 01       	movw	r18, r28
    2536:	2e 57       	subi	r18, 0x7E	; 126
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	84 e0       	ldi	r24, 0x04	; 4
    253c:	b9 01       	movw	r22, r18
    253e:	0e 94 a2 06 	call	0xd44	; 0xd44 <Dio_enuReadChannelId>
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	81 f4       	brne	.+32     	; 0x2566 <main+0xbca>
    2546:	fe 01       	movw	r30, r28
    2548:	ee 57       	subi	r30, 0x7E	; 126
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 81       	ld	r24, Z
    254e:	88 23       	and	r24, r24
    2550:	51 f4       	brne	.+20     	; 0x2566 <main+0xbca>
			{
				if ((counter<7))
    2552:	fe 01       	movw	r30, r28
    2554:	e0 58       	subi	r30, 0x80	; 128
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	87 30       	cpi	r24, 0x07	; 7
    255c:	24 f4       	brge	.+8      	; 0x2566 <main+0xbca>
				{
					status_flag=0;
    255e:	fe 01       	movw	r30, r28
    2560:	ef 57       	subi	r30, 0x7F	; 127
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	10 82       	st	Z, r1
				}
			}
			if((Dio_enuReadChannelId(DIO_PIN_5,&Bit_value2)==Dio_enuOK) &&(Bit_value2==PRESSED))
    2566:	9e 01       	movw	r18, r28
    2568:	2d 57       	subi	r18, 0x7D	; 125
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	85 e0       	ldi	r24, 0x05	; 5
    256e:	b9 01       	movw	r22, r18
    2570:	0e 94 a2 06 	call	0xd44	; 0xd44 <Dio_enuReadChannelId>
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	81 f4       	brne	.+32     	; 0x2598 <main+0xbfc>
    2578:	fe 01       	movw	r30, r28
    257a:	ed 57       	subi	r30, 0x7D	; 125
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	88 23       	and	r24, r24
    2582:	51 f4       	brne	.+20     	; 0x2598 <main+0xbfc>
			{
				if ((counter>0))
    2584:	fe 01       	movw	r30, r28
    2586:	e0 58       	subi	r30, 0x80	; 128
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	18 16       	cp	r1, r24
    258e:	24 f4       	brge	.+8      	; 0x2598 <main+0xbfc>
				{
					status_flag=0;
    2590:	fe 01       	movw	r30, r28
    2592:	ef 57       	subi	r30, 0x7F	; 127
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	10 82       	st	Z, r1
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a8 ec       	ldi	r26, 0xC8	; 200
    259e:	b2 e4       	ldi	r27, 0x42	; 66
    25a0:	8b 87       	std	Y+11, r24	; 0x0b
    25a2:	9c 87       	std	Y+12, r25	; 0x0c
    25a4:	ad 87       	std	Y+13, r26	; 0x0d
    25a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a ef       	ldi	r20, 0xFA	; 250
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8f 83       	std	Y+7, r24	; 0x07
    25c2:	98 87       	std	Y+8, r25	; 0x08
    25c4:	a9 87       	std	Y+9, r26	; 0x09
    25c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <main+0xc4e>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	3f c0       	rjmp	.+126    	; 0x2668 <main+0xccc>
	else if (__tmp > 65535)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	4c f5       	brge	.+82     	; 0x2654 <main+0xcb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	6b 85       	ldd	r22, Y+11	; 0x0b
    2604:	7c 85       	ldd	r23, Y+12	; 0x0c
    2606:	8d 85       	ldd	r24, Y+13	; 0x0d
    2608:	9e 85       	ldd	r25, Y+14	; 0x0e
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e2       	ldi	r20, 0x20	; 32
    2610:	51 e4       	ldi	r21, 0x41	; 65
    2612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	0f c0       	rjmp	.+30     	; 0x264a <main+0xcae>
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <main+0xc9c>
    263c:	9c 83       	std	Y+4, r25	; 0x04
    263e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	9e 81       	ldd	r25, Y+6	; 0x06
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	69 f7       	brne	.-38     	; 0x262c <main+0xc90>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <main+0xce0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <main+0xcd8>
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
				Dio_enuWriteChannelId(iterator,DIO_u8LOW);
			}
			_delay_ms(500);
		}
		/*if we exceed the led no 8 or decremented less than led no 0, the status falg will be equal 1*/
		while(status_flag==1)
    267c:	fe 01       	movw	r30, r28
    267e:	ef 57       	subi	r30, 0x7F	; 127
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	09 f4       	brne	.+2      	; 0x268a <main+0xcee>
    2688:	69 ce       	rjmp	.-814    	; 0x235c <main+0x9c0>
    268a:	e3 c9       	rjmp	.-3130   	; 0x1a52 <main+0xb6>

0000268c <__prologue_saves__>:
    268c:	2f 92       	push	r2
    268e:	3f 92       	push	r3
    2690:	4f 92       	push	r4
    2692:	5f 92       	push	r5
    2694:	6f 92       	push	r6
    2696:	7f 92       	push	r7
    2698:	8f 92       	push	r8
    269a:	9f 92       	push	r9
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	cf 92       	push	r12
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	ca 1b       	sub	r28, r26
    26b6:	db 0b       	sbc	r29, r27
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	09 94       	ijmp

000026c4 <__epilogue_restores__>:
    26c4:	2a 88       	ldd	r2, Y+18	; 0x12
    26c6:	39 88       	ldd	r3, Y+17	; 0x11
    26c8:	48 88       	ldd	r4, Y+16	; 0x10
    26ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    26cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    26ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    26d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26d6:	b9 84       	ldd	r11, Y+9	; 0x09
    26d8:	c8 84       	ldd	r12, Y+8	; 0x08
    26da:	df 80       	ldd	r13, Y+7	; 0x07
    26dc:	ee 80       	ldd	r14, Y+6	; 0x06
    26de:	fd 80       	ldd	r15, Y+5	; 0x05
    26e0:	0c 81       	ldd	r16, Y+4	; 0x04
    26e2:	1b 81       	ldd	r17, Y+3	; 0x03
    26e4:	aa 81       	ldd	r26, Y+2	; 0x02
    26e6:	b9 81       	ldd	r27, Y+1	; 0x01
    26e8:	ce 0f       	add	r28, r30
    26ea:	d1 1d       	adc	r29, r1
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	ed 01       	movw	r28, r26
    26f8:	08 95       	ret

000026fa <_exit>:
    26fa:	f8 94       	cli

000026fc <__stop_program>:
    26fc:	ff cf       	rjmp	.-2      	; 0x26fc <__stop_program>


Lcd_task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000038fc  00003970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002910  00000000  00000000  00003978  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001497  00000000  00000000  00006288  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000771f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000785f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000079cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a503  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000be6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 84 11 	call	0x2308	; 0x2308 <main>
      7a:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Dio_enuWriteChannelId>:
  Write on pin
  take two args Copy_u8ChannedId and Copy_u8Level
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuWriteChannelId(u8 Copy_u8ChannedId,u8 Copy_u8Level)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8c 83       	std	Y+4, r24	; 0x04
     b4c:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port = Copy_u8ChannedId/8 ;
     b52:	8c 81       	ldd	r24, Y+4	; 0x04
     b54:	86 95       	lsr	r24
     b56:	86 95       	lsr	r24
     b58:	86 95       	lsr	r24
     b5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Pin = (Copy_u8ChannedId%8) ;
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	87 70       	andi	r24, 0x07	; 7
     b60:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8ChannedId<=32)
     b62:	8c 81       	ldd	r24, Y+4	; 0x04
     b64:	81 32       	cpi	r24, 0x21	; 33
     b66:	08 f0       	brcs	.+2      	; 0xb6a <Dio_enuWriteChannelId+0x34>
     b68:	e1 c0       	rjmp	.+450    	; 0xd2c <Dio_enuWriteChannelId+0x1f6>
	{
		switch (Loc_u8Port)
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3f 83       	std	Y+7, r19	; 0x07
     b72:	2e 83       	std	Y+6, r18	; 0x06
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <Dio_enuWriteChannelId+0x4a>
     b7e:	47 c0       	rjmp	.+142    	; 0xc0e <Dio_enuWriteChannelId+0xd8>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <Dio_enuWriteChannelId+0x5e>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <Dio_enuWriteChannelId+0x78>
     b92:	ce c0       	rjmp	.+412    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <Dio_enuWriteChannelId+0x6a>
     b9e:	67 c0       	rjmp	.+206    	; 0xc6e <Dio_enuWriteChannelId+0x138>
     ba0:	8e 81       	ldd	r24, Y+6	; 0x06
     ba2:	9f 81       	ldd	r25, Y+7	; 0x07
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <Dio_enuWriteChannelId+0x76>
     baa:	91 c0       	rjmp	.+290    	; 0xcce <Dio_enuWriteChannelId+0x198>
     bac:	c1 c0       	rjmp	.+386    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
		{
		case PORT_A:

			if(Copy_u8Level==DIO_u8HIGH)
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <Dio_enuWriteChannelId+0xa6>
			{
				SET_BIT(PORTA,Loc_u8Pin);
     bb4:	ab e3       	ldi	r26, 0x3B	; 59
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	eb e3       	ldi	r30, 0x3B	; 59
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Dio_enuWriteChannelId+0x9c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <Dio_enuWriteChannelId+0x98>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	aa c0       	rjmp	.+340    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     bdc:	8d 81       	ldd	r24, Y+5	; 0x05
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <Dio_enuWriteChannelId+0xae>
     be2:	a6 c0       	rjmp	.+332    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTA,Loc_u8Pin);
     be4:	ab e3       	ldi	r26, 0x3B	; 59
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	eb e3       	ldi	r30, 0x3B	; 59
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <Dio_enuWriteChannelId+0xcc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <Dio_enuWriteChannelId+0xc8>
     c06:	80 95       	com	r24
     c08:	84 23       	and	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	91 c0       	rjmp	.+290    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}

			break;
		case PORT_B:
			if(Copy_u8Level==DIO_u8HIGH)
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	a1 f4       	brne	.+40     	; 0xc3c <Dio_enuWriteChannelId+0x106>
			{
				SET_BIT(PORTB,Loc_u8Pin);
     c14:	a8 e3       	ldi	r26, 0x38	; 56
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e8 e3       	ldi	r30, 0x38	; 56
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <Dio_enuWriteChannelId+0xfc>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <Dio_enuWriteChannelId+0xf8>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	7a c0       	rjmp	.+244    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <Dio_enuWriteChannelId+0x10e>
     c42:	76 c0       	rjmp	.+236    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTB,Loc_u8Pin);
     c44:	a8 e3       	ldi	r26, 0x38	; 56
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 e3       	ldi	r30, 0x38	; 56
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <Dio_enuWriteChannelId+0x12c>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <Dio_enuWriteChannelId+0x128>
     c66:	80 95       	com	r24
     c68:	84 23       	and	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	61 c0       	rjmp	.+194    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_C:
			if(Copy_u8Level==DIO_u8HIGH)
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <Dio_enuWriteChannelId+0x166>
			{
				SET_BIT(PORTC,Loc_u8Pin);
     c74:	a5 e3       	ldi	r26, 0x35	; 53
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e5 e3       	ldi	r30, 0x35	; 53
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <Dio_enuWriteChannelId+0x15c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <Dio_enuWriteChannelId+0x158>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	4a c0       	rjmp	.+148    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	88 23       	and	r24, r24
     ca0:	09 f0       	breq	.+2      	; 0xca4 <Dio_enuWriteChannelId+0x16e>
     ca2:	46 c0       	rjmp	.+140    	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTC,Loc_u8Pin);
     ca4:	a5 e3       	ldi	r26, 0x35	; 53
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e5 e3       	ldi	r30, 0x35	; 53
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <Dio_enuWriteChannelId+0x18c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <Dio_enuWriteChannelId+0x188>
     cc6:	80 95       	com	r24
     cc8:	84 23       	and	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	31 c0       	rjmp	.+98     	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			break ;
		case PORT_D:
			if(Copy_u8Level==DIO_u8HIGH)
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	a1 f4       	brne	.+40     	; 0xcfc <Dio_enuWriteChannelId+0x1c6>
			{
				SET_BIT(PORTD,Loc_u8Pin);
     cd4:	a2 e3       	ldi	r26, 0x32	; 50
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <Dio_enuWriteChannelId+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <Dio_enuWriteChannelId+0x1b8>
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	1a c0       	rjmp	.+52     	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			}
			else if(Copy_u8Level==DIO_u8LOW)
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	88 23       	and	r24, r24
     d00:	b9 f4       	brne	.+46     	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			{
				CLR_BIT(PORTD,Loc_u8Pin);
     d02:	a2 e3       	ldi	r26, 0x32	; 50
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e2 e3       	ldi	r30, 0x32	; 50
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <Dio_enuWriteChannelId+0x1ea>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <Dio_enuWriteChannelId+0x1e6>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <Dio_enuWriteChannelId+0x1fa>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =  Dio_enuPortError ;
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	8b 83       	std	Y+3, r24	; 0x03

	}
	return Loc_enuReturnStatus;
     d30:	8b 81       	ldd	r24, Y+3	; 0x03

}
     d32:	27 96       	adiw	r28, 0x07	; 7
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <Dio_enuReadChannelId>:
  Read from pin
  take two args Copy_u8ChannedId and Add_pu8ChannelLevel
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadChannelId(u8 Copy_u8ChannedId, pu8 Add_pu8ChannelLevel)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	28 97       	sbiw	r28, 0x08	; 8
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	8c 83       	std	Y+4, r24	; 0x04
     d5a:	7e 83       	std	Y+6, r23	; 0x06
     d5c:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	81 32       	cpi	r24, 0x21	; 33
     d66:	08 f0       	brcs	.+2      	; 0xd6a <Dio_enuReadChannelId+0x26>
     d68:	79 c0       	rjmp	.+242    	; 0xe5c <Dio_enuReadChannelId+0x118>
	{
		u8 Loc_u8Port = (Copy_u8ChannedId/8) ;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	86 95       	lsr	r24
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = (Copy_u8ChannedId%8)  ;
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	87 70       	andi	r24, 0x07	; 7
     d78:	89 83       	std	Y+1, r24	; 0x01

		switch (Loc_u8Port)
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	38 87       	std	Y+8, r19	; 0x08
     d82:	2f 83       	std	Y+7, r18	; 0x07
     d84:	4f 81       	ldd	r20, Y+7	; 0x07
     d86:	58 85       	ldd	r21, Y+8	; 0x08
     d88:	41 30       	cpi	r20, 0x01	; 1
     d8a:	51 05       	cpc	r21, r1
     d8c:	59 f1       	breq	.+86     	; 0xde4 <Dio_enuReadChannelId+0xa0>
     d8e:	8f 81       	ldd	r24, Y+7	; 0x07
     d90:	98 85       	ldd	r25, Y+8	; 0x08
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	34 f4       	brge	.+12     	; 0xda4 <Dio_enuReadChannelId+0x60>
     d98:	2f 81       	ldd	r18, Y+7	; 0x07
     d9a:	38 85       	ldd	r19, Y+8	; 0x08
     d9c:	21 15       	cp	r18, r1
     d9e:	31 05       	cpc	r19, r1
     da0:	69 f0       	breq	.+26     	; 0xdbc <Dio_enuReadChannelId+0x78>
     da2:	5e c0       	rjmp	.+188    	; 0xe60 <Dio_enuReadChannelId+0x11c>
     da4:	4f 81       	ldd	r20, Y+7	; 0x07
     da6:	58 85       	ldd	r21, Y+8	; 0x08
     da8:	42 30       	cpi	r20, 0x02	; 2
     daa:	51 05       	cpc	r21, r1
     dac:	79 f1       	breq	.+94     	; 0xe0c <Dio_enuReadChannelId+0xc8>
     dae:	8f 81       	ldd	r24, Y+7	; 0x07
     db0:	98 85       	ldd	r25, Y+8	; 0x08
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <Dio_enuReadChannelId+0x76>
     db8:	3d c0       	rjmp	.+122    	; 0xe34 <Dio_enuReadChannelId+0xf0>
     dba:	52 c0       	rjmp	.+164    	; 0xe60 <Dio_enuReadChannelId+0x11c>
		{
		case PORT_A:
			*Add_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
     dbc:	e9 e3       	ldi	r30, 0x39	; 57
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <Dio_enuReadChannelId+0x90>
     dd0:	55 95       	asr	r21
     dd2:	47 95       	ror	r20
     dd4:	8a 95       	dec	r24
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <Dio_enuReadChannelId+0x8c>
     dd8:	ca 01       	movw	r24, r20
     dda:	81 70       	andi	r24, 0x01	; 1
     ddc:	ed 81       	ldd	r30, Y+5	; 0x05
     dde:	fe 81       	ldd	r31, Y+6	; 0x06
     de0:	80 83       	st	Z, r24
     de2:	3e c0       	rjmp	.+124    	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break;
		case PORT_B:
			*Add_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
     de4:	e6 e3       	ldi	r30, 0x36	; 54
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a9 01       	movw	r20, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <Dio_enuReadChannelId+0xb8>
     df8:	55 95       	asr	r21
     dfa:	47 95       	ror	r20
     dfc:	8a 95       	dec	r24
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <Dio_enuReadChannelId+0xb4>
     e00:	ca 01       	movw	r24, r20
     e02:	81 70       	andi	r24, 0x01	; 1
     e04:	ed 81       	ldd	r30, Y+5	; 0x05
     e06:	fe 81       	ldd	r31, Y+6	; 0x06
     e08:	80 83       	st	Z, r24
     e0a:	2a c0       	rjmp	.+84     	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_C:
			*Add_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
     e0c:	e3 e3       	ldi	r30, 0x33	; 51
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <Dio_enuReadChannelId+0xe0>
     e20:	55 95       	asr	r21
     e22:	47 95       	ror	r20
     e24:	8a 95       	dec	r24
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <Dio_enuReadChannelId+0xdc>
     e28:	ca 01       	movw	r24, r20
     e2a:	81 70       	andi	r24, 0x01	; 1
     e2c:	ed 81       	ldd	r30, Y+5	; 0x05
     e2e:	fe 81       	ldd	r31, Y+6	; 0x06
     e30:	80 83       	st	Z, r24
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break ;
		case PORT_D:
			*Add_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
     e34:	e0 e3       	ldi	r30, 0x30	; 48
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <Dio_enuReadChannelId+0x108>
     e48:	55 95       	asr	r21
     e4a:	47 95       	ror	r20
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <Dio_enuReadChannelId+0x104>
     e50:	ca 01       	movw	r24, r20
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	ed 81       	ldd	r30, Y+5	; 0x05
     e56:	fe 81       	ldd	r31, Y+6	; 0x06
     e58:	80 83       	st	Z, r24
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <Dio_enuReadChannelId+0x11c>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
     e60:	8b 81       	ldd	r24, Y+3	; 0x03

}
     e62:	28 96       	adiw	r28, 0x08	; 8
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <Dio_enuWritePort>:
  take two args Copy_u8PortID and Copy_u8Level
  return Dio_tenuErrorStatus
 */

Dio_tenuErrorStatus Dio_enuWritePort(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <Dio_enuWritePort+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <Dio_enuWritePort+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	8a 83       	std	Y+2, r24	; 0x02
     e84:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID<=PORT_SIZE)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	98 f5       	brcc	.+102    	; 0xef6 <Dio_enuWritePort+0x82>
	{
		switch (Copy_u8PortID)
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	3d 83       	std	Y+5, r19	; 0x05
     e98:	2c 83       	std	Y+4, r18	; 0x04
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	91 05       	cpc	r25, r1
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <Dio_enuWritePort+0x64>
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	2c f4       	brge	.+10     	; 0xeb8 <Dio_enuWritePort+0x44>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	61 f0       	breq	.+24     	; 0xece <Dio_enuWritePort+0x5a>
     eb6:	21 c0       	rjmp	.+66     	; 0xefa <Dio_enuWritePort+0x86>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	22 30       	cpi	r18, 0x02	; 2
     ebe:	31 05       	cpc	r19, r1
     ec0:	81 f0       	breq	.+32     	; 0xee2 <Dio_enuWritePort+0x6e>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	91 05       	cpc	r25, r1
     eca:	81 f0       	breq	.+32     	; 0xeec <Dio_enuWritePort+0x78>
     ecc:	16 c0       	rjmp	.+44     	; 0xefa <Dio_enuWritePort+0x86>
		{
		case PORT_A:
			ASSIGN_REG(PORTA,Copy_u8Value);
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	80 83       	st	Z, r24
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <Dio_enuWritePort+0x86>
			break;
		case PORT_B:
			ASSIGN_REG(PORTB,Copy_u8Value);
     ed8:	e8 e3       	ldi	r30, 0x38	; 56
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	80 83       	st	Z, r24
     ee0:	0c c0       	rjmp	.+24     	; 0xefa <Dio_enuWritePort+0x86>
			break ;
		case PORT_C:
			ASSIGN_REG(PORTC,Copy_u8Value);
     ee2:	e5 e3       	ldi	r30, 0x35	; 53
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	80 83       	st	Z, r24
     eea:	07 c0       	rjmp	.+14     	; 0xefa <Dio_enuWritePort+0x86>
			break ;
		case PORT_D:
			ASSIGN_REG(PORTD,Copy_u8Value);
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	80 83       	st	Z, r24
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <Dio_enuWritePort+0x86>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPortError;
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <Dio_enuReadPort>:
  Read from port
  take two args Copy_u8PortID and Add_pu8PortValue
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuReadPort(u8 Copy_u8PortId, pu8 Add_pu8PortValue)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <Dio_enuReadPort+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <Dio_enuReadPort+0x8>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <Dio_enuReadPort+0xa>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	7c 83       	std	Y+4, r23	; 0x04
     f1e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId<=PORT_SIZE)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	d8 f5       	brcc	.+118    	; 0xfa0 <Dio_enuReadPort+0x94>
	{

		switch (Copy_u8PortId)
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	e1 f0       	breq	.+56     	; 0xf76 <Dio_enuReadPort+0x6a>
     f3e:	2d 81       	ldd	r18, Y+5	; 0x05
     f40:	3e 81       	ldd	r19, Y+6	; 0x06
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	2c f4       	brge	.+10     	; 0xf52 <Dio_enuReadPort+0x46>
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	61 f0       	breq	.+24     	; 0xf68 <Dio_enuReadPort+0x5c>
     f50:	29 c0       	rjmp	.+82     	; 0xfa4 <Dio_enuReadPort+0x98>
     f52:	2d 81       	ldd	r18, Y+5	; 0x05
     f54:	3e 81       	ldd	r19, Y+6	; 0x06
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	a1 f0       	breq	.+40     	; 0xf84 <Dio_enuReadPort+0x78>
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	b1 f0       	breq	.+44     	; 0xf92 <Dio_enuReadPort+0x86>
     f66:	1e c0       	rjmp	.+60     	; 0xfa4 <Dio_enuReadPort+0x98>
		{
		case PORT_A:
			*Add_pu8PortValue = PORTA;
     f68:	eb e3       	ldi	r30, 0x3B	; 59
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	eb 81       	ldd	r30, Y+3	; 0x03
     f70:	fc 81       	ldd	r31, Y+4	; 0x04
     f72:	80 83       	st	Z, r24
     f74:	17 c0       	rjmp	.+46     	; 0xfa4 <Dio_enuReadPort+0x98>
			break;
		case PORT_B:
			*Add_pu8PortValue = PORTB;
     f76:	e8 e3       	ldi	r30, 0x38	; 56
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	eb 81       	ldd	r30, Y+3	; 0x03
     f7e:	fc 81       	ldd	r31, Y+4	; 0x04
     f80:	80 83       	st	Z, r24
     f82:	10 c0       	rjmp	.+32     	; 0xfa4 <Dio_enuReadPort+0x98>
			break ;
		case PORT_C:
			*Add_pu8PortValue = PORTC;
     f84:	e5 e3       	ldi	r30, 0x35	; 53
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	eb 81       	ldd	r30, Y+3	; 0x03
     f8c:	fc 81       	ldd	r31, Y+4	; 0x04
     f8e:	80 83       	st	Z, r24
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <Dio_enuReadPort+0x98>
			break ;
		case PORT_D:
			*Add_pu8PortValue =PORTD;
     f92:	e2 e3       	ldi	r30, 0x32	; 50
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	eb 81       	ldd	r30, Y+3	; 0x03
     f9a:	fc 81       	ldd	r31, Y+4	; 0x04
     f9c:	80 83       	st	Z, r24
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <Dio_enuReadPort+0x98>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuReturnStatus;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01

}
     fa6:	26 96       	adiw	r28, 0x06	; 6
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <Dio_enuFlipChannel>:
  Toggle Pin
  take one arg Copy_u8ChannedId
  return Dio_tenuErrorStatus
 */
Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannedId)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <Dio_enuFlipChannel+0x6>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <Dio_enuFlipChannel+0x8>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <Dio_enuFlipChannel+0xa>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8ChannedId<=32)
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	81 32       	cpi	r24, 0x21	; 33
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <Dio_enuFlipChannel+0x1c>
     fd2:	77 c0       	rjmp	.+238    	; 0x10c2 <Dio_enuFlipChannel+0x10a>
	{
		u8 Loc_u8Port= Copy_u8ChannedId/8 ;
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	86 95       	lsr	r24
     fd8:	86 95       	lsr	r24
     fda:	86 95       	lsr	r24
     fdc:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8Pin = Copy_u8ChannedId%8 ;
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	87 70       	andi	r24, 0x07	; 7
     fe2:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8Port)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3e 83       	std	Y+6, r19	; 0x06
     fec:	2d 83       	std	Y+5, r18	; 0x05
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	91 05       	cpc	r25, r1
     ff6:	49 f1       	breq	.+82     	; 0x104a <Dio_enuFlipChannel+0x92>
     ff8:	2d 81       	ldd	r18, Y+5	; 0x05
     ffa:	3e 81       	ldd	r19, Y+6	; 0x06
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	2c f4       	brge	.+10     	; 0x100c <Dio_enuFlipChannel+0x54>
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	9e 81       	ldd	r25, Y+6	; 0x06
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	61 f0       	breq	.+24     	; 0x1022 <Dio_enuFlipChannel+0x6a>
    100a:	5d c0       	rjmp	.+186    	; 0x10c6 <Dio_enuFlipChannel+0x10e>
    100c:	2d 81       	ldd	r18, Y+5	; 0x05
    100e:	3e 81       	ldd	r19, Y+6	; 0x06
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	71 f1       	breq	.+92     	; 0x1072 <Dio_enuFlipChannel+0xba>
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	e9 f1       	breq	.+122    	; 0x109a <Dio_enuFlipChannel+0xe2>
    1020:	52 c0       	rjmp	.+164    	; 0x10c6 <Dio_enuFlipChannel+0x10e>
		{
		case PORT_A:
			TGL_BIT(PORTA,Loc_u8Pin);
    1022:	ab e3       	ldi	r26, 0x3B	; 59
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	eb e3       	ldi	r30, 0x3B	; 59
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <Dio_enuFlipChannel+0x88>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <Dio_enuFlipChannel+0x84>
    1044:	84 27       	eor	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	3e c0       	rjmp	.+124    	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break;
		case PORT_B:
			TGL_BIT(PORTA,Loc_u8Pin);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <Dio_enuFlipChannel+0xb0>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <Dio_enuFlipChannel+0xac>
    106c:	84 27       	eor	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	2a c0       	rjmp	.+84     	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_C:
			TGL_BIT(PORTA,Loc_u8Pin);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <Dio_enuFlipChannel+0xd8>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <Dio_enuFlipChannel+0xd4>
    1094:	84 27       	eor	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	16 c0       	rjmp	.+44     	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break ;
		case PORT_D:
			TGL_BIT(PORTA,Loc_u8Pin);
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <Dio_enuFlipChannel+0x100>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <Dio_enuFlipChannel+0xfc>
    10bc:	84 27       	eor	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <Dio_enuFlipChannel+0x10e>
			break ;
		}
	}
	else
	{
		Loc_enuReturnStatus =Dio_enuPinError;
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_enuReturnStatus;
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    10c8:	26 96       	adiw	r28, 0x06	; 6
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <Port_enuSetPinDir>:
#include "Port.h"
#include "Port_prv_cfg.h"
#include "Port_cfg.h"
#include <avr/io.h>
Port_tenuErrorStatus Port_enuSetPinDir(u8 copy_u8PinNum, u8 copy_u8PinDir)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	27 97       	sbiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	8c 83       	std	Y+4, r24	; 0x04
    10f0:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    10f2:	83 e0       	ldi	r24, 0x03	; 3
    10f4:	8b 83       	std	Y+3, r24	; 0x03

	/*make the checking before the logic bec. if there is an error we will return from the function*/
	/*if the number of pins exceed the number of the HW pins*/
	if (copy_u8PinNum>MAX_PIN_NUM)
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	80 32       	cpi	r24, 0x20	; 32
    10fa:	10 f0       	brcs	.+4      	; 0x1100 <Port_enuSetPinDir+0x26>
	{
		/*pin number error */
		Loc_ErrorStatus = Port_enuPinError;
    10fc:	1b 82       	std	Y+3, r1	; 0x03
    10fe:	df c0       	rjmp	.+446    	; 0x12be <Port_enuSetPinDir+0x1e4>
	}
	/*if the user pass parameter other than the two directions (input/output)*/
	else if(copy_u8PinDir > 1)
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	18 f0       	brcs	.+6      	; 0x110c <Port_enuSetPinDir+0x32>
	{
		/*Direction error*/
		Loc_ErrorStatus = Port_enuPortError;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	8b 83       	std	Y+3, r24	; 0x03
    110a:	d9 c0       	rjmp	.+434    	; 0x12be <Port_enuSetPinDir+0x1e4>
	}

	else
	{
		u8 Loc_u8PinIndex = copy_u8PinNum%PIN_AND_PORT_DIVISOR;
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	87 70       	andi	r24, 0x07	; 7
    1110:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PortIndex = copy_u8PinNum/PIN_AND_PORT_DIVISOR;
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	86 95       	lsr	r24
    1116:	86 95       	lsr	r24
    1118:	86 95       	lsr	r24
    111a:	89 83       	std	Y+1, r24	; 0x01
		/* switch on the port index and according to the pin Dir the pin will be set or cleared*/
		switch (Loc_u8PortIndex)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3f 83       	std	Y+7, r19	; 0x07
    1124:	2e 83       	std	Y+6, r18	; 0x06
    1126:	8e 81       	ldd	r24, Y+6	; 0x06
    1128:	9f 81       	ldd	r25, Y+7	; 0x07
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <Port_enuSetPinDir+0x58>
    1130:	43 c0       	rjmp	.+134    	; 0x11b8 <Port_enuSetPinDir+0xde>
    1132:	2e 81       	ldd	r18, Y+6	; 0x06
    1134:	3f 81       	ldd	r19, Y+7	; 0x07
    1136:	22 30       	cpi	r18, 0x02	; 2
    1138:	31 05       	cpc	r19, r1
    113a:	2c f4       	brge	.+10     	; 0x1146 <Port_enuSetPinDir+0x6c>
    113c:	8e 81       	ldd	r24, Y+6	; 0x06
    113e:	9f 81       	ldd	r25, Y+7	; 0x07
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	71 f0       	breq	.+28     	; 0x1160 <Port_enuSetPinDir+0x86>
    1144:	bc c0       	rjmp	.+376    	; 0x12be <Port_enuSetPinDir+0x1e4>
    1146:	2e 81       	ldd	r18, Y+6	; 0x06
    1148:	3f 81       	ldd	r19, Y+7	; 0x07
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <Port_enuSetPinDir+0x78>
    1150:	5f c0       	rjmp	.+190    	; 0x1210 <Port_enuSetPinDir+0x136>
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	9f 81       	ldd	r25, Y+7	; 0x07
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <Port_enuSetPinDir+0x84>
    115c:	85 c0       	rjmp	.+266    	; 0x1268 <Port_enuSetPinDir+0x18e>
    115e:	af c0       	rjmp	.+350    	; 0x12be <Port_enuSetPinDir+0x1e4>
		{
		case PORT_A:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	a1 f4       	brne	.+40     	; 0x118e <Port_enuSetPinDir+0xb4>
			{
				SET_BIT(DDRA,Loc_u8PinIndex);
    1166:	aa e3       	ldi	r26, 0x3A	; 58
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ea e3       	ldi	r30, 0x3A	; 58
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <Port_enuSetPinDir+0xaa>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <Port_enuSetPinDir+0xa6>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	98 c0       	rjmp	.+304    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRA,Loc_u8PinIndex);
    118e:	aa e3       	ldi	r26, 0x3A	; 58
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ea e3       	ldi	r30, 0x3A	; 58
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <Port_enuSetPinDir+0xd2>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <Port_enuSetPinDir+0xce>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	83 c0       	rjmp	.+262    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_B:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <Port_enuSetPinDir+0x10c>
			{
				SET_BIT(DDRB,Loc_u8PinIndex);
    11be:	a7 e3       	ldi	r26, 0x37	; 55
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e7 e3       	ldi	r30, 0x37	; 55
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <Port_enuSetPinDir+0x102>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <Port_enuSetPinDir+0xfe>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	6c c0       	rjmp	.+216    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRB,Loc_u8PinIndex);
    11e6:	a7 e3       	ldi	r26, 0x37	; 55
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e7 e3       	ldi	r30, 0x37	; 55
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <Port_enuSetPinDir+0x12a>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <Port_enuSetPinDir+0x126>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	57 c0       	rjmp	.+174    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_C:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	a1 f4       	brne	.+40     	; 0x123e <Port_enuSetPinDir+0x164>
			{
				SET_BIT(DDRC,Loc_u8PinIndex);
    1216:	a4 e3       	ldi	r26, 0x34	; 52
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <Port_enuSetPinDir+0x15a>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <Port_enuSetPinDir+0x156>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	40 c0       	rjmp	.+128    	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRC,Loc_u8PinIndex);
    123e:	a4 e3       	ldi	r26, 0x34	; 52
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e4 e3       	ldi	r30, 0x34	; 52
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <Port_enuSetPinDir+0x182>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <Port_enuSetPinDir+0x17e>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	2b c0       	rjmp	.+86     	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			break;
		case PORT_D:
			if(copy_u8PinDir==PORT_u8OUTPUT)
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	a1 f4       	brne	.+40     	; 0x1296 <Port_enuSetPinDir+0x1bc>
			{
				SET_BIT(DDRD,Loc_u8PinIndex);
    126e:	a1 e3       	ldi	r26, 0x31	; 49
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e1 e3       	ldi	r30, 0x31	; 49
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <Port_enuSetPinDir+0x1b2>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <Port_enuSetPinDir+0x1ae>
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	14 c0       	rjmp	.+40     	; 0x12be <Port_enuSetPinDir+0x1e4>
			}
			else
			{
				CLR_BIT(DDRD,Loc_u8PinIndex);
    1296:	a1 e3       	ldi	r26, 0x31	; 49
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Port_enuSetPinDir+0x1da>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <Port_enuSetPinDir+0x1d6>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
		default:
			/*Do nothing*/
			break;
		}
	}
	return Loc_ErrorStatus;
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12c0:	27 96       	adiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 copy_u8PinNum, Port_tenuPinMode enu_PinMode)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2f 97       	sbiw	r28, 0x0f	; 15
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_ErrorStatus = Port_enuOk;
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	8b 83       	std	Y+3, r24	; 0x03
	if(enu_PinMode>NUMBER_OF_MODES)
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	85 30       	cpi	r24, 0x05	; 5
    12f2:	18 f0       	brcs	.+6      	; 0x12fa <Port_enuSetPinMode+0x28>
	{
		Loc_ErrorStatus = Port_enuModeError;
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	23 c3       	rjmp	.+1606   	; 0x1940 <Port_enuSetPinMode+0x66e>
	}
	else if(copy_u8PinNum>MAX_PIN_NUM)
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	80 32       	cpi	r24, 0x20	; 32
    12fe:	10 f0       	brcs	.+4      	; 0x1304 <Port_enuSetPinMode+0x32>
	{
		Loc_ErrorStatus = Port_enuPinError;
    1300:	1b 82       	std	Y+3, r1	; 0x03
    1302:	1e c3       	rjmp	.+1596   	; 0x1940 <Port_enuSetPinMode+0x66e>
	}
	else
	{
		u8 Loc_u8PortIndex = (copy_u8PinNum /PIN_AND_PORT_DIVISOR);
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	86 95       	lsr	r24
    1308:	86 95       	lsr	r24
    130a:	86 95       	lsr	r24
    130c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PinIndex  = (copy_u8PinNum %PIN_AND_PORT_DIVISOR);
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8PortIndex)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3f 87       	std	Y+15, r19	; 0x0f
    131c:	2e 87       	std	Y+14, r18	; 0x0e
    131e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1320:	9f 85       	ldd	r25, Y+15	; 0x0f
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <Port_enuSetPinMode+0x58>
    1328:	d4 c0       	rjmp	.+424    	; 0x14d2 <Port_enuSetPinMode+0x200>
    132a:	2e 85       	ldd	r18, Y+14	; 0x0e
    132c:	3f 85       	ldd	r19, Y+15	; 0x0f
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <Port_enuSetPinMode+0x6c>
    1334:	8e 85       	ldd	r24, Y+14	; 0x0e
    1336:	9f 85       	ldd	r25, Y+15	; 0x0f
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	71 f0       	breq	.+28     	; 0x1358 <Port_enuSetPinMode+0x86>
    133c:	01 c3       	rjmp	.+1538   	; 0x1940 <Port_enuSetPinMode+0x66e>
    133e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1340:	3f 85       	ldd	r19, Y+15	; 0x0f
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <Port_enuSetPinMode+0x78>
    1348:	81 c1       	rjmp	.+770    	; 0x164c <Port_enuSetPinMode+0x37a>
    134a:	8e 85       	ldd	r24, Y+14	; 0x0e
    134c:	9f 85       	ldd	r25, Y+15	; 0x0f
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <Port_enuSetPinMode+0x84>
    1354:	39 c2       	rjmp	.+1138   	; 0x17c8 <Port_enuSetPinMode+0x4f6>
    1356:	f4 c2       	rjmp	.+1512   	; 0x1940 <Port_enuSetPinMode+0x66e>
		{
		case PORT_A:
			switch(enu_PinMode)
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3d 87       	std	Y+13, r19	; 0x0d
    1360:	2c 87       	std	Y+12, r18	; 0x0c
    1362:	8c 85       	ldd	r24, Y+12	; 0x0c
    1364:	9d 85       	ldd	r25, Y+13	; 0x0d
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	b9 f0       	breq	.+46     	; 0x139a <Port_enuSetPinMode+0xc8>
    136c:	2c 85       	ldd	r18, Y+12	; 0x0c
    136e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <Port_enuSetPinMode+0xae>
    1376:	8c 85       	ldd	r24, Y+12	; 0x0c
    1378:	9d 85       	ldd	r25, Y+13	; 0x0d
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	a1 f1       	breq	.+104    	; 0x13e6 <Port_enuSetPinMode+0x114>
    137e:	e0 c2       	rjmp	.+1472   	; 0x1940 <Port_enuSetPinMode+0x66e>
    1380:	2c 85       	ldd	r18, Y+12	; 0x0c
    1382:	3d 85       	ldd	r19, Y+13	; 0x0d
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <Port_enuSetPinMode+0xba>
    138a:	54 c0       	rjmp	.+168    	; 0x1434 <Port_enuSetPinMode+0x162>
    138c:	8c 85       	ldd	r24, Y+12	; 0x0c
    138e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <Port_enuSetPinMode+0xc6>
    1396:	75 c0       	rjmp	.+234    	; 0x1482 <Port_enuSetPinMode+0x1b0>
    1398:	d3 c2       	rjmp	.+1446   	; 0x1940 <Port_enuSetPinMode+0x66e>
			{
			case Output_enuHigh:
				SET_BIT(DDRA,Loc_u8PinIndex);
    139a:	aa e3       	ldi	r26, 0x3A	; 58
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <Port_enuSetPinMode+0xe4>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	2a 95       	dec	r18
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <Port_enuSetPinMode+0xe0>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    13be:	ab e3       	ldi	r26, 0x3B	; 59
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	eb e3       	ldi	r30, 0x3B	; 59
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <Port_enuSetPinMode+0x10a>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <Port_enuSetPinMode+0x106>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	ad c2       	rjmp	.+1370   	; 0x1940 <Port_enuSetPinMode+0x66e>
				break;
			case Output_enuLow:
				SET_BIT(DDRA,Loc_u8PinIndex);
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <Port_enuSetPinMode+0x130>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <Port_enuSetPinMode+0x12c>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    140a:	ab e3       	ldi	r26, 0x3B	; 59
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e3       	ldi	r30, 0x3B	; 59
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <Port_enuSetPinMode+0x156>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <Port_enuSetPinMode+0x152>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	86 c2       	rjmp	.+1292   	; 0x1940 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuPullup:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1434:	aa e3       	ldi	r26, 0x3A	; 58
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ea e3       	ldi	r30, 0x3A	; 58
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <Port_enuSetPinMode+0x17e>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	2a 95       	dec	r18
    1452:	e2 f7       	brpl	.-8      	; 0x144c <Port_enuSetPinMode+0x17a>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinIndex);
    145a:	ab e3       	ldi	r26, 0x3B	; 59
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <Port_enuSetPinMode+0x1a6>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <Port_enuSetPinMode+0x1a2>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	5f c2       	rjmp	.+1214   	; 0x1940 <Port_enuSetPinMode+0x66e>
				break;
			case Input_enuHighImpedence:
				CLR_BIT(DDRA,Loc_u8PinIndex);
    1482:	aa e3       	ldi	r26, 0x3A	; 58
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ea e3       	ldi	r30, 0x3A	; 58
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <Port_enuSetPinMode+0x1cc>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	2a 95       	dec	r18
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <Port_enuSetPinMode+0x1c8>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinIndex);
    14a8:	ab e3       	ldi	r26, 0x3B	; 59
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	eb e3       	ldi	r30, 0x3B	; 59
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <Port_enuSetPinMode+0x1f4>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <Port_enuSetPinMode+0x1f0>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	37 c2       	rjmp	.+1134   	; 0x1940 <Port_enuSetPinMode+0x66e>
				/*do nothing*/
				break;
			}
			break;
			case PORT_B:
				switch(enu_PinMode)
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3b 87       	std	Y+11, r19	; 0x0b
    14da:	2a 87       	std	Y+10, r18	; 0x0a
    14dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    14de:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	b9 f0       	breq	.+46     	; 0x1514 <Port_enuSetPinMode+0x242>
    14e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    14e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	2c f4       	brge	.+10     	; 0x14fa <Port_enuSetPinMode+0x228>
    14f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	a1 f1       	breq	.+104    	; 0x1560 <Port_enuSetPinMode+0x28e>
    14f8:	23 c2       	rjmp	.+1094   	; 0x1940 <Port_enuSetPinMode+0x66e>
    14fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    14fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <Port_enuSetPinMode+0x234>
    1504:	54 c0       	rjmp	.+168    	; 0x15ae <Port_enuSetPinMode+0x2dc>
    1506:	8a 85       	ldd	r24, Y+10	; 0x0a
    1508:	9b 85       	ldd	r25, Y+11	; 0x0b
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <Port_enuSetPinMode+0x240>
    1510:	75 c0       	rjmp	.+234    	; 0x15fc <Port_enuSetPinMode+0x32a>
    1512:	16 c2       	rjmp	.+1068   	; 0x1940 <Port_enuSetPinMode+0x66e>
				{
				case Output_enuHigh:
					SET_BIT(DDRB,Loc_u8PinIndex);
    1514:	a7 e3       	ldi	r26, 0x37	; 55
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e7 e3       	ldi	r30, 0x37	; 55
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <Port_enuSetPinMode+0x25e>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	2a 95       	dec	r18
    1532:	e2 f7       	brpl	.-8      	; 0x152c <Port_enuSetPinMode+0x25a>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <Port_enuSetPinMode+0x284>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <Port_enuSetPinMode+0x280>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	f0 c1       	rjmp	.+992    	; 0x1940 <Port_enuSetPinMode+0x66e>
					break;
				case Output_enuLow:
					SET_BIT(DDRB,Loc_u8PinIndex);
    1560:	a7 e3       	ldi	r26, 0x37	; 55
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e7 e3       	ldi	r30, 0x37	; 55
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <Port_enuSetPinMode+0x2aa>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	2a 95       	dec	r18
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <Port_enuSetPinMode+0x2a6>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    1584:	a8 e3       	ldi	r26, 0x38	; 56
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e3       	ldi	r30, 0x38	; 56
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <Port_enuSetPinMode+0x2d0>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <Port_enuSetPinMode+0x2cc>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	c9 c1       	rjmp	.+914    	; 0x1940 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuPullup:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    15ae:	a7 e3       	ldi	r26, 0x37	; 55
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e7 e3       	ldi	r30, 0x37	; 55
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <Port_enuSetPinMode+0x2f8>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	2a 95       	dec	r18
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <Port_enuSetPinMode+0x2f4>
    15ce:	80 95       	com	r24
    15d0:	84 23       	and	r24, r20
    15d2:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinIndex);
    15d4:	a8 e3       	ldi	r26, 0x38	; 56
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e3       	ldi	r30, 0x38	; 56
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <Port_enuSetPinMode+0x320>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <Port_enuSetPinMode+0x31c>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	a2 c1       	rjmp	.+836    	; 0x1940 <Port_enuSetPinMode+0x66e>
					break;
				case Input_enuHighImpedence:
					CLR_BIT(DDRB,Loc_u8PinIndex);
    15fc:	a7 e3       	ldi	r26, 0x37	; 55
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e3       	ldi	r30, 0x37	; 55
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <Port_enuSetPinMode+0x346>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	2a 95       	dec	r18
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <Port_enuSetPinMode+0x342>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinIndex);
    1622:	a8 e3       	ldi	r26, 0x38	; 56
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e8 e3       	ldi	r30, 0x38	; 56
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <Port_enuSetPinMode+0x36e>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <Port_enuSetPinMode+0x36a>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	7a c1       	rjmp	.+756    	; 0x1940 <Port_enuSetPinMode+0x66e>
					/*do nothing*/
					break;
				}
				break ;
				case PORT_C:
					switch(enu_PinMode)
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	39 87       	std	Y+9, r19	; 0x09
    1654:	28 87       	std	Y+8, r18	; 0x08
    1656:	88 85       	ldd	r24, Y+8	; 0x08
    1658:	99 85       	ldd	r25, Y+9	; 0x09
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	b9 f0       	breq	.+46     	; 0x168e <Port_enuSetPinMode+0x3bc>
    1660:	28 85       	ldd	r18, Y+8	; 0x08
    1662:	39 85       	ldd	r19, Y+9	; 0x09
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <Port_enuSetPinMode+0x3a2>
    166a:	88 85       	ldd	r24, Y+8	; 0x08
    166c:	99 85       	ldd	r25, Y+9	; 0x09
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	a1 f1       	breq	.+104    	; 0x16da <Port_enuSetPinMode+0x408>
    1672:	66 c1       	rjmp	.+716    	; 0x1940 <Port_enuSetPinMode+0x66e>
    1674:	28 85       	ldd	r18, Y+8	; 0x08
    1676:	39 85       	ldd	r19, Y+9	; 0x09
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <Port_enuSetPinMode+0x3ae>
    167e:	55 c0       	rjmp	.+170    	; 0x172a <Port_enuSetPinMode+0x458>
    1680:	88 85       	ldd	r24, Y+8	; 0x08
    1682:	99 85       	ldd	r25, Y+9	; 0x09
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <Port_enuSetPinMode+0x3ba>
    168a:	76 c0       	rjmp	.+236    	; 0x1778 <Port_enuSetPinMode+0x4a6>
    168c:	59 c1       	rjmp	.+690    	; 0x1940 <Port_enuSetPinMode+0x66e>
					{
					case Output_enuHigh:
						SET_BIT(DDRC,Loc_u8PinIndex);
    168e:	a4 e3       	ldi	r26, 0x34	; 52
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e4 e3       	ldi	r30, 0x34	; 52
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <Port_enuSetPinMode+0x3d8>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	2a 95       	dec	r18
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <Port_enuSetPinMode+0x3d4>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    16b2:	a5 e3       	ldi	r26, 0x35	; 53
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e5 e3       	ldi	r30, 0x35	; 53
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <Port_enuSetPinMode+0x3fe>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <Port_enuSetPinMode+0x3fa>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	33 c1       	rjmp	.+614    	; 0x1940 <Port_enuSetPinMode+0x66e>
						break;
					case Output_enuLow:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    16da:	a4 e3       	ldi	r26, 0x34	; 52
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e4 e3       	ldi	r30, 0x34	; 52
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <Port_enuSetPinMode+0x424>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	2a 95       	dec	r18
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <Port_enuSetPinMode+0x420>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <Port_enuSetPinMode+0x44c>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <Port_enuSetPinMode+0x448>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	0b c1       	rjmp	.+534    	; 0x1940 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuPullup:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    172a:	a4 e3       	ldi	r26, 0x34	; 52
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e4 e3       	ldi	r30, 0x34	; 52
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <Port_enuSetPinMode+0x474>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	2a 95       	dec	r18
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <Port_enuSetPinMode+0x470>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
						SET_BIT(PORTC,Loc_u8PinIndex);
    1750:	a5 e3       	ldi	r26, 0x35	; 53
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <Port_enuSetPinMode+0x49c>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <Port_enuSetPinMode+0x498>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	e4 c0       	rjmp	.+456    	; 0x1940 <Port_enuSetPinMode+0x66e>
						break;
					case Input_enuHighImpedence:
						CLR_BIT(DDRC,Loc_u8PinIndex);
    1778:	a4 e3       	ldi	r26, 0x34	; 52
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <Port_enuSetPinMode+0x4c2>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	2a 95       	dec	r18
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <Port_enuSetPinMode+0x4be>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
						CLR_BIT(PORTC,Loc_u8PinIndex);
    179e:	a5 e3       	ldi	r26, 0x35	; 53
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e5 e3       	ldi	r30, 0x35	; 53
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <Port_enuSetPinMode+0x4ea>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <Port_enuSetPinMode+0x4e6>
    17c0:	80 95       	com	r24
    17c2:	84 23       	and	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	bc c0       	rjmp	.+376    	; 0x1940 <Port_enuSetPinMode+0x66e>
						/*do nothing*/
						break;
					}
					break ;
					case PORT_D:
						switch(enu_PinMode)
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3f 83       	std	Y+7, r19	; 0x07
    17d0:	2e 83       	std	Y+6, r18	; 0x06
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	9f 81       	ldd	r25, Y+7	; 0x07
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	b9 f0       	breq	.+46     	; 0x180a <Port_enuSetPinMode+0x538>
    17dc:	2e 81       	ldd	r18, Y+6	; 0x06
    17de:	3f 81       	ldd	r19, Y+7	; 0x07
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <Port_enuSetPinMode+0x51e>
    17e6:	8e 81       	ldd	r24, Y+6	; 0x06
    17e8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	a1 f1       	breq	.+104    	; 0x1856 <Port_enuSetPinMode+0x584>
    17ee:	a8 c0       	rjmp	.+336    	; 0x1940 <Port_enuSetPinMode+0x66e>
    17f0:	2e 81       	ldd	r18, Y+6	; 0x06
    17f2:	3f 81       	ldd	r19, Y+7	; 0x07
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	09 f4       	brne	.+2      	; 0x17fc <Port_enuSetPinMode+0x52a>
    17fa:	54 c0       	rjmp	.+168    	; 0x18a4 <Port_enuSetPinMode+0x5d2>
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
    17fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <Port_enuSetPinMode+0x536>
    1806:	75 c0       	rjmp	.+234    	; 0x18f2 <Port_enuSetPinMode+0x620>
    1808:	9b c0       	rjmp	.+310    	; 0x1940 <Port_enuSetPinMode+0x66e>
						{
						case Output_enuHigh:
							SET_BIT(DDRD,Loc_u8PinIndex);
    180a:	a1 e3       	ldi	r26, 0x31	; 49
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e1 e3       	ldi	r30, 0x31	; 49
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <Port_enuSetPinMode+0x554>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	2a 95       	dec	r18
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <Port_enuSetPinMode+0x550>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8PinIndex);
    182e:	a2 e3       	ldi	r26, 0x32	; 50
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e2 e3       	ldi	r30, 0x32	; 50
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <Port_enuSetPinMode+0x57a>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <Port_enuSetPinMode+0x576>
    1850:	84 2b       	or	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	75 c0       	rjmp	.+234    	; 0x1940 <Port_enuSetPinMode+0x66e>
							break;
						case Output_enuLow:
							SET_BIT(DDRD,Loc_u8PinIndex);
    1856:	a1 e3       	ldi	r26, 0x31	; 49
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <Port_enuSetPinMode+0x5a0>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	2a 95       	dec	r18
    1874:	e2 f7       	brpl	.-8      	; 0x186e <Port_enuSetPinMode+0x59c>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    187a:	a2 e3       	ldi	r26, 0x32	; 50
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e2 e3       	ldi	r30, 0x32	; 50
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <Port_enuSetPinMode+0x5c6>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <Port_enuSetPinMode+0x5c2>
    189c:	80 95       	com	r24
    189e:	84 23       	and	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	4e c0       	rjmp	.+156    	; 0x1940 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuPullup:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    18a4:	a1 e3       	ldi	r26, 0x31	; 49
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e1 e3       	ldi	r30, 0x31	; 49
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <Port_enuSetPinMode+0x5ee>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	2a 95       	dec	r18
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <Port_enuSetPinMode+0x5ea>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8PinIndex);
    18ca:	ab e3       	ldi	r26, 0x3B	; 59
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <Port_enuSetPinMode+0x616>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <Port_enuSetPinMode+0x612>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	27 c0       	rjmp	.+78     	; 0x1940 <Port_enuSetPinMode+0x66e>
							break;
						case Input_enuHighImpedence:
							CLR_BIT(DDRD,Loc_u8PinIndex);
    18f2:	a1 e3       	ldi	r26, 0x31	; 49
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <Port_enuSetPinMode+0x63c>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <Port_enuSetPinMode+0x638>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8PinIndex);
    1918:	a2 e3       	ldi	r26, 0x32	; 50
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e2 e3       	ldi	r30, 0x32	; 50
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <Port_enuSetPinMode+0x664>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <Port_enuSetPinMode+0x660>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
							/*do nothing*/
							break;
		}

	}
	return Loc_ErrorStatus;
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1942:	2f 96       	adiw	r28, 0x0f	; 15
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <Port_vidInit>:

void Port_vidInit(void)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
#define b7_DDRA		1
#define b7_PORTA	0
#endif


	DDRA=CONC(b7_DDRA,b6_DDRA,b5_DDRA,b4_DDRA,b3_DDRA,b2_DDRA,b1_DDRA,b0_DDRA);
    195c:	ea e3       	ldi	r30, 0x3A	; 58
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	80 83       	st	Z, r24
	PORTA=CONC(b7_PORTA,b6_PORTA,b5_PORTA,b4_PORTA,b3_PORTA,b2_PORTA,b1_PORTA,b0_PORTA);
    1964:	eb e3       	ldi	r30, 0x3B	; 59
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	10 82       	st	Z, r1
#elif PORT_PIN_15_INIT_CFG == OUTPUT_LOW
#define b15_DDRB		1
#define b15_PORTB		0
#endif

	DDRB=CONC(b15_DDRB,b14_DDRB,b13_DDRB,b12_DDRB,b11_DDRB,b10_DDRB,b9_DDRB,b8_DDRB);
    196a:	e7 e3       	ldi	r30, 0x37	; 55
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	80 83       	st	Z, r24
	PORTB=CONC(b15_PORTB,b14_PORTB,b13_PORTB,b12_PORTB,b11_PORTB,b10_PORTB,b9_PORTB,b8_PORTB);
    1972:	e8 e3       	ldi	r30, 0x38	; 56
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	80 83       	st	Z, r24
#elif PORT_PIN_23_INIT_CFG == OUTPUT_LOW
#define b23_DDRC		1
#define b23_PORTC		0
#endif

	DDRC=CONC(b23_DDRC,b22_DDRC,b21_DDRC,b20_DDRC,b19_DDRC,b18_DDRC,b17_DDRC,b16_DDRC);
    197a:	e4 e3       	ldi	r30, 0x34	; 52
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	80 83       	st	Z, r24
	PORTC=CONC(b23_PORTC,b22_PORTC,b21_PORTC,b20_PORTC,b19_PORTC,b18_PORTC,b17_PORTC,b16_PORTC);
    1982:	e5 e3       	ldi	r30, 0x35	; 53
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	10 82       	st	Z, r1
#elif PORT_PIN_31_INIT_CFG == OUTPUT_LOW
#define b31_DDRD		1
#define b31_PORTD		0
#endif

	DDRD=CONC(b31_DDRD,b30_DDRD,b29_DDRD,b28_DDRD,b27_DDRD,b26_DDRD,b25_DDRD,b24_DDRD);
    1988:	e1 e3       	ldi	r30, 0x31	; 49
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	80 83       	st	Z, r24
	DDRD=CONC(b31_PORTD,b30_PORTD,b29_PORTD,b28_PORTD,b27_PORTD,b26_PORTD,b25_PORTD,b24_PORTD);
    1990:	e1 e3       	ldi	r30, 0x31	; 49
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	10 82       	st	Z, r1
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <Lcd_vidInit>:




void Lcd_vidInit(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	ab 97       	sbiw	r28, 0x2b	; 43
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
	u8 iterator=0;
    19b0:	1b a6       	std	Y+43, r1	; 0x2b
	for(iterator=16; iterator<=23;iterator++)
    19b2:	80 e1       	ldi	r24, 0x10	; 16
    19b4:	8b a7       	std	Y+43, r24	; 0x2b
    19b6:	07 c0       	rjmp	.+14     	; 0x19c6 <Lcd_vidInit+0x2a>
	{
		Port_enuSetPinDir(iterator,PORT_u8OUTPUT);
    19b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ba:	61 e0       	ldi	r22, 0x01	; 1
    19bc:	0e 94 6d 08 	call	0x10da	; 0x10da <Port_enuSetPinDir>


void Lcd_vidInit(void)
{
	u8 iterator=0;
	for(iterator=16; iterator<=23;iterator++)
    19c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	8b a7       	std	Y+43, r24	; 0x2b
    19c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19c8:	88 31       	cpi	r24, 0x18	; 24
    19ca:	b0 f3       	brcs	.-20     	; 0x19b8 <Lcd_vidInit+0x1c>
	{
		Port_enuSetPinDir(iterator,PORT_u8OUTPUT);
	}
	Port_enuSetPinDir(LCD_u8PIN_RS,PORT_u8OUTPUT);
    19cc:	88 e0       	ldi	r24, 0x08	; 8
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	0e 94 6d 08 	call	0x10da	; 0x10da <Port_enuSetPinDir>
	Port_enuSetPinDir(LCD_u8PIN_RW,PORT_u8OUTPUT);
    19d4:	89 e0       	ldi	r24, 0x09	; 9
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	0e 94 6d 08 	call	0x10da	; 0x10da <Port_enuSetPinDir>
	Port_enuSetPinDir(LCD_u8PIN_EN,PORT_u8OUTPUT);
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	0e 94 6d 08 	call	0x10da	; 0x10da <Port_enuSetPinDir>

	Lcd_vidSendCommand(TWO_LINES_5x7);
    19e4:	88 e3       	ldi	r24, 0x38	; 56
    19e6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	b0 e4       	ldi	r27, 0x40	; 64
    19f2:	8f a3       	std	Y+39, r24	; 0x27
    19f4:	98 a7       	std	Y+40, r25	; 0x28
    19f6:	a9 a7       	std	Y+41, r26	; 0x29
    19f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fa:	6f a1       	ldd	r22, Y+39	; 0x27
    19fc:	78 a5       	ldd	r23, Y+40	; 0x28
    19fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1a00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4a e7       	ldi	r20, 0x7A	; 122
    1a08:	53 e4       	ldi	r21, 0x43	; 67
    1a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8b a3       	std	Y+35, r24	; 0x23
    1a14:	9c a3       	std	Y+36, r25	; 0x24
    1a16:	ad a3       	std	Y+37, r26	; 0x25
    1a18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a20:	9e a1       	ldd	r25, Y+38	; 0x26
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <Lcd_vidInit+0xa0>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9a a3       	std	Y+34, r25	; 0x22
    1a38:	89 a3       	std	Y+33, r24	; 0x21
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <Lcd_vidInit+0x11e>
	else if (__tmp > 65535)
    1a3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a40:	8d a1       	ldd	r24, Y+37	; 0x25
    1a42:	9e a1       	ldd	r25, Y+38	; 0x26
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	3f ef       	ldi	r19, 0xFF	; 255
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	57 e4       	ldi	r21, 0x47	; 71
    1a4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	4c f5       	brge	.+82     	; 0x1aa6 <Lcd_vidInit+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a54:	6f a1       	ldd	r22, Y+39	; 0x27
    1a56:	78 a5       	ldd	r23, Y+40	; 0x28
    1a58:	89 a5       	ldd	r24, Y+41	; 0x29
    1a5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e2       	ldi	r20, 0x20	; 32
    1a62:	51 e4       	ldi	r21, 0x41	; 65
    1a64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9a a3       	std	Y+34, r25	; 0x22
    1a7a:	89 a3       	std	Y+33, r24	; 0x21
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <Lcd_vidInit+0x100>
    1a7e:	89 e1       	ldi	r24, 0x19	; 25
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	98 a3       	std	Y+32, r25	; 0x20
    1a84:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a88:	98 a1       	ldd	r25, Y+32	; 0x20
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <Lcd_vidInit+0xee>
    1a8e:	98 a3       	std	Y+32, r25	; 0x20
    1a90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	89 a1       	ldd	r24, Y+33	; 0x21
    1a94:	9a a1       	ldd	r25, Y+34	; 0x22
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	9a a3       	std	Y+34, r25	; 0x22
    1a9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	69 f7       	brne	.-38     	; 0x1a7e <Lcd_vidInit+0xe2>
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <Lcd_vidInit+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aaa:	8d a1       	ldd	r24, Y+37	; 0x25
    1aac:	9e a1       	ldd	r25, Y+38	; 0x26
    1aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9a a3       	std	Y+34, r25	; 0x22
    1ab8:	89 a3       	std	Y+33, r24	; 0x21
    1aba:	89 a1       	ldd	r24, Y+33	; 0x21
    1abc:	9a a1       	ldd	r25, Y+34	; 0x22
    1abe:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ac2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <Lcd_vidInit+0x12a>
    1aca:	9e 8f       	std	Y+30, r25	; 0x1e
    1acc:	8d 8f       	std	Y+29, r24	; 0x1d
	//TODO:
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_CURSOR_OFF);
    1ace:	8c e0       	ldi	r24, 0x0C	; 12
    1ad0:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	a0 e0       	ldi	r26, 0x00	; 0
    1ada:	b0 e4       	ldi	r27, 0x40	; 64
    1adc:	89 8f       	std	Y+25, r24	; 0x19
    1ade:	9a 8f       	std	Y+26, r25	; 0x1a
    1ae0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ae2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a e7       	ldi	r20, 0x7A	; 122
    1af2:	53 e4       	ldi	r21, 0x43	; 67
    1af4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	8d 8b       	std	Y+21, r24	; 0x15
    1afe:	9e 8b       	std	Y+22, r25	; 0x16
    1b00:	af 8b       	std	Y+23, r26	; 0x17
    1b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b04:	6d 89       	ldd	r22, Y+21	; 0x15
    1b06:	7e 89       	ldd	r23, Y+22	; 0x16
    1b08:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	2c f4       	brge	.+10     	; 0x1b26 <Lcd_vidInit+0x18a>
		__ticks = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
    1b24:	3f c0       	rjmp	.+126    	; 0x1ba4 <Lcd_vidInit+0x208>
	else if (__tmp > 65535)
    1b26:	6d 89       	ldd	r22, Y+21	; 0x15
    1b28:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	3f ef       	ldi	r19, 0xFF	; 255
    1b32:	4f e7       	ldi	r20, 0x7F	; 127
    1b34:	57 e4       	ldi	r21, 0x47	; 71
    1b36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b3a:	18 16       	cp	r1, r24
    1b3c:	4c f5       	brge	.+82     	; 0x1b90 <Lcd_vidInit+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <Lcd_vidInit+0x1ea>
    1b68:	89 e1       	ldi	r24, 0x19	; 25
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9a 8b       	std	Y+18, r25	; 0x12
    1b6e:	89 8b       	std	Y+17, r24	; 0x11
    1b70:	89 89       	ldd	r24, Y+17	; 0x11
    1b72:	9a 89       	ldd	r25, Y+18	; 0x12
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <Lcd_vidInit+0x1d8>
    1b78:	9a 8b       	std	Y+18, r25	; 0x12
    1b7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	9c 8b       	std	Y+20, r25	; 0x14
    1b84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	69 f7       	brne	.-38     	; 0x1b68 <Lcd_vidInit+0x1cc>
    1b8e:	14 c0       	rjmp	.+40     	; 0x1bb8 <Lcd_vidInit+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b90:	6d 89       	ldd	r22, Y+21	; 0x15
    1b92:	7e 89       	ldd	r23, Y+22	; 0x16
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9c 8b       	std	Y+20, r25	; 0x14
    1ba2:	8b 8b       	std	Y+19, r24	; 0x13
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	98 8b       	std	Y+16, r25	; 0x10
    1baa:	8f 87       	std	Y+15, r24	; 0x0f
    1bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bae:	98 89       	ldd	r25, Y+16	; 0x10
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <Lcd_vidInit+0x214>
    1bb4:	98 8b       	std	Y+16, r25	; 0x10
    1bb6:	8f 87       	std	Y+15, r24	; 0x0f
	//0c m4 maogood
	//0f maogood w bbylink

	_delay_ms(2);
	Lcd_vidSendCommand(LCD_CLR_DISPLAY);
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e4       	ldi	r27, 0x40	; 64
    1bc6:	8b 87       	std	Y+11, r24	; 0x0b
    1bc8:	9c 87       	std	Y+12, r25	; 0x0c
    1bca:	ad 87       	std	Y+13, r26	; 0x0d
    1bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4a e7       	ldi	r20, 0x7A	; 122
    1bdc:	53 e4       	ldi	r21, 0x43	; 67
    1bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	8f 83       	std	Y+7, r24	; 0x07
    1be8:	98 87       	std	Y+8, r25	; 0x08
    1bea:	a9 87       	std	Y+9, r26	; 0x09
    1bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e8       	ldi	r20, 0x80	; 128
    1bfc:	5f e3       	ldi	r21, 0x3F	; 63
    1bfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <Lcd_vidInit+0x274>
		__ticks = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	3f c0       	rjmp	.+126    	; 0x1c8e <Lcd_vidInit+0x2f2>
	else if (__tmp > 65535)
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	4c f5       	brge	.+82     	; 0x1c7a <Lcd_vidInit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e2       	ldi	r20, 0x20	; 32
    1c36:	51 e4       	ldi	r21, 0x41	; 65
    1c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <Lcd_vidInit+0x2d4>
    1c52:	89 e1       	ldi	r24, 0x19	; 25
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <Lcd_vidInit+0x2c2>
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	69 f7       	brne	.-38     	; 0x1c52 <Lcd_vidInit+0x2b6>
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <Lcd_vidInit+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <Lcd_vidInit+0x2fe>
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01

	//clr display
	_delay_ms(2);

}
    1ca2:	ab 96       	adiw	r28, 0x2b	; 43
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <Lcd_vidSendCommand>:


void Lcd_vidSendCommand(u8 Command)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	6d 97       	sbiw	r28, 0x1d	; 29
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_enuWriteChannelId(LCD_u8PIN_RS,DIO_u8LOW);
    1cca:	88 e0       	ldi	r24, 0x08	; 8
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_RW,DIO_u8LOW);
    1cd2:	89 e0       	ldi	r24, 0x09	; 9
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>


	Dio_enuWriteChannelId(LCD_u8PIN_D0,GET_BIT(Command,0));
    1cda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cdc:	98 2f       	mov	r25, r24
    1cde:	91 70       	andi	r25, 0x01	; 1
    1ce0:	80 e1       	ldi	r24, 0x10	; 16
    1ce2:	69 2f       	mov	r22, r25
    1ce4:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D1,GET_BIT(Command,1));
    1ce8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cea:	86 95       	lsr	r24
    1cec:	98 2f       	mov	r25, r24
    1cee:	91 70       	andi	r25, 0x01	; 1
    1cf0:	81 e1       	ldi	r24, 0x11	; 17
    1cf2:	69 2f       	mov	r22, r25
    1cf4:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D2,GET_BIT(Command,2));
    1cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfa:	86 95       	lsr	r24
    1cfc:	86 95       	lsr	r24
    1cfe:	98 2f       	mov	r25, r24
    1d00:	91 70       	andi	r25, 0x01	; 1
    1d02:	82 e1       	ldi	r24, 0x12	; 18
    1d04:	69 2f       	mov	r22, r25
    1d06:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D3,GET_BIT(Command,3));
    1d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0c:	86 95       	lsr	r24
    1d0e:	86 95       	lsr	r24
    1d10:	86 95       	lsr	r24
    1d12:	98 2f       	mov	r25, r24
    1d14:	91 70       	andi	r25, 0x01	; 1
    1d16:	83 e1       	ldi	r24, 0x13	; 19
    1d18:	69 2f       	mov	r22, r25
    1d1a:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D4,GET_BIT(Command,4));
    1d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d20:	82 95       	swap	r24
    1d22:	8f 70       	andi	r24, 0x0F	; 15
    1d24:	98 2f       	mov	r25, r24
    1d26:	91 70       	andi	r25, 0x01	; 1
    1d28:	84 e1       	ldi	r24, 0x14	; 20
    1d2a:	69 2f       	mov	r22, r25
    1d2c:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D5,GET_BIT(Command,5));
    1d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d32:	82 95       	swap	r24
    1d34:	86 95       	lsr	r24
    1d36:	87 70       	andi	r24, 0x07	; 7
    1d38:	98 2f       	mov	r25, r24
    1d3a:	91 70       	andi	r25, 0x01	; 1
    1d3c:	85 e1       	ldi	r24, 0x15	; 21
    1d3e:	69 2f       	mov	r22, r25
    1d40:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D6,GET_BIT(Command,6));
    1d44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d46:	82 95       	swap	r24
    1d48:	86 95       	lsr	r24
    1d4a:	86 95       	lsr	r24
    1d4c:	83 70       	andi	r24, 0x03	; 3
    1d4e:	98 2f       	mov	r25, r24
    1d50:	91 70       	andi	r25, 0x01	; 1
    1d52:	86 e1       	ldi	r24, 0x16	; 22
    1d54:	69 2f       	mov	r22, r25
    1d56:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D7,GET_BIT(Command,7));
    1d5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	99 27       	eor	r25, r25
    1d62:	99 1f       	adc	r25, r25
    1d64:	87 e1       	ldi	r24, 0x17	; 23
    1d66:	69 2f       	mov	r22, r25
    1d68:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>



	Dio_enuWriteChannelId(LCD_u8PIN_EN,DIO_u8HIGH);
    1d6c:	8a e0       	ldi	r24, 0x0A	; 10
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a0 e0       	ldi	r26, 0x00	; 0
    1d7a:	b0 e4       	ldi	r27, 0x40	; 64
    1d7c:	89 8f       	std	Y+25, r24	; 0x19
    1d7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d80:	ab 8f       	std	Y+27, r26	; 0x1b
    1d82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d84:	69 8d       	ldd	r22, Y+25	; 0x19
    1d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a e7       	ldi	r20, 0x7A	; 122
    1d92:	53 e4       	ldi	r21, 0x43	; 67
    1d94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	8d 8b       	std	Y+21, r24	; 0x15
    1d9e:	9e 8b       	std	Y+22, r25	; 0x16
    1da0:	af 8b       	std	Y+23, r26	; 0x17
    1da2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da4:	6d 89       	ldd	r22, Y+21	; 0x15
    1da6:	7e 89       	ldd	r23, Y+22	; 0x16
    1da8:	8f 89       	ldd	r24, Y+23	; 0x17
    1daa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
    1dc4:	3f c0       	rjmp	.+126    	; 0x1e44 <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    1dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dca:	8f 89       	ldd	r24, Y+23	; 0x17
    1dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	57 e4       	ldi	r21, 0x47	; 71
    1dd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	4c f5       	brge	.+82     	; 0x1e30 <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dde:	69 8d       	ldd	r22, Y+25	; 0x19
    1de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <Lcd_vidSendCommand+0x172>
    1e08:	89 e1       	ldi	r24, 0x19	; 25
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9a 8b       	std	Y+18, r25	; 0x12
    1e0e:	89 8b       	std	Y+17, r24	; 0x11
    1e10:	89 89       	ldd	r24, Y+17	; 0x11
    1e12:	9a 89       	ldd	r25, Y+18	; 0x12
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <Lcd_vidSendCommand+0x160>
    1e18:	9a 8b       	std	Y+18, r25	; 0x12
    1e1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	69 f7       	brne	.-38     	; 0x1e08 <Lcd_vidSendCommand+0x154>
    1e2e:	14 c0       	rjmp	.+40     	; 0x1e58 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e30:	6d 89       	ldd	r22, Y+21	; 0x15
    1e32:	7e 89       	ldd	r23, Y+22	; 0x16
    1e34:	8f 89       	ldd	r24, Y+23	; 0x17
    1e36:	98 8d       	ldd	r25, Y+24	; 0x18
    1e38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	8b 89       	ldd	r24, Y+19	; 0x13
    1e46:	9c 89       	ldd	r25, Y+20	; 0x14
    1e48:	98 8b       	std	Y+16, r25	; 0x10
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	98 89       	ldd	r25, Y+16	; 0x10
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <Lcd_vidSendCommand+0x19c>
    1e54:	98 8b       	std	Y+16, r25	; 0x10
    1e56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannelId(LCD_u8PIN_EN,DIO_u8LOW);
    1e58:	8a e0       	ldi	r24, 0x0A	; 10
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e0       	ldi	r26, 0x00	; 0
    1e66:	b0 e4       	ldi	r27, 0x40	; 64
    1e68:	8b 87       	std	Y+11, r24	; 0x0b
    1e6a:	9c 87       	std	Y+12, r25	; 0x0c
    1e6c:	ad 87       	std	Y+13, r26	; 0x0d
    1e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	53 e4       	ldi	r21, 0x43	; 67
    1e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8f 83       	std	Y+7, r24	; 0x07
    1e8a:	98 87       	std	Y+8, r25	; 0x08
    1e8c:	a9 87       	std	Y+9, r26	; 0x09
    1e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <Lcd_vidSendCommand+0x1fe>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <Lcd_vidSendCommand+0x27c>
	else if (__tmp > 65535)
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <Lcd_vidSendCommand+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <Lcd_vidSendCommand+0x25e>
    1ef4:	89 e1       	ldi	r24, 0x19	; 25
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <Lcd_vidSendCommand+0x24c>
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <Lcd_vidSendCommand+0x240>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <Lcd_vidSendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <Lcd_vidSendCommand+0x288>
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);



}
    1f44:	6d 96       	adiw	r28, 0x1d	; 29
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Data)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	6d 97       	sbiw	r28, 0x1d	; 29
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_enuWriteChannelId(LCD_u8PIN_RS,DIO_u8HIGH);
    1f6c:	88 e0       	ldi	r24, 0x08	; 8
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_RW,DIO_u8LOW);
    1f74:	89 e0       	ldi	r24, 0x09	; 9
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>


	Dio_enuWriteChannelId(LCD_u8PIN_D0,GET_BIT(Data,0));
    1f7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f7e:	98 2f       	mov	r25, r24
    1f80:	91 70       	andi	r25, 0x01	; 1
    1f82:	80 e1       	ldi	r24, 0x10	; 16
    1f84:	69 2f       	mov	r22, r25
    1f86:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D1,GET_BIT(Data,1));
    1f8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f8c:	86 95       	lsr	r24
    1f8e:	98 2f       	mov	r25, r24
    1f90:	91 70       	andi	r25, 0x01	; 1
    1f92:	81 e1       	ldi	r24, 0x11	; 17
    1f94:	69 2f       	mov	r22, r25
    1f96:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D2,GET_BIT(Data,2));
    1f9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f9c:	86 95       	lsr	r24
    1f9e:	86 95       	lsr	r24
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	91 70       	andi	r25, 0x01	; 1
    1fa4:	82 e1       	ldi	r24, 0x12	; 18
    1fa6:	69 2f       	mov	r22, r25
    1fa8:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D3,GET_BIT(Data,3));
    1fac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fae:	86 95       	lsr	r24
    1fb0:	86 95       	lsr	r24
    1fb2:	86 95       	lsr	r24
    1fb4:	98 2f       	mov	r25, r24
    1fb6:	91 70       	andi	r25, 0x01	; 1
    1fb8:	83 e1       	ldi	r24, 0x13	; 19
    1fba:	69 2f       	mov	r22, r25
    1fbc:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D4,GET_BIT(Data,4));
    1fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc2:	82 95       	swap	r24
    1fc4:	8f 70       	andi	r24, 0x0F	; 15
    1fc6:	98 2f       	mov	r25, r24
    1fc8:	91 70       	andi	r25, 0x01	; 1
    1fca:	84 e1       	ldi	r24, 0x14	; 20
    1fcc:	69 2f       	mov	r22, r25
    1fce:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D5,GET_BIT(Data,5));
    1fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd4:	82 95       	swap	r24
    1fd6:	86 95       	lsr	r24
    1fd8:	87 70       	andi	r24, 0x07	; 7
    1fda:	98 2f       	mov	r25, r24
    1fdc:	91 70       	andi	r25, 0x01	; 1
    1fde:	85 e1       	ldi	r24, 0x15	; 21
    1fe0:	69 2f       	mov	r22, r25
    1fe2:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D6,GET_BIT(Data,6));
    1fe6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe8:	82 95       	swap	r24
    1fea:	86 95       	lsr	r24
    1fec:	86 95       	lsr	r24
    1fee:	83 70       	andi	r24, 0x03	; 3
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	91 70       	andi	r25, 0x01	; 1
    1ff4:	86 e1       	ldi	r24, 0x16	; 22
    1ff6:	69 2f       	mov	r22, r25
    1ff8:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
	Dio_enuWriteChannelId(LCD_u8PIN_D7,GET_BIT(Data,7));
    1ffc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffe:	98 2f       	mov	r25, r24
    2000:	99 1f       	adc	r25, r25
    2002:	99 27       	eor	r25, r25
    2004:	99 1f       	adc	r25, r25
    2006:	87 e1       	ldi	r24, 0x17	; 23
    2008:	69 2f       	mov	r22, r25
    200a:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>


	Dio_enuWriteChannelId(LCD_u8PIN_EN,DIO_u8HIGH);
    200e:	8a e0       	ldi	r24, 0x0A	; 10
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	a0 e0       	ldi	r26, 0x00	; 0
    201c:	b0 e4       	ldi	r27, 0x40	; 64
    201e:	89 8f       	std	Y+25, r24	; 0x19
    2020:	9a 8f       	std	Y+26, r25	; 0x1a
    2022:	ab 8f       	std	Y+27, r26	; 0x1b
    2024:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2026:	69 8d       	ldd	r22, Y+25	; 0x19
    2028:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	4a e7       	ldi	r20, 0x7A	; 122
    2034:	53 e4       	ldi	r21, 0x43	; 67
    2036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	8d 8b       	std	Y+21, r24	; 0x15
    2040:	9e 8b       	std	Y+22, r25	; 0x16
    2042:	af 8b       	std	Y+23, r26	; 0x17
    2044:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2046:	6d 89       	ldd	r22, Y+21	; 0x15
    2048:	7e 89       	ldd	r23, Y+22	; 0x16
    204a:	8f 89       	ldd	r24, Y+23	; 0x17
    204c:	98 8d       	ldd	r25, Y+24	; 0x18
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e8       	ldi	r20, 0x80	; 128
    2054:	5f e3       	ldi	r21, 0x3F	; 63
    2056:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    205a:	88 23       	and	r24, r24
    205c:	2c f4       	brge	.+10     	; 0x2068 <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9c 8b       	std	Y+20, r25	; 0x14
    2064:	8b 8b       	std	Y+19, r24	; 0x13
    2066:	3f c0       	rjmp	.+126    	; 0x20e6 <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    2068:	6d 89       	ldd	r22, Y+21	; 0x15
    206a:	7e 89       	ldd	r23, Y+22	; 0x16
    206c:	8f 89       	ldd	r24, Y+23	; 0x17
    206e:	98 8d       	ldd	r25, Y+24	; 0x18
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	3f ef       	ldi	r19, 0xFF	; 255
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	57 e4       	ldi	r21, 0x47	; 71
    2078:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    207c:	18 16       	cp	r1, r24
    207e:	4c f5       	brge	.+82     	; 0x20d2 <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2080:	69 8d       	ldd	r22, Y+25	; 0x19
    2082:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2084:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2086:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e2       	ldi	r20, 0x20	; 32
    208e:	51 e4       	ldi	r21, 0x41	; 65
    2090:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9c 8b       	std	Y+20, r25	; 0x14
    20a6:	8b 8b       	std	Y+19, r24	; 0x13
    20a8:	0f c0       	rjmp	.+30     	; 0x20c8 <Lcd_vidWriteChar+0x172>
    20aa:	89 e1       	ldi	r24, 0x19	; 25
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9a 8b       	std	Y+18, r25	; 0x12
    20b0:	89 8b       	std	Y+17, r24	; 0x11
    20b2:	89 89       	ldd	r24, Y+17	; 0x11
    20b4:	9a 89       	ldd	r25, Y+18	; 0x12
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <Lcd_vidWriteChar+0x160>
    20ba:	9a 8b       	std	Y+18, r25	; 0x12
    20bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	9c 8b       	std	Y+20, r25	; 0x14
    20c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	9c 89       	ldd	r25, Y+20	; 0x14
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	69 f7       	brne	.-38     	; 0x20aa <Lcd_vidWriteChar+0x154>
    20d0:	14 c0       	rjmp	.+40     	; 0x20fa <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d2:	6d 89       	ldd	r22, Y+21	; 0x15
    20d4:	7e 89       	ldd	r23, Y+22	; 0x16
    20d6:	8f 89       	ldd	r24, Y+23	; 0x17
    20d8:	98 8d       	ldd	r25, Y+24	; 0x18
    20da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
    20e6:	8b 89       	ldd	r24, Y+19	; 0x13
    20e8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ea:	98 8b       	std	Y+16, r25	; 0x10
    20ec:	8f 87       	std	Y+15, r24	; 0x0f
    20ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f0:	98 89       	ldd	r25, Y+16	; 0x10
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <Lcd_vidWriteChar+0x19c>
    20f6:	98 8b       	std	Y+16, r25	; 0x10
    20f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannelId(LCD_u8PIN_EN,DIO_u8LOW);
    20fa:	8a e0       	ldi	r24, 0x0A	; 10
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_enuWriteChannelId>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e0       	ldi	r26, 0x00	; 0
    2108:	b0 e4       	ldi	r27, 0x40	; 64
    210a:	8b 87       	std	Y+11, r24	; 0x0b
    210c:	9c 87       	std	Y+12, r25	; 0x0c
    210e:	ad 87       	std	Y+13, r26	; 0x0d
    2110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6b 85       	ldd	r22, Y+11	; 0x0b
    2114:	7c 85       	ldd	r23, Y+12	; 0x0c
    2116:	8d 85       	ldd	r24, Y+13	; 0x0d
    2118:	9e 85       	ldd	r25, Y+14	; 0x0e
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a e7       	ldi	r20, 0x7A	; 122
    2120:	53 e4       	ldi	r21, 0x43	; 67
    2122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8f 83       	std	Y+7, r24	; 0x07
    212c:	98 87       	std	Y+8, r25	; 0x08
    212e:	a9 87       	std	Y+9, r26	; 0x09
    2130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <Lcd_vidWriteChar+0x1fe>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <Lcd_vidWriteChar+0x27c>
	else if (__tmp > 65535)
    2154:	6f 81       	ldd	r22, Y+7	; 0x07
    2156:	78 85       	ldd	r23, Y+8	; 0x08
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <Lcd_vidWriteChar+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <Lcd_vidWriteChar+0x25e>
    2196:	89 e1       	ldi	r24, 0x19	; 25
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <Lcd_vidWriteChar+0x24c>
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <Lcd_vidWriteChar+0x240>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <Lcd_vidWriteChar+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <Lcd_vidWriteChar+0x288>
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    21e6:	6d 96       	adiw	r28, 0x1d	; 29
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <Lcd_vidGoTo>:



void Lcd_vidGoTo(u8 Row, u8 Col)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <Lcd_vidGoTo+0x6>
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <Lcd_vidGoTo+0x8>
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	6a 83       	std	Y+2, r22	; 0x02
	switch(Row)
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	3c 83       	std	Y+4, r19	; 0x04
    2210:	2b 83       	std	Y+3, r18	; 0x03
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	31 f0       	breq	.+12     	; 0x2226 <Lcd_vidGoTo+0x2e>
    221a:	2b 81       	ldd	r18, Y+3	; 0x03
    221c:	3c 81       	ldd	r19, Y+4	; 0x04
    221e:	21 30       	cpi	r18, 0x01	; 1
    2220:	31 05       	cpc	r19, r1
    2222:	49 f0       	breq	.+18     	; 0x2236 <Lcd_vidGoTo+0x3e>
    2224:	0f c0       	rjmp	.+30     	; 0x2244 <Lcd_vidGoTo+0x4c>
	{
	case 0 :

		if (Col>=0 && Col < LCD_MAX_CHAR_IN_LINE)
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	80 31       	cpi	r24, 0x10	; 16
    222a:	60 f4       	brcc	.+24     	; 0x2244 <Lcd_vidGoTo+0x4c>
		{
			Lcd_vidSendCommand(FIRST_ROW + Col);
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	80 58       	subi	r24, 0x80	; 128
    2230:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>
    2234:	07 c0       	rjmp	.+14     	; 0x2244 <Lcd_vidGoTo+0x4c>
		}
		break ;

	case 1 :
		if (Col>=0 && Col < LCD_MAX_CHAR_IN_LINE)
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	80 31       	cpi	r24, 0x10	; 16
    223a:	20 f4       	brcc	.+8      	; 0x2244 <Lcd_vidGoTo+0x4c>
		{
			Lcd_vidSendCommand(SECOND_ROW + Col);
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	80 54       	subi	r24, 0x40	; 64
    2240:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>

	default:

		break ;
	}
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <LCD_Custom_Char>:


void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <LCD_Custom_Char+0x6>
    2258:	00 d0       	rcall	.+0      	; 0x225a <LCD_Custom_Char+0x8>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	7c 83       	std	Y+4, r23	; 0x04
    2262:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if(loc<8)
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	88 30       	cpi	r24, 0x08	; 8
    2268:	f8 f4       	brcc	.+62     	; 0x22a8 <LCD_Custom_Char+0x56>
	{
		/* Command 0x40 and onwards forces the device to point CGRAM address */
		Lcd_vidSendCommand (0x40 + (loc*8));
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	08 96       	adiw	r24, 0x08	; 8
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>
		for(i=0;i<8;i++)
    2282:	19 82       	std	Y+1, r1	; 0x01
    2284:	0e c0       	rjmp	.+28     	; 0x22a2 <LCD_Custom_Char+0x50>
		{
			/* Write 8 byte for generation of 1 character */
			Lcd_vidWriteChar(msg[i]);
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	fc 01       	movw	r30, r24
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	80 81       	ld	r24, Z
    2298:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
	unsigned char i;
	if(loc<8)
	{
		/* Command 0x40 and onwards forces the device to point CGRAM address */
		Lcd_vidSendCommand (0x40 + (loc*8));
		for(i=0;i<8;i++)
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	88 30       	cpi	r24, 0x08	; 8
    22a6:	78 f3       	brcs	.-34     	; 0x2286 <LCD_Custom_Char+0x34>
		{
			/* Write 8 byte for generation of 1 character */
			Lcd_vidWriteChar(msg[i]);
		}
	}
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <Lcd_vidString>:



void Lcd_vidString(u8 *string)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <Lcd_vidString+0x6>
    22bc:	0f 92       	push	r0
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	9b 83       	std	Y+3, r25	; 0x03
    22c4:	8a 83       	std	Y+2, r24	; 0x02

	u8 INDIX=0;
    22c6:	19 82       	std	Y+1, r1	; 0x01
    22c8:	0e c0       	rjmp	.+28     	; 0x22e6 <Lcd_vidString+0x30>
	for(;string[INDIX]!=0;INDIX++)
	{
		Lcd_vidWriteChar(string[INDIX]);
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	9b 81       	ldd	r25, Y+3	; 0x03
    22d4:	fc 01       	movw	r30, r24
    22d6:	e2 0f       	add	r30, r18
    22d8:	f3 1f       	adc	r31, r19
    22da:	80 81       	ld	r24, Z
    22dc:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>

void Lcd_vidString(u8 *string)
{

	u8 INDIX=0;
	for(;string[INDIX]!=0;INDIX++)
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	9b 81       	ldd	r25, Y+3	; 0x03
    22f0:	fc 01       	movw	r30, r24
    22f2:	e2 0f       	add	r30, r18
    22f4:	f3 1f       	adc	r31, r19
    22f6:	80 81       	ld	r24, Z
    22f8:	88 23       	and	r24, r24
    22fa:	39 f7       	brne	.-50     	; 0x22ca <Lcd_vidString+0x14>
		Lcd_vidWriteChar(string[INDIX]);


	}

}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <main>:
#include "../MCAL/Port.h"
#include "../HAL/Lcd_int.h"
#include "../HAL/Lcd_priv.h"

int main (void)
{
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	c3 5d       	subi	r28, 0xD3	; 211
    2316:	d0 40       	sbci	r29, 0x00	; 0
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61

	Lcd_vidInit();
    2322:	0e 94 ce 0c 	call	0x199c	; 0x199c <Lcd_vidInit>
	s8 Count_row = 0,Count_column = 0;
    2326:	fe 01       	movw	r30, r28
    2328:	ea 53       	subi	r30, 0x3A	; 58
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	10 82       	st	Z, r1
    232e:	fe 01       	movw	r30, r28
    2330:	eb 53       	subi	r30, 0x3B	; 59
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	10 82       	st	Z, r1
	while(1)
	{
		for(;;Count_row = !Count_row,Count_column++)
		{
			if(Count_column == 15)
    2336:	fe 01       	movw	r30, r28
    2338:	eb 53       	subi	r30, 0x3B	; 59
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	8f 30       	cpi	r24, 0x0F	; 15
    2340:	09 f4       	brne	.+2      	; 0x2344 <main+0x3c>
    2342:	d2 c5       	rjmp	.+2980   	; 0x2ee8 <main+0xbe0>
			{
				break;
			}
			if(Count_column-3 >= 0 && Count_column-3 <= 15)
    2344:	fe 01       	movw	r30, r28
    2346:	eb 53       	subi	r30, 0x3B	; 59
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 81       	ld	r24, Z
    234c:	99 27       	eor	r25, r25
    234e:	87 fd       	sbrc	r24, 7
    2350:	90 95       	com	r25
    2352:	03 97       	sbiw	r24, 0x03	; 3
    2354:	99 23       	and	r25, r25
    2356:	0c f4       	brge	.+2      	; 0x235a <main+0x52>
    2358:	e2 c0       	rjmp	.+452    	; 0x251e <main+0x216>
    235a:	fe 01       	movw	r30, r28
    235c:	eb 53       	subi	r30, 0x3B	; 59
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	99 27       	eor	r25, r25
    2364:	87 fd       	sbrc	r24, 7
    2366:	90 95       	com	r25
    2368:	03 97       	sbiw	r24, 0x03	; 3
    236a:	80 31       	cpi	r24, 0x10	; 16
    236c:	91 05       	cpc	r25, r1
    236e:	0c f0       	brlt	.+2      	; 0x2372 <main+0x6a>
    2370:	d6 c0       	rjmp	.+428    	; 0x251e <main+0x216>
			{
				Lcd_vidGoTo(!Count_row , Count_column-3);
    2372:	c6 53       	subi	r28, 0x36	; 54
    2374:	df 4f       	sbci	r29, 0xFF	; 255
    2376:	18 82       	st	Y, r1
    2378:	ca 5c       	subi	r28, 0xCA	; 202
    237a:	d0 40       	sbci	r29, 0x00	; 0
    237c:	fe 01       	movw	r30, r28
    237e:	ea 53       	subi	r30, 0x3A	; 58
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	88 23       	and	r24, r24
    2386:	31 f4       	brne	.+12     	; 0x2394 <main+0x8c>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	c6 53       	subi	r28, 0x36	; 54
    238c:	df 4f       	sbci	r29, 0xFF	; 255
    238e:	88 83       	st	Y, r24
    2390:	ca 5c       	subi	r28, 0xCA	; 202
    2392:	d0 40       	sbci	r29, 0x00	; 0
    2394:	fe 01       	movw	r30, r28
    2396:	eb 53       	subi	r30, 0x3B	; 59
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	98 2f       	mov	r25, r24
    239e:	93 50       	subi	r25, 0x03	; 3
    23a0:	c6 53       	subi	r28, 0x36	; 54
    23a2:	df 4f       	sbci	r29, 0xFF	; 255
    23a4:	88 81       	ld	r24, Y
    23a6:	ca 5c       	subi	r28, 0xCA	; 202
    23a8:	d0 40       	sbci	r29, 0x00	; 0
    23aa:	69 2f       	mov	r22, r25
    23ac:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('A');
    23b0:	81 e4       	ldi	r24, 0x41	; 65
    23b2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    23b6:	fe 01       	movw	r30, r28
    23b8:	ef 53       	subi	r30, 0x3F	; 63
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	aa ef       	ldi	r26, 0xFA	; 250
    23c2:	b3 e4       	ldi	r27, 0x43	; 67
    23c4:	80 83       	st	Z, r24
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	a2 83       	std	Z+2, r26	; 0x02
    23ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	8e 01       	movw	r16, r28
    23ce:	03 54       	subi	r16, 0x43	; 67
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	fe 01       	movw	r30, r28
    23d4:	ef 53       	subi	r30, 0x3F	; 63
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4a e7       	ldi	r20, 0x7A	; 122
    23e6:	53 e4       	ldi	r21, 0x43	; 67
    23e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	f8 01       	movw	r30, r16
    23f2:	80 83       	st	Z, r24
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	a2 83       	std	Z+2, r26	; 0x02
    23f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23fa:	fe 01       	movw	r30, r28
    23fc:	e3 54       	subi	r30, 0x43	; 67
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	44 f4       	brge	.+16     	; 0x2428 <main+0x120>
		__ticks = 1;
    2418:	fe 01       	movw	r30, r28
    241a:	e5 54       	subi	r30, 0x45	; 69
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	64 c0       	rjmp	.+200    	; 0x24f0 <main+0x1e8>
	else if (__tmp > 65535)
    2428:	fe 01       	movw	r30, r28
    242a:	e3 54       	subi	r30, 0x43	; 67
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	0c f0       	brlt	.+2      	; 0x2448 <main+0x140>
    2446:	43 c0       	rjmp	.+134    	; 0x24ce <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	fe 01       	movw	r30, r28
    244a:	ef 53       	subi	r30, 0x3F	; 63
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e2       	ldi	r20, 0x20	; 32
    245c:	51 e4       	ldi	r21, 0x41	; 65
    245e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8e 01       	movw	r16, r28
    2468:	05 54       	subi	r16, 0x45	; 69
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	f8 01       	movw	r30, r16
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	1f c0       	rjmp	.+62     	; 0x24be <main+0x1b6>
    2480:	fe 01       	movw	r30, r28
    2482:	e7 54       	subi	r30, 0x47	; 71
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	89 e1       	ldi	r24, 0x19	; 25
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
    248e:	fe 01       	movw	r30, r28
    2490:	e7 54       	subi	r30, 0x47	; 71
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <main+0x190>
    249c:	fe 01       	movw	r30, r28
    249e:	e7 54       	subi	r30, 0x47	; 71
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	de 01       	movw	r26, r28
    24a8:	a5 54       	subi	r26, 0x45	; 69
    24aa:	bf 4f       	sbci	r27, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e5 54       	subi	r30, 0x45	; 69
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	11 96       	adiw	r26, 0x01	; 1
    24ba:	9c 93       	st	X, r25
    24bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24be:	fe 01       	movw	r30, r28
    24c0:	e5 54       	subi	r30, 0x45	; 69
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 81       	ld	r24, Z
    24c6:	91 81       	ldd	r25, Z+1	; 0x01
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	d1 f6       	brne	.-76     	; 0x2480 <main+0x178>
    24cc:	28 c0       	rjmp	.+80     	; 0x251e <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	8e 01       	movw	r16, r28
    24d0:	05 54       	subi	r16, 0x45	; 69
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	fe 01       	movw	r30, r28
    24d6:	e3 54       	subi	r30, 0x43	; 67
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	f8 01       	movw	r30, r16
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
    24f0:	de 01       	movw	r26, r28
    24f2:	a9 54       	subi	r26, 0x49	; 73
    24f4:	bf 4f       	sbci	r27, 0xFF	; 255
    24f6:	fe 01       	movw	r30, r28
    24f8:	e5 54       	subi	r30, 0x45	; 69
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	11 96       	adiw	r26, 0x01	; 1
    2502:	9c 93       	st	X, r25
    2504:	8e 93       	st	-X, r24
    2506:	fe 01       	movw	r30, r28
    2508:	e9 54       	subi	r30, 0x49	; 73
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <main+0x208>
    2514:	fe 01       	movw	r30, r28
    2516:	e9 54       	subi	r30, 0x49	; 73
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
				_delay_ms(500);
			}
			if(Count_column-2 >= 0 && Count_column-2 <= 15)
    251e:	fe 01       	movw	r30, r28
    2520:	eb 53       	subi	r30, 0x3B	; 59
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	99 27       	eor	r25, r25
    2528:	87 fd       	sbrc	r24, 7
    252a:	90 95       	com	r25
    252c:	02 97       	sbiw	r24, 0x02	; 2
    252e:	99 23       	and	r25, r25
    2530:	0c f4       	brge	.+2      	; 0x2534 <main+0x22c>
    2532:	d1 c0       	rjmp	.+418    	; 0x26d6 <main+0x3ce>
    2534:	fe 01       	movw	r30, r28
    2536:	eb 53       	subi	r30, 0x3B	; 59
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	99 27       	eor	r25, r25
    253e:	87 fd       	sbrc	r24, 7
    2540:	90 95       	com	r25
    2542:	02 97       	sbiw	r24, 0x02	; 2
    2544:	80 31       	cpi	r24, 0x10	; 16
    2546:	91 05       	cpc	r25, r1
    2548:	0c f0       	brlt	.+2      	; 0x254c <main+0x244>
    254a:	c5 c0       	rjmp	.+394    	; 0x26d6 <main+0x3ce>
			{
				Lcd_vidGoTo(Count_row , Count_column-2);
    254c:	fe 01       	movw	r30, r28
    254e:	ea 53       	subi	r30, 0x3A	; 58
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	20 81       	ld	r18, Z
    2554:	fe 01       	movw	r30, r28
    2556:	eb 53       	subi	r30, 0x3B	; 59
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 81       	ld	r24, Z
    255c:	98 2f       	mov	r25, r24
    255e:	92 50       	subi	r25, 0x02	; 2
    2560:	82 2f       	mov	r24, r18
    2562:	69 2f       	mov	r22, r25
    2564:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('B');
    2568:	82 e4       	ldi	r24, 0x42	; 66
    256a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    256e:	fe 01       	movw	r30, r28
    2570:	ed 54       	subi	r30, 0x4D	; 77
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	aa ef       	ldi	r26, 0xFA	; 250
    257a:	b3 e4       	ldi	r27, 0x43	; 67
    257c:	80 83       	st	Z, r24
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	a2 83       	std	Z+2, r26	; 0x02
    2582:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2584:	8e 01       	movw	r16, r28
    2586:	01 55       	subi	r16, 0x51	; 81
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	ed 54       	subi	r30, 0x4D	; 77
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	53 e4       	ldi	r21, 0x43	; 67
    25a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	f8 01       	movw	r30, r16
    25aa:	80 83       	st	Z, r24
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	a2 83       	std	Z+2, r26	; 0x02
    25b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b2:	fe 01       	movw	r30, r28
    25b4:	e1 55       	subi	r30, 0x51	; 81
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	44 f4       	brge	.+16     	; 0x25e0 <main+0x2d8>
		__ticks = 1;
    25d0:	fe 01       	movw	r30, r28
    25d2:	e3 55       	subi	r30, 0x53	; 83
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
    25de:	64 c0       	rjmp	.+200    	; 0x26a8 <main+0x3a0>
	else if (__tmp > 65535)
    25e0:	fe 01       	movw	r30, r28
    25e2:	e1 55       	subi	r30, 0x51	; 81
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	0c f0       	brlt	.+2      	; 0x2600 <main+0x2f8>
    25fe:	43 c0       	rjmp	.+134    	; 0x2686 <main+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	fe 01       	movw	r30, r28
    2602:	ed 54       	subi	r30, 0x4D	; 77
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	8e 01       	movw	r16, r28
    2620:	03 55       	subi	r16, 0x53	; 83
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	f8 01       	movw	r30, r16
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	1f c0       	rjmp	.+62     	; 0x2676 <main+0x36e>
    2638:	fe 01       	movw	r30, r28
    263a:	e5 55       	subi	r30, 0x55	; 85
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	89 e1       	ldi	r24, 0x19	; 25
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	fe 01       	movw	r30, r28
    2648:	e5 55       	subi	r30, 0x55	; 85
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <main+0x348>
    2654:	fe 01       	movw	r30, r28
    2656:	e5 55       	subi	r30, 0x55	; 85
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	de 01       	movw	r26, r28
    2660:	a3 55       	subi	r26, 0x53	; 83
    2662:	bf 4f       	sbci	r27, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e3 55       	subi	r30, 0x53	; 83
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	9c 93       	st	X, r25
    2674:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	fe 01       	movw	r30, r28
    2678:	e3 55       	subi	r30, 0x53	; 83
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	d1 f6       	brne	.-76     	; 0x2638 <main+0x330>
    2684:	28 c0       	rjmp	.+80     	; 0x26d6 <main+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2686:	8e 01       	movw	r16, r28
    2688:	03 55       	subi	r16, 0x53	; 83
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	fe 01       	movw	r30, r28
    268e:	e1 55       	subi	r30, 0x51	; 81
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	f8 01       	movw	r30, r16
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	de 01       	movw	r26, r28
    26aa:	a7 55       	subi	r26, 0x57	; 87
    26ac:	bf 4f       	sbci	r27, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e3 55       	subi	r30, 0x53	; 83
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	11 96       	adiw	r26, 0x01	; 1
    26ba:	9c 93       	st	X, r25
    26bc:	8e 93       	st	-X, r24
    26be:	fe 01       	movw	r30, r28
    26c0:	e7 55       	subi	r30, 0x57	; 87
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <main+0x3c0>
    26cc:	fe 01       	movw	r30, r28
    26ce:	e7 55       	subi	r30, 0x57	; 87
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
				_delay_ms(500);
			}
			if(Count_column-1 >= 0 && Count_column-1 <= 15)
    26d6:	fe 01       	movw	r30, r28
    26d8:	eb 53       	subi	r30, 0x3B	; 59
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	99 27       	eor	r25, r25
    26e0:	87 fd       	sbrc	r24, 7
    26e2:	90 95       	com	r25
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	99 23       	and	r25, r25
    26e8:	0c f4       	brge	.+2      	; 0x26ec <main+0x3e4>
    26ea:	e2 c0       	rjmp	.+452    	; 0x28b0 <main+0x5a8>
    26ec:	fe 01       	movw	r30, r28
    26ee:	eb 53       	subi	r30, 0x3B	; 59
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	99 27       	eor	r25, r25
    26f6:	87 fd       	sbrc	r24, 7
    26f8:	90 95       	com	r25
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	80 31       	cpi	r24, 0x10	; 16
    26fe:	91 05       	cpc	r25, r1
    2700:	0c f0       	brlt	.+2      	; 0x2704 <main+0x3fc>
    2702:	d6 c0       	rjmp	.+428    	; 0x28b0 <main+0x5a8>
			{
				Lcd_vidGoTo(!Count_row , Count_column-1);
    2704:	c7 53       	subi	r28, 0x37	; 55
    2706:	df 4f       	sbci	r29, 0xFF	; 255
    2708:	18 82       	st	Y, r1
    270a:	c9 5c       	subi	r28, 0xC9	; 201
    270c:	d0 40       	sbci	r29, 0x00	; 0
    270e:	fe 01       	movw	r30, r28
    2710:	ea 53       	subi	r30, 0x3A	; 58
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	88 23       	and	r24, r24
    2718:	31 f4       	brne	.+12     	; 0x2726 <main+0x41e>
    271a:	f1 e0       	ldi	r31, 0x01	; 1
    271c:	c7 53       	subi	r28, 0x37	; 55
    271e:	df 4f       	sbci	r29, 0xFF	; 255
    2720:	f8 83       	st	Y, r31
    2722:	c9 5c       	subi	r28, 0xC9	; 201
    2724:	d0 40       	sbci	r29, 0x00	; 0
    2726:	fe 01       	movw	r30, r28
    2728:	eb 53       	subi	r30, 0x3B	; 59
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	98 2f       	mov	r25, r24
    2730:	91 50       	subi	r25, 0x01	; 1
    2732:	c7 53       	subi	r28, 0x37	; 55
    2734:	df 4f       	sbci	r29, 0xFF	; 255
    2736:	88 81       	ld	r24, Y
    2738:	c9 5c       	subi	r28, 0xC9	; 201
    273a:	d0 40       	sbci	r29, 0x00	; 0
    273c:	69 2f       	mov	r22, r25
    273e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('D');
    2742:	84 e4       	ldi	r24, 0x44	; 68
    2744:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    2748:	fe 01       	movw	r30, r28
    274a:	eb 55       	subi	r30, 0x5B	; 91
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	aa ef       	ldi	r26, 0xFA	; 250
    2754:	b3 e4       	ldi	r27, 0x43	; 67
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	8e 01       	movw	r16, r28
    2760:	0f 55       	subi	r16, 0x5F	; 95
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	fe 01       	movw	r30, r28
    2766:	eb 55       	subi	r30, 0x5B	; 91
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	53 e4       	ldi	r21, 0x43	; 67
    277a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	f8 01       	movw	r30, r16
    2784:	80 83       	st	Z, r24
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	a2 83       	std	Z+2, r26	; 0x02
    278a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    278c:	fe 01       	movw	r30, r28
    278e:	ef 55       	subi	r30, 0x5F	; 95
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	44 f4       	brge	.+16     	; 0x27ba <main+0x4b2>
		__ticks = 1;
    27aa:	fe 01       	movw	r30, r28
    27ac:	e1 56       	subi	r30, 0x61	; 97
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
    27b8:	64 c0       	rjmp	.+200    	; 0x2882 <main+0x57a>
	else if (__tmp > 65535)
    27ba:	fe 01       	movw	r30, r28
    27bc:	ef 55       	subi	r30, 0x5F	; 95
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	0c f0       	brlt	.+2      	; 0x27da <main+0x4d2>
    27d8:	43 c0       	rjmp	.+134    	; 0x2860 <main+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27da:	fe 01       	movw	r30, r28
    27dc:	eb 55       	subi	r30, 0x5B	; 91
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	51 e4       	ldi	r21, 0x41	; 65
    27f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	8e 01       	movw	r16, r28
    27fa:	01 56       	subi	r16, 0x61	; 97
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	f8 01       	movw	r30, r16
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
    2810:	1f c0       	rjmp	.+62     	; 0x2850 <main+0x548>
    2812:	fe 01       	movw	r30, r28
    2814:	e3 56       	subi	r30, 0x63	; 99
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	89 e1       	ldi	r24, 0x19	; 25
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	80 83       	st	Z, r24
    2820:	fe 01       	movw	r30, r28
    2822:	e3 56       	subi	r30, 0x63	; 99
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <main+0x522>
    282e:	fe 01       	movw	r30, r28
    2830:	e3 56       	subi	r30, 0x63	; 99
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2838:	de 01       	movw	r26, r28
    283a:	a1 56       	subi	r26, 0x61	; 97
    283c:	bf 4f       	sbci	r27, 0xFF	; 255
    283e:	fe 01       	movw	r30, r28
    2840:	e1 56       	subi	r30, 0x61	; 97
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	11 96       	adiw	r26, 0x01	; 1
    284c:	9c 93       	st	X, r25
    284e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2850:	fe 01       	movw	r30, r28
    2852:	e1 56       	subi	r30, 0x61	; 97
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	91 81       	ldd	r25, Z+1	; 0x01
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	d1 f6       	brne	.-76     	; 0x2812 <main+0x50a>
    285e:	28 c0       	rjmp	.+80     	; 0x28b0 <main+0x5a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	8e 01       	movw	r16, r28
    2862:	01 56       	subi	r16, 0x61	; 97
    2864:	1f 4f       	sbci	r17, 0xFF	; 255
    2866:	fe 01       	movw	r30, r28
    2868:	ef 55       	subi	r30, 0x5F	; 95
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	f8 01       	movw	r30, r16
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
    2882:	de 01       	movw	r26, r28
    2884:	a5 56       	subi	r26, 0x65	; 101
    2886:	bf 4f       	sbci	r27, 0xFF	; 255
    2888:	fe 01       	movw	r30, r28
    288a:	e1 56       	subi	r30, 0x61	; 97
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	91 81       	ldd	r25, Z+1	; 0x01
    2892:	11 96       	adiw	r26, 0x01	; 1
    2894:	9c 93       	st	X, r25
    2896:	8e 93       	st	-X, r24
    2898:	fe 01       	movw	r30, r28
    289a:	e5 56       	subi	r30, 0x65	; 101
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <main+0x59a>
    28a6:	fe 01       	movw	r30, r28
    28a8:	e5 56       	subi	r30, 0x65	; 101
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
				_delay_ms(500);
			}
			if(Count_column >= 0 && Count_column <= 15)
    28b0:	fe 01       	movw	r30, r28
    28b2:	eb 53       	subi	r30, 0x3B	; 59
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	88 23       	and	r24, r24
    28ba:	0c f4       	brge	.+2      	; 0x28be <main+0x5b6>
    28bc:	c8 c0       	rjmp	.+400    	; 0x2a4e <main+0x746>
    28be:	fe 01       	movw	r30, r28
    28c0:	eb 53       	subi	r30, 0x3B	; 59
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 81       	ld	r24, Z
    28c6:	80 31       	cpi	r24, 0x10	; 16
    28c8:	0c f0       	brlt	.+2      	; 0x28cc <main+0x5c4>
    28ca:	c1 c0       	rjmp	.+386    	; 0x2a4e <main+0x746>
			{
				Lcd_vidGoTo(Count_row , Count_column);
    28cc:	fe 01       	movw	r30, r28
    28ce:	ea 53       	subi	r30, 0x3A	; 58
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	fe 01       	movw	r30, r28
    28d6:	eb 53       	subi	r30, 0x3B	; 59
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	90 81       	ld	r25, Z
    28dc:	69 2f       	mov	r22, r25
    28de:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('O');
    28e2:	8f e4       	ldi	r24, 0x4F	; 79
    28e4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    28e8:	fe 01       	movw	r30, r28
    28ea:	e9 56       	subi	r30, 0x69	; 105
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	aa ef       	ldi	r26, 0xFA	; 250
    28f4:	b3 e4       	ldi	r27, 0x43	; 67
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fe:	8e 01       	movw	r16, r28
    2900:	0d 56       	subi	r16, 0x6D	; 109
    2902:	1f 4f       	sbci	r17, 0xFF	; 255
    2904:	fe 01       	movw	r30, r28
    2906:	e9 56       	subi	r30, 0x69	; 105
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a e7       	ldi	r20, 0x7A	; 122
    2918:	53 e4       	ldi	r21, 0x43	; 67
    291a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	f8 01       	movw	r30, r16
    2924:	80 83       	st	Z, r24
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	a2 83       	std	Z+2, r26	; 0x02
    292a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    292c:	fe 01       	movw	r30, r28
    292e:	ed 56       	subi	r30, 0x6D	; 109
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	44 f4       	brge	.+16     	; 0x295a <main+0x652>
		__ticks = 1;
    294a:	fe 01       	movw	r30, r28
    294c:	ef 56       	subi	r30, 0x6F	; 111
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	64 c0       	rjmp	.+200    	; 0x2a22 <main+0x71a>
	else if (__tmp > 65535)
    295a:	fe 01       	movw	r30, r28
    295c:	ed 56       	subi	r30, 0x6D	; 109
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	0c f0       	brlt	.+2      	; 0x297a <main+0x672>
    2978:	43 c0       	rjmp	.+134    	; 0x2a00 <main+0x6f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297a:	fe 01       	movw	r30, r28
    297c:	e9 56       	subi	r30, 0x69	; 105
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8e 01       	movw	r16, r28
    299a:	0f 56       	subi	r16, 0x6F	; 111
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	f8 01       	movw	r30, r16
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	1f c0       	rjmp	.+62     	; 0x29f0 <main+0x6e8>
    29b2:	fe 01       	movw	r30, r28
    29b4:	e1 57       	subi	r30, 0x71	; 113
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	89 e1       	ldi	r24, 0x19	; 25
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	fe 01       	movw	r30, r28
    29c2:	e1 57       	subi	r30, 0x71	; 113
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <main+0x6c2>
    29ce:	fe 01       	movw	r30, r28
    29d0:	e1 57       	subi	r30, 0x71	; 113
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d8:	de 01       	movw	r26, r28
    29da:	af 56       	subi	r26, 0x6F	; 111
    29dc:	bf 4f       	sbci	r27, 0xFF	; 255
    29de:	fe 01       	movw	r30, r28
    29e0:	ef 56       	subi	r30, 0x6F	; 111
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	11 96       	adiw	r26, 0x01	; 1
    29ec:	9c 93       	st	X, r25
    29ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	fe 01       	movw	r30, r28
    29f2:	ef 56       	subi	r30, 0x6F	; 111
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	d1 f6       	brne	.-76     	; 0x29b2 <main+0x6aa>
    29fe:	27 c0       	rjmp	.+78     	; 0x2a4e <main+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	8e 01       	movw	r16, r28
    2a02:	0f 56       	subi	r16, 0x6F	; 111
    2a04:	1f 4f       	sbci	r17, 0xFF	; 255
    2a06:	fe 01       	movw	r30, r28
    2a08:	ed 56       	subi	r30, 0x6D	; 109
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    2a22:	de 01       	movw	r26, r28
    2a24:	a3 57       	subi	r26, 0x73	; 115
    2a26:	bf 4f       	sbci	r27, 0xFF	; 255
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ef 56       	subi	r30, 0x6F	; 111
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	8d 93       	st	X+, r24
    2a34:	9c 93       	st	X, r25
    2a36:	fe 01       	movw	r30, r28
    2a38:	e3 57       	subi	r30, 0x73	; 115
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <main+0x738>
    2a44:	fe 01       	movw	r30, r28
    2a46:	e3 57       	subi	r30, 0x73	; 115
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e7 57       	subi	r30, 0x77	; 119
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	aa ef       	ldi	r26, 0xFA	; 250
    2a5a:	b3 e4       	ldi	r27, 0x43	; 67
    2a5c:	80 83       	st	Z, r24
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	a2 83       	std	Z+2, r26	; 0x02
    2a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a64:	8e 01       	movw	r16, r28
    2a66:	0b 57       	subi	r16, 0x7B	; 123
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 57       	subi	r30, 0x77	; 119
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	60 81       	ld	r22, Z
    2a72:	71 81       	ldd	r23, Z+1	; 0x01
    2a74:	82 81       	ldd	r24, Z+2	; 0x02
    2a76:	93 81       	ldd	r25, Z+3	; 0x03
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	4a e7       	ldi	r20, 0x7A	; 122
    2a7e:	53 e4       	ldi	r21, 0x43	; 67
    2a80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	f8 01       	movw	r30, r16
    2a8a:	80 83       	st	Z, r24
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	a2 83       	std	Z+2, r26	; 0x02
    2a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a92:	fe 01       	movw	r30, r28
    2a94:	eb 57       	subi	r30, 0x7B	; 123
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e8       	ldi	r20, 0x80	; 128
    2aa6:	5f e3       	ldi	r21, 0x3F	; 63
    2aa8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2aac:	88 23       	and	r24, r24
    2aae:	44 f4       	brge	.+16     	; 0x2ac0 <main+0x7b8>
		__ticks = 1;
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ed 57       	subi	r30, 0x7D	; 125
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	80 83       	st	Z, r24
    2abe:	64 c0       	rjmp	.+200    	; 0x2b88 <main+0x880>
	else if (__tmp > 65535)
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	eb 57       	subi	r30, 0x7B	; 123
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	3f ef       	ldi	r19, 0xFF	; 255
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	57 e4       	ldi	r21, 0x47	; 71
    2ad6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	0c f0       	brlt	.+2      	; 0x2ae0 <main+0x7d8>
    2ade:	43 c0       	rjmp	.+134    	; 0x2b66 <main+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e7 57       	subi	r30, 0x77	; 119
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	60 81       	ld	r22, Z
    2ae8:	71 81       	ldd	r23, Z+1	; 0x01
    2aea:	82 81       	ldd	r24, Z+2	; 0x02
    2aec:	93 81       	ldd	r25, Z+3	; 0x03
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e2       	ldi	r20, 0x20	; 32
    2af4:	51 e4       	ldi	r21, 0x41	; 65
    2af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8e 01       	movw	r16, r28
    2b00:	0d 57       	subi	r16, 0x7D	; 125
    2b02:	1f 4f       	sbci	r17, 0xFF	; 255
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	f8 01       	movw	r30, r16
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	1f c0       	rjmp	.+62     	; 0x2b56 <main+0x84e>
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ef 57       	subi	r30, 0x7F	; 127
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	89 e1       	ldi	r24, 0x19	; 25
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
    2b26:	fe 01       	movw	r30, r28
    2b28:	ef 57       	subi	r30, 0x7F	; 127
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <main+0x828>
    2b34:	fe 01       	movw	r30, r28
    2b36:	ef 57       	subi	r30, 0x7F	; 127
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	de 01       	movw	r26, r28
    2b40:	ad 57       	subi	r26, 0x7D	; 125
    2b42:	bf 4f       	sbci	r27, 0xFF	; 255
    2b44:	fe 01       	movw	r30, r28
    2b46:	ed 57       	subi	r30, 0x7D	; 125
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	11 96       	adiw	r26, 0x01	; 1
    2b52:	9c 93       	st	X, r25
    2b54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b56:	fe 01       	movw	r30, r28
    2b58:	ed 57       	subi	r30, 0x7D	; 125
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	d1 f6       	brne	.-76     	; 0x2b18 <main+0x810>
    2b64:	27 c0       	rjmp	.+78     	; 0x2bb4 <main+0x8ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b66:	8e 01       	movw	r16, r28
    2b68:	0d 57       	subi	r16, 0x7D	; 125
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	eb 57       	subi	r30, 0x7B	; 123
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	60 81       	ld	r22, Z
    2b74:	71 81       	ldd	r23, Z+1	; 0x01
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	f8 01       	movw	r30, r16
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	80 83       	st	Z, r24
    2b88:	de 01       	movw	r26, r28
    2b8a:	a1 58       	subi	r26, 0x81	; 129
    2b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8e:	fe 01       	movw	r30, r28
    2b90:	ed 57       	subi	r30, 0x7D	; 125
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	8d 93       	st	X+, r24
    2b9a:	9c 93       	st	X, r25
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e1 58       	subi	r30, 0x81	; 129
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <main+0x89e>
    2baa:	fe 01       	movw	r30, r28
    2bac:	e1 58       	subi	r30, 0x81	; 129
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e5 58       	subi	r30, 0x85	; 133
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	aa ef       	ldi	r26, 0xFA	; 250
    2bc0:	b3 e4       	ldi	r27, 0x43	; 67
    2bc2:	80 83       	st	Z, r24
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	a2 83       	std	Z+2, r26	; 0x02
    2bc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	8e 01       	movw	r16, r28
    2bcc:	09 58       	subi	r16, 0x89	; 137
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e5 58       	subi	r30, 0x85	; 133
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a e7       	ldi	r20, 0x7A	; 122
    2be4:	53 e4       	ldi	r21, 0x43	; 67
    2be6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	f8 01       	movw	r30, r16
    2bf0:	80 83       	st	Z, r24
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	a2 83       	std	Z+2, r26	; 0x02
    2bf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e9 58       	subi	r30, 0x89	; 137
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e8       	ldi	r20, 0x80	; 128
    2c0c:	5f e3       	ldi	r21, 0x3F	; 63
    2c0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	44 f4       	brge	.+16     	; 0x2c26 <main+0x91e>
		__ticks = 1;
    2c16:	fe 01       	movw	r30, r28
    2c18:	eb 58       	subi	r30, 0x8B	; 139
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	80 83       	st	Z, r24
    2c24:	64 c0       	rjmp	.+200    	; 0x2cee <main+0x9e6>
	else if (__tmp > 65535)
    2c26:	fe 01       	movw	r30, r28
    2c28:	e9 58       	subi	r30, 0x89	; 137
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	0c f0       	brlt	.+2      	; 0x2c46 <main+0x93e>
    2c44:	43 c0       	rjmp	.+134    	; 0x2ccc <main+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c46:	fe 01       	movw	r30, r28
    2c48:	e5 58       	subi	r30, 0x85	; 133
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e2       	ldi	r20, 0x20	; 32
    2c5a:	51 e4       	ldi	r21, 0x41	; 65
    2c5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8e 01       	movw	r16, r28
    2c66:	0b 58       	subi	r16, 0x8B	; 139
    2c68:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	f8 01       	movw	r30, r16
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	1f c0       	rjmp	.+62     	; 0x2cbc <main+0x9b4>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ed 58       	subi	r30, 0x8D	; 141
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	89 e1       	ldi	r24, 0x19	; 25
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 58       	subi	r30, 0x8D	; 141
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <main+0x98e>
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ed 58       	subi	r30, 0x8D	; 141
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca4:	de 01       	movw	r26, r28
    2ca6:	ab 58       	subi	r26, 0x8B	; 139
    2ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	eb 58       	subi	r30, 0x8B	; 139
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	91 81       	ldd	r25, Z+1	; 0x01
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	11 96       	adiw	r26, 0x01	; 1
    2cb8:	9c 93       	st	X, r25
    2cba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	eb 58       	subi	r30, 0x8B	; 139
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	d1 f6       	brne	.-76     	; 0x2c7e <main+0x976>
    2cca:	27 c0       	rjmp	.+78     	; 0x2d1a <main+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	0b 58       	subi	r16, 0x8B	; 139
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e9 58       	subi	r30, 0x89	; 137
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	f8 01       	movw	r30, r16
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	de 01       	movw	r26, r28
    2cf0:	af 58       	subi	r26, 0x8F	; 143
    2cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	eb 58       	subi	r30, 0x8B	; 139
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	8d 93       	st	X+, r24
    2d00:	9c 93       	st	X, r25
    2d02:	fe 01       	movw	r30, r28
    2d04:	ef 58       	subi	r30, 0x8F	; 143
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <main+0xa04>
    2d10:	fe 01       	movw	r30, r28
    2d12:	ef 58       	subi	r30, 0x8F	; 143
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
				_delay_ms(500);
			}
			_delay_ms(500);
			_delay_ms(500);
			Lcd_vidSendCommand(0x01);
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>
    2d20:	fe 01       	movw	r30, r28
    2d22:	e3 59       	subi	r30, 0x93	; 147
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a0 e0       	ldi	r26, 0x00	; 0
    2d2c:	b0 e4       	ldi	r27, 0x40	; 64
    2d2e:	80 83       	st	Z, r24
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	a2 83       	std	Z+2, r26	; 0x02
    2d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d36:	8e 01       	movw	r16, r28
    2d38:	07 59       	subi	r16, 0x97	; 151
    2d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e3 59       	subi	r30, 0x93	; 147
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	60 81       	ld	r22, Z
    2d44:	71 81       	ldd	r23, Z+1	; 0x01
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	4a e7       	ldi	r20, 0x7A	; 122
    2d50:	53 e4       	ldi	r21, 0x43	; 67
    2d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	80 83       	st	Z, r24
    2d5e:	91 83       	std	Z+1, r25	; 0x01
    2d60:	a2 83       	std	Z+2, r26	; 0x02
    2d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d64:	fe 01       	movw	r30, r28
    2d66:	e7 59       	subi	r30, 0x97	; 151
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	93 81       	ldd	r25, Z+3	; 0x03
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e8       	ldi	r20, 0x80	; 128
    2d78:	5f e3       	ldi	r21, 0x3F	; 63
    2d7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d7e:	88 23       	and	r24, r24
    2d80:	44 f4       	brge	.+16     	; 0x2d92 <main+0xa8a>
		__ticks = 1;
    2d82:	fe 01       	movw	r30, r28
    2d84:	e9 59       	subi	r30, 0x99	; 153
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	64 c0       	rjmp	.+200    	; 0x2e5a <main+0xb52>
	else if (__tmp > 65535)
    2d92:	fe 01       	movw	r30, r28
    2d94:	e7 59       	subi	r30, 0x97	; 151
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	60 81       	ld	r22, Z
    2d9a:	71 81       	ldd	r23, Z+1	; 0x01
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	3f ef       	ldi	r19, 0xFF	; 255
    2da4:	4f e7       	ldi	r20, 0x7F	; 127
    2da6:	57 e4       	ldi	r21, 0x47	; 71
    2da8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dac:	18 16       	cp	r1, r24
    2dae:	0c f0       	brlt	.+2      	; 0x2db2 <main+0xaaa>
    2db0:	43 c0       	rjmp	.+134    	; 0x2e38 <main+0xb30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	fe 01       	movw	r30, r28
    2db4:	e3 59       	subi	r30, 0x93	; 147
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	8e 01       	movw	r16, r28
    2dd2:	09 59       	subi	r16, 0x99	; 153
    2dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	f8 01       	movw	r30, r16
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	80 83       	st	Z, r24
    2de8:	1f c0       	rjmp	.+62     	; 0x2e28 <main+0xb20>
    2dea:	fe 01       	movw	r30, r28
    2dec:	eb 59       	subi	r30, 0x9B	; 155
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	89 e1       	ldi	r24, 0x19	; 25
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
    2df8:	fe 01       	movw	r30, r28
    2dfa:	eb 59       	subi	r30, 0x9B	; 155
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <main+0xafa>
    2e06:	fe 01       	movw	r30, r28
    2e08:	eb 59       	subi	r30, 0x9B	; 155
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	de 01       	movw	r26, r28
    2e12:	a9 59       	subi	r26, 0x99	; 153
    2e14:	bf 4f       	sbci	r27, 0xFF	; 255
    2e16:	fe 01       	movw	r30, r28
    2e18:	e9 59       	subi	r30, 0x99	; 153
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	11 96       	adiw	r26, 0x01	; 1
    2e24:	9c 93       	st	X, r25
    2e26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e9 59       	subi	r30, 0x99	; 153
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	d1 f6       	brne	.-76     	; 0x2dea <main+0xae2>
    2e36:	28 c0       	rjmp	.+80     	; 0x2e88 <main+0xb80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e38:	8e 01       	movw	r16, r28
    2e3a:	09 59       	subi	r16, 0x99	; 153
    2e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e7 59       	subi	r30, 0x97	; 151
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	f8 01       	movw	r30, r16
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	de 01       	movw	r26, r28
    2e5c:	ad 59       	subi	r26, 0x9D	; 157
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	e9 59       	subi	r30, 0x99	; 153
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	11 96       	adiw	r26, 0x01	; 1
    2e6c:	9c 93       	st	X, r25
    2e6e:	8e 93       	st	-X, r24
    2e70:	fe 01       	movw	r30, r28
    2e72:	ed 59       	subi	r30, 0x9D	; 157
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <main+0xb72>
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ed 59       	subi	r30, 0x9D	; 157
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	91 83       	std	Z+1, r25	; 0x01
    2e86:	80 83       	st	Z, r24

	Lcd_vidInit();
	s8 Count_row = 0,Count_column = 0;
	while(1)
	{
		for(;;Count_row = !Count_row,Count_column++)
    2e88:	ce 01       	movw	r24, r28
    2e8a:	8a 53       	subi	r24, 0x3A	; 58
    2e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8e:	c5 53       	subi	r28, 0x35	; 53
    2e90:	df 4f       	sbci	r29, 0xFF	; 255
    2e92:	99 83       	std	Y+1, r25	; 0x01
    2e94:	88 83       	st	Y, r24
    2e96:	cb 5c       	subi	r28, 0xCB	; 203
    2e98:	d0 40       	sbci	r29, 0x00	; 0
    2e9a:	c3 53       	subi	r28, 0x33	; 51
    2e9c:	df 4f       	sbci	r29, 0xFF	; 255
    2e9e:	18 82       	st	Y, r1
    2ea0:	cd 5c       	subi	r28, 0xCD	; 205
    2ea2:	d0 40       	sbci	r29, 0x00	; 0
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ea 53       	subi	r30, 0x3A	; 58
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	88 23       	and	r24, r24
    2eae:	31 f4       	brne	.+12     	; 0x2ebc <main+0xbb4>
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	c3 53       	subi	r28, 0x33	; 51
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	98 83       	st	Y, r25
    2eb8:	cd 5c       	subi	r28, 0xCD	; 205
    2eba:	d0 40       	sbci	r29, 0x00	; 0
    2ebc:	c3 53       	subi	r28, 0x33	; 51
    2ebe:	df 4f       	sbci	r29, 0xFF	; 255
    2ec0:	88 81       	ld	r24, Y
    2ec2:	cd 5c       	subi	r28, 0xCD	; 205
    2ec4:	d0 40       	sbci	r29, 0x00	; 0
    2ec6:	c5 53       	subi	r28, 0x35	; 53
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	e8 81       	ld	r30, Y
    2ecc:	f9 81       	ldd	r31, Y+1	; 0x01
    2ece:	cb 5c       	subi	r28, 0xCB	; 203
    2ed0:	d0 40       	sbci	r29, 0x00	; 0
    2ed2:	80 83       	st	Z, r24
    2ed4:	de 01       	movw	r26, r28
    2ed6:	ab 53       	subi	r26, 0x3B	; 59
    2ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eda:	fe 01       	movw	r30, r28
    2edc:	eb 53       	subi	r30, 0x3B	; 59
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	80 81       	ld	r24, Z
    2ee2:	8f 5f       	subi	r24, 0xFF	; 255
    2ee4:	8c 93       	st	X, r24
    2ee6:	27 ca       	rjmp	.-2994   	; 0x2336 <main+0x2e>
			Lcd_vidSendCommand(0x01);
			_delay_ms(2);
		}
		for(;;Count_row = !Count_row,Count_column--)
		{
			if(Count_column-3 >= 0 && Count_column-3 <= 15)
    2ee8:	fe 01       	movw	r30, r28
    2eea:	eb 53       	subi	r30, 0x3B	; 59
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	99 27       	eor	r25, r25
    2ef2:	87 fd       	sbrc	r24, 7
    2ef4:	90 95       	com	r25
    2ef6:	03 97       	sbiw	r24, 0x03	; 3
    2ef8:	99 23       	and	r25, r25
    2efa:	0c f4       	brge	.+2      	; 0x2efe <main+0xbf6>
    2efc:	e2 c0       	rjmp	.+452    	; 0x30c2 <main+0xdba>
    2efe:	fe 01       	movw	r30, r28
    2f00:	eb 53       	subi	r30, 0x3B	; 59
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 81       	ld	r24, Z
    2f06:	99 27       	eor	r25, r25
    2f08:	87 fd       	sbrc	r24, 7
    2f0a:	90 95       	com	r25
    2f0c:	03 97       	sbiw	r24, 0x03	; 3
    2f0e:	80 31       	cpi	r24, 0x10	; 16
    2f10:	91 05       	cpc	r25, r1
    2f12:	0c f0       	brlt	.+2      	; 0x2f16 <main+0xc0e>
    2f14:	d6 c0       	rjmp	.+428    	; 0x30c2 <main+0xdba>
			{
				Lcd_vidGoTo(!Count_row , Count_column-3);
    2f16:	c8 53       	subi	r28, 0x38	; 56
    2f18:	df 4f       	sbci	r29, 0xFF	; 255
    2f1a:	18 82       	st	Y, r1
    2f1c:	c8 5c       	subi	r28, 0xC8	; 200
    2f1e:	d0 40       	sbci	r29, 0x00	; 0
    2f20:	fe 01       	movw	r30, r28
    2f22:	ea 53       	subi	r30, 0x3A	; 58
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	88 23       	and	r24, r24
    2f2a:	31 f4       	brne	.+12     	; 0x2f38 <main+0xc30>
    2f2c:	91 e0       	ldi	r25, 0x01	; 1
    2f2e:	c8 53       	subi	r28, 0x38	; 56
    2f30:	df 4f       	sbci	r29, 0xFF	; 255
    2f32:	98 83       	st	Y, r25
    2f34:	c8 5c       	subi	r28, 0xC8	; 200
    2f36:	d0 40       	sbci	r29, 0x00	; 0
    2f38:	fe 01       	movw	r30, r28
    2f3a:	eb 53       	subi	r30, 0x3B	; 59
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	98 2f       	mov	r25, r24
    2f42:	93 50       	subi	r25, 0x03	; 3
    2f44:	c8 53       	subi	r28, 0x38	; 56
    2f46:	df 4f       	sbci	r29, 0xFF	; 255
    2f48:	88 81       	ld	r24, Y
    2f4a:	c8 5c       	subi	r28, 0xC8	; 200
    2f4c:	d0 40       	sbci	r29, 0x00	; 0
    2f4e:	69 2f       	mov	r22, r25
    2f50:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('A');
    2f54:	81 e4       	ldi	r24, 0x41	; 65
    2f56:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e1 5a       	subi	r30, 0xA1	; 161
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	aa ef       	ldi	r26, 0xFA	; 250
    2f66:	b3 e4       	ldi	r27, 0x43	; 67
    2f68:	80 83       	st	Z, r24
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	a2 83       	std	Z+2, r26	; 0x02
    2f6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	8e 01       	movw	r16, r28
    2f72:	05 5a       	subi	r16, 0xA5	; 165
    2f74:	1f 4f       	sbci	r17, 0xFF	; 255
    2f76:	fe 01       	movw	r30, r28
    2f78:	e1 5a       	subi	r30, 0xA1	; 161
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	60 81       	ld	r22, Z
    2f7e:	71 81       	ldd	r23, Z+1	; 0x01
    2f80:	82 81       	ldd	r24, Z+2	; 0x02
    2f82:	93 81       	ldd	r25, Z+3	; 0x03
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	4a e7       	ldi	r20, 0x7A	; 122
    2f8a:	53 e4       	ldi	r21, 0x43	; 67
    2f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	f8 01       	movw	r30, r16
    2f96:	80 83       	st	Z, r24
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	a2 83       	std	Z+2, r26	; 0x02
    2f9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e5 5a       	subi	r30, 0xA5	; 165
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	60 81       	ld	r22, Z
    2fa6:	71 81       	ldd	r23, Z+1	; 0x01
    2fa8:	82 81       	ldd	r24, Z+2	; 0x02
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	5f e3       	ldi	r21, 0x3F	; 63
    2fb4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fb8:	88 23       	and	r24, r24
    2fba:	44 f4       	brge	.+16     	; 0x2fcc <main+0xcc4>
		__ticks = 1;
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e7 5a       	subi	r30, 0xA7	; 167
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
    2fca:	64 c0       	rjmp	.+200    	; 0x3094 <main+0xd8c>
	else if (__tmp > 65535)
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e5 5a       	subi	r30, 0xA5	; 165
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	0c f0       	brlt	.+2      	; 0x2fec <main+0xce4>
    2fea:	43 c0       	rjmp	.+134    	; 0x3072 <main+0xd6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fec:	fe 01       	movw	r30, r28
    2fee:	e1 5a       	subi	r30, 0xA1	; 161
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8e 01       	movw	r16, r28
    300c:	07 5a       	subi	r16, 0xA7	; 167
    300e:	1f 4f       	sbci	r17, 0xFF	; 255
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	f8 01       	movw	r30, r16
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	80 83       	st	Z, r24
    3022:	1f c0       	rjmp	.+62     	; 0x3062 <main+0xd5a>
    3024:	fe 01       	movw	r30, r28
    3026:	e9 5a       	subi	r30, 0xA9	; 169
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	89 e1       	ldi	r24, 0x19	; 25
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
    3032:	fe 01       	movw	r30, r28
    3034:	e9 5a       	subi	r30, 0xA9	; 169
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <main+0xd34>
    3040:	fe 01       	movw	r30, r28
    3042:	e9 5a       	subi	r30, 0xA9	; 169
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	de 01       	movw	r26, r28
    304c:	a7 5a       	subi	r26, 0xA7	; 167
    304e:	bf 4f       	sbci	r27, 0xFF	; 255
    3050:	fe 01       	movw	r30, r28
    3052:	e7 5a       	subi	r30, 0xA7	; 167
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	11 96       	adiw	r26, 0x01	; 1
    305e:	9c 93       	st	X, r25
    3060:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	fe 01       	movw	r30, r28
    3064:	e7 5a       	subi	r30, 0xA7	; 167
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	d1 f6       	brne	.-76     	; 0x3024 <main+0xd1c>
    3070:	28 c0       	rjmp	.+80     	; 0x30c2 <main+0xdba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3072:	8e 01       	movw	r16, r28
    3074:	07 5a       	subi	r16, 0xA7	; 167
    3076:	1f 4f       	sbci	r17, 0xFF	; 255
    3078:	fe 01       	movw	r30, r28
    307a:	e5 5a       	subi	r30, 0xA5	; 165
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	60 81       	ld	r22, Z
    3080:	71 81       	ldd	r23, Z+1	; 0x01
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	93 81       	ldd	r25, Z+3	; 0x03
    3086:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	f8 01       	movw	r30, r16
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
    3094:	de 01       	movw	r26, r28
    3096:	ab 5a       	subi	r26, 0xAB	; 171
    3098:	bf 4f       	sbci	r27, 0xFF	; 255
    309a:	fe 01       	movw	r30, r28
    309c:	e7 5a       	subi	r30, 0xA7	; 167
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	9c 93       	st	X, r25
    30a8:	8e 93       	st	-X, r24
    30aa:	fe 01       	movw	r30, r28
    30ac:	eb 5a       	subi	r30, 0xAB	; 171
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <main+0xdac>
    30b8:	fe 01       	movw	r30, r28
    30ba:	eb 5a       	subi	r30, 0xAB	; 171
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
				_delay_ms(500);
			}
			if(Count_column-2 >= 0 && Count_column-2 <= 15)
    30c2:	fe 01       	movw	r30, r28
    30c4:	eb 53       	subi	r30, 0x3B	; 59
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	99 27       	eor	r25, r25
    30cc:	87 fd       	sbrc	r24, 7
    30ce:	90 95       	com	r25
    30d0:	02 97       	sbiw	r24, 0x02	; 2
    30d2:	99 23       	and	r25, r25
    30d4:	0c f4       	brge	.+2      	; 0x30d8 <main+0xdd0>
    30d6:	d1 c0       	rjmp	.+418    	; 0x327a <main+0xf72>
    30d8:	fe 01       	movw	r30, r28
    30da:	eb 53       	subi	r30, 0x3B	; 59
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 81       	ld	r24, Z
    30e0:	99 27       	eor	r25, r25
    30e2:	87 fd       	sbrc	r24, 7
    30e4:	90 95       	com	r25
    30e6:	02 97       	sbiw	r24, 0x02	; 2
    30e8:	80 31       	cpi	r24, 0x10	; 16
    30ea:	91 05       	cpc	r25, r1
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <main+0xde8>
    30ee:	c5 c0       	rjmp	.+394    	; 0x327a <main+0xf72>
			{
				Lcd_vidGoTo(Count_row , Count_column-2);
    30f0:	fe 01       	movw	r30, r28
    30f2:	ea 53       	subi	r30, 0x3A	; 58
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	20 81       	ld	r18, Z
    30f8:	fe 01       	movw	r30, r28
    30fa:	eb 53       	subi	r30, 0x3B	; 59
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	98 2f       	mov	r25, r24
    3102:	92 50       	subi	r25, 0x02	; 2
    3104:	82 2f       	mov	r24, r18
    3106:	69 2f       	mov	r22, r25
    3108:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('B');
    310c:	82 e4       	ldi	r24, 0x42	; 66
    310e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    3112:	fe 01       	movw	r30, r28
    3114:	ef 5a       	subi	r30, 0xAF	; 175
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	aa ef       	ldi	r26, 0xFA	; 250
    311e:	b3 e4       	ldi	r27, 0x43	; 67
    3120:	80 83       	st	Z, r24
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	a2 83       	std	Z+2, r26	; 0x02
    3126:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3128:	8e 01       	movw	r16, r28
    312a:	03 5b       	subi	r16, 0xB3	; 179
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	fe 01       	movw	r30, r28
    3130:	ef 5a       	subi	r30, 0xAF	; 175
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	60 81       	ld	r22, Z
    3136:	71 81       	ldd	r23, Z+1	; 0x01
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	93 81       	ldd	r25, Z+3	; 0x03
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4a e7       	ldi	r20, 0x7A	; 122
    3142:	53 e4       	ldi	r21, 0x43	; 67
    3144:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	f8 01       	movw	r30, r16
    314e:	80 83       	st	Z, r24
    3150:	91 83       	std	Z+1, r25	; 0x01
    3152:	a2 83       	std	Z+2, r26	; 0x02
    3154:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3156:	fe 01       	movw	r30, r28
    3158:	e3 5b       	subi	r30, 0xB3	; 179
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	44 f4       	brge	.+16     	; 0x3184 <main+0xe7c>
		__ticks = 1;
    3174:	fe 01       	movw	r30, r28
    3176:	e5 5b       	subi	r30, 0xB5	; 181
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
    3182:	64 c0       	rjmp	.+200    	; 0x324c <main+0xf44>
	else if (__tmp > 65535)
    3184:	fe 01       	movw	r30, r28
    3186:	e3 5b       	subi	r30, 0xB3	; 179
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	93 81       	ldd	r25, Z+3	; 0x03
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	3f ef       	ldi	r19, 0xFF	; 255
    3196:	4f e7       	ldi	r20, 0x7F	; 127
    3198:	57 e4       	ldi	r21, 0x47	; 71
    319a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    319e:	18 16       	cp	r1, r24
    31a0:	0c f0       	brlt	.+2      	; 0x31a4 <main+0xe9c>
    31a2:	43 c0       	rjmp	.+134    	; 0x322a <main+0xf22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	fe 01       	movw	r30, r28
    31a6:	ef 5a       	subi	r30, 0xAF	; 175
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e2       	ldi	r20, 0x20	; 32
    31b8:	51 e4       	ldi	r21, 0x41	; 65
    31ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8e 01       	movw	r16, r28
    31c4:	05 5b       	subi	r16, 0xB5	; 181
    31c6:	1f 4f       	sbci	r17, 0xFF	; 255
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	f8 01       	movw	r30, r16
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	1f c0       	rjmp	.+62     	; 0x321a <main+0xf12>
    31dc:	fe 01       	movw	r30, r28
    31de:	e7 5b       	subi	r30, 0xB7	; 183
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	89 e1       	ldi	r24, 0x19	; 25
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	80 83       	st	Z, r24
    31ea:	fe 01       	movw	r30, r28
    31ec:	e7 5b       	subi	r30, 0xB7	; 183
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <main+0xeec>
    31f8:	fe 01       	movw	r30, r28
    31fa:	e7 5b       	subi	r30, 0xB7	; 183
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3202:	de 01       	movw	r26, r28
    3204:	a5 5b       	subi	r26, 0xB5	; 181
    3206:	bf 4f       	sbci	r27, 0xFF	; 255
    3208:	fe 01       	movw	r30, r28
    320a:	e5 5b       	subi	r30, 0xB5	; 181
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	11 96       	adiw	r26, 0x01	; 1
    3216:	9c 93       	st	X, r25
    3218:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	fe 01       	movw	r30, r28
    321c:	e5 5b       	subi	r30, 0xB5	; 181
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	d1 f6       	brne	.-76     	; 0x31dc <main+0xed4>
    3228:	28 c0       	rjmp	.+80     	; 0x327a <main+0xf72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322a:	8e 01       	movw	r16, r28
    322c:	05 5b       	subi	r16, 0xB5	; 181
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	fe 01       	movw	r30, r28
    3232:	e3 5b       	subi	r30, 0xB3	; 179
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	f8 01       	movw	r30, r16
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
    324c:	de 01       	movw	r26, r28
    324e:	a9 5b       	subi	r26, 0xB9	; 185
    3250:	bf 4f       	sbci	r27, 0xFF	; 255
    3252:	fe 01       	movw	r30, r28
    3254:	e5 5b       	subi	r30, 0xB5	; 181
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	11 96       	adiw	r26, 0x01	; 1
    325e:	9c 93       	st	X, r25
    3260:	8e 93       	st	-X, r24
    3262:	fe 01       	movw	r30, r28
    3264:	e9 5b       	subi	r30, 0xB9	; 185
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	80 81       	ld	r24, Z
    326a:	91 81       	ldd	r25, Z+1	; 0x01
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <main+0xf64>
    3270:	fe 01       	movw	r30, r28
    3272:	e9 5b       	subi	r30, 0xB9	; 185
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
				_delay_ms(500);
			}
			if(Count_column-1 >= 0 && Count_column-1 <= 15)
    327a:	fe 01       	movw	r30, r28
    327c:	eb 53       	subi	r30, 0x3B	; 59
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 81       	ld	r24, Z
    3282:	99 27       	eor	r25, r25
    3284:	87 fd       	sbrc	r24, 7
    3286:	90 95       	com	r25
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	99 23       	and	r25, r25
    328c:	0c f4       	brge	.+2      	; 0x3290 <main+0xf88>
    328e:	b3 c0       	rjmp	.+358    	; 0x33f6 <main+0x10ee>
    3290:	fe 01       	movw	r30, r28
    3292:	eb 53       	subi	r30, 0x3B	; 59
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	80 81       	ld	r24, Z
    3298:	99 27       	eor	r25, r25
    329a:	87 fd       	sbrc	r24, 7
    329c:	90 95       	com	r25
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	80 31       	cpi	r24, 0x10	; 16
    32a2:	91 05       	cpc	r25, r1
    32a4:	0c f0       	brlt	.+2      	; 0x32a8 <main+0xfa0>
    32a6:	a7 c0       	rjmp	.+334    	; 0x33f6 <main+0x10ee>
			{
				Lcd_vidGoTo(!Count_row , Count_column-1);
    32a8:	c9 53       	subi	r28, 0x39	; 57
    32aa:	df 4f       	sbci	r29, 0xFF	; 255
    32ac:	18 82       	st	Y, r1
    32ae:	c7 5c       	subi	r28, 0xC7	; 199
    32b0:	d0 40       	sbci	r29, 0x00	; 0
    32b2:	fe 01       	movw	r30, r28
    32b4:	ea 53       	subi	r30, 0x3A	; 58
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	88 23       	and	r24, r24
    32bc:	31 f4       	brne	.+12     	; 0x32ca <main+0xfc2>
    32be:	f1 e0       	ldi	r31, 0x01	; 1
    32c0:	c9 53       	subi	r28, 0x39	; 57
    32c2:	df 4f       	sbci	r29, 0xFF	; 255
    32c4:	f8 83       	st	Y, r31
    32c6:	c7 5c       	subi	r28, 0xC7	; 199
    32c8:	d0 40       	sbci	r29, 0x00	; 0
    32ca:	fe 01       	movw	r30, r28
    32cc:	eb 53       	subi	r30, 0x3B	; 59
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	98 2f       	mov	r25, r24
    32d4:	91 50       	subi	r25, 0x01	; 1
    32d6:	c9 53       	subi	r28, 0x39	; 57
    32d8:	df 4f       	sbci	r29, 0xFF	; 255
    32da:	88 81       	ld	r24, Y
    32dc:	c7 5c       	subi	r28, 0xC7	; 199
    32de:	d0 40       	sbci	r29, 0x00	; 0
    32e0:	69 2f       	mov	r22, r25
    32e2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('D');
    32e6:	84 e4       	ldi	r24, 0x44	; 68
    32e8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    32ec:	fe 01       	movw	r30, r28
    32ee:	ed 5b       	subi	r30, 0xBD	; 189
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	aa ef       	ldi	r26, 0xFA	; 250
    32f8:	b3 e4       	ldi	r27, 0x43	; 67
    32fa:	80 83       	st	Z, r24
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	a2 83       	std	Z+2, r26	; 0x02
    3300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3302:	8e 01       	movw	r16, r28
    3304:	01 5c       	subi	r16, 0xC1	; 193
    3306:	1f 4f       	sbci	r17, 0xFF	; 255
    3308:	fe 01       	movw	r30, r28
    330a:	ed 5b       	subi	r30, 0xBD	; 189
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	60 81       	ld	r22, Z
    3310:	71 81       	ldd	r23, Z+1	; 0x01
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	93 81       	ldd	r25, Z+3	; 0x03
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4a e7       	ldi	r20, 0x7A	; 122
    331c:	53 e4       	ldi	r21, 0x43	; 67
    331e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	f8 01       	movw	r30, r16
    3328:	80 83       	st	Z, r24
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	a2 83       	std	Z+2, r26	; 0x02
    332e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3330:	fe 01       	movw	r30, r28
    3332:	ff 96       	adiw	r30, 0x3f	; 63
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	2c f4       	brge	.+10     	; 0x3356 <main+0x104e>
		__ticks = 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9e af       	std	Y+62, r25	; 0x3e
    3352:	8d af       	std	Y+61, r24	; 0x3d
    3354:	46 c0       	rjmp	.+140    	; 0x33e2 <main+0x10da>
	else if (__tmp > 65535)
    3356:	fe 01       	movw	r30, r28
    3358:	ff 96       	adiw	r30, 0x3f	; 63
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	3f ef       	ldi	r19, 0xFF	; 255
    3366:	4f e7       	ldi	r20, 0x7F	; 127
    3368:	57 e4       	ldi	r21, 0x47	; 71
    336a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    336e:	18 16       	cp	r1, r24
    3370:	64 f5       	brge	.+88     	; 0x33ca <main+0x10c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3372:	fe 01       	movw	r30, r28
    3374:	ed 5b       	subi	r30, 0xBD	; 189
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e2       	ldi	r20, 0x20	; 32
    3386:	51 e4       	ldi	r21, 0x41	; 65
    3388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9e af       	std	Y+62, r25	; 0x3e
    339e:	8d af       	std	Y+61, r24	; 0x3d
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <main+0x10b8>
    33a2:	89 e1       	ldi	r24, 0x19	; 25
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	9c af       	std	Y+60, r25	; 0x3c
    33a8:	8b af       	std	Y+59, r24	; 0x3b
    33aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    33ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <main+0x10a6>
    33b2:	9c af       	std	Y+60, r25	; 0x3c
    33b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    33b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	9e af       	std	Y+62, r25	; 0x3e
    33be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    33c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	69 f7       	brne	.-38     	; 0x33a2 <main+0x109a>
    33c8:	16 c0       	rjmp	.+44     	; 0x33f6 <main+0x10ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ca:	fe 01       	movw	r30, r28
    33cc:	ff 96       	adiw	r30, 0x3f	; 63
    33ce:	60 81       	ld	r22, Z
    33d0:	71 81       	ldd	r23, Z+1	; 0x01
    33d2:	82 81       	ldd	r24, Z+2	; 0x02
    33d4:	93 81       	ldd	r25, Z+3	; 0x03
    33d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9e af       	std	Y+62, r25	; 0x3e
    33e0:	8d af       	std	Y+61, r24	; 0x3d
    33e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    33e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    33e6:	9a af       	std	Y+58, r25	; 0x3a
    33e8:	89 af       	std	Y+57, r24	; 0x39
    33ea:	89 ad       	ldd	r24, Y+57	; 0x39
    33ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <main+0x10e6>
    33f2:	9a af       	std	Y+58, r25	; 0x3a
    33f4:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
			}
			if(Count_column >= 0 && Count_column <= 15)
    33f6:	fe 01       	movw	r30, r28
    33f8:	eb 53       	subi	r30, 0x3B	; 59
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	88 23       	and	r24, r24
    3400:	0c f4       	brge	.+2      	; 0x3404 <main+0x10fc>
    3402:	87 c0       	rjmp	.+270    	; 0x3512 <main+0x120a>
    3404:	fe 01       	movw	r30, r28
    3406:	eb 53       	subi	r30, 0x3B	; 59
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	80 81       	ld	r24, Z
    340c:	80 31       	cpi	r24, 0x10	; 16
    340e:	0c f0       	brlt	.+2      	; 0x3412 <main+0x110a>
    3410:	80 c0       	rjmp	.+256    	; 0x3512 <main+0x120a>
			{
				Lcd_vidGoTo(Count_row , Count_column);
    3412:	fe 01       	movw	r30, r28
    3414:	ea 53       	subi	r30, 0x3A	; 58
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	80 81       	ld	r24, Z
    341a:	fe 01       	movw	r30, r28
    341c:	eb 53       	subi	r30, 0x3B	; 59
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	90 81       	ld	r25, Z
    3422:	69 2f       	mov	r22, r25
    3424:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <Lcd_vidGoTo>
				Lcd_vidWriteChar('O');
    3428:	8f e4       	ldi	r24, 0x4F	; 79
    342a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Lcd_vidWriteChar>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	aa ef       	ldi	r26, 0xFA	; 250
    3434:	b3 e4       	ldi	r27, 0x43	; 67
    3436:	8d ab       	std	Y+53, r24	; 0x35
    3438:	9e ab       	std	Y+54, r25	; 0x36
    343a:	af ab       	std	Y+55, r26	; 0x37
    343c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343e:	6d a9       	ldd	r22, Y+53	; 0x35
    3440:	7e a9       	ldd	r23, Y+54	; 0x36
    3442:	8f a9       	ldd	r24, Y+55	; 0x37
    3444:	98 ad       	ldd	r25, Y+56	; 0x38
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	4a e7       	ldi	r20, 0x7A	; 122
    344c:	53 e4       	ldi	r21, 0x43	; 67
    344e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	89 ab       	std	Y+49, r24	; 0x31
    3458:	9a ab       	std	Y+50, r25	; 0x32
    345a:	ab ab       	std	Y+51, r26	; 0x33
    345c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    345e:	69 a9       	ldd	r22, Y+49	; 0x31
    3460:	7a a9       	ldd	r23, Y+50	; 0x32
    3462:	8b a9       	ldd	r24, Y+51	; 0x33
    3464:	9c a9       	ldd	r25, Y+52	; 0x34
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e8       	ldi	r20, 0x80	; 128
    346c:	5f e3       	ldi	r21, 0x3F	; 63
    346e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3472:	88 23       	and	r24, r24
    3474:	2c f4       	brge	.+10     	; 0x3480 <main+0x1178>
		__ticks = 1;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	98 ab       	std	Y+48, r25	; 0x30
    347c:	8f a7       	std	Y+47, r24	; 0x2f
    347e:	3f c0       	rjmp	.+126    	; 0x34fe <main+0x11f6>
	else if (__tmp > 65535)
    3480:	69 a9       	ldd	r22, Y+49	; 0x31
    3482:	7a a9       	ldd	r23, Y+50	; 0x32
    3484:	8b a9       	ldd	r24, Y+51	; 0x33
    3486:	9c a9       	ldd	r25, Y+52	; 0x34
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	3f ef       	ldi	r19, 0xFF	; 255
    348c:	4f e7       	ldi	r20, 0x7F	; 127
    348e:	57 e4       	ldi	r21, 0x47	; 71
    3490:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3494:	18 16       	cp	r1, r24
    3496:	4c f5       	brge	.+82     	; 0x34ea <main+0x11e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3498:	6d a9       	ldd	r22, Y+53	; 0x35
    349a:	7e a9       	ldd	r23, Y+54	; 0x36
    349c:	8f a9       	ldd	r24, Y+55	; 0x37
    349e:	98 ad       	ldd	r25, Y+56	; 0x38
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e2       	ldi	r20, 0x20	; 32
    34a6:	51 e4       	ldi	r21, 0x41	; 65
    34a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	98 ab       	std	Y+48, r25	; 0x30
    34be:	8f a7       	std	Y+47, r24	; 0x2f
    34c0:	0f c0       	rjmp	.+30     	; 0x34e0 <main+0x11d8>
    34c2:	89 e1       	ldi	r24, 0x19	; 25
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	9e a7       	std	Y+46, r25	; 0x2e
    34c8:	8d a7       	std	Y+45, r24	; 0x2d
    34ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    34cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <main+0x11c6>
    34d2:	9e a7       	std	Y+46, r25	; 0x2e
    34d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d8:	98 a9       	ldd	r25, Y+48	; 0x30
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	98 ab       	std	Y+48, r25	; 0x30
    34de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34e2:	98 a9       	ldd	r25, Y+48	; 0x30
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	69 f7       	brne	.-38     	; 0x34c2 <main+0x11ba>
    34e8:	14 c0       	rjmp	.+40     	; 0x3512 <main+0x120a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ea:	69 a9       	ldd	r22, Y+49	; 0x31
    34ec:	7a a9       	ldd	r23, Y+50	; 0x32
    34ee:	8b a9       	ldd	r24, Y+51	; 0x33
    34f0:	9c a9       	ldd	r25, Y+52	; 0x34
    34f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	98 ab       	std	Y+48, r25	; 0x30
    34fc:	8f a7       	std	Y+47, r24	; 0x2f
    34fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3500:	98 a9       	ldd	r25, Y+48	; 0x30
    3502:	9c a7       	std	Y+44, r25	; 0x2c
    3504:	8b a7       	std	Y+43, r24	; 0x2b
    3506:	8b a5       	ldd	r24, Y+43	; 0x2b
    3508:	9c a5       	ldd	r25, Y+44	; 0x2c
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <main+0x1202>
    350e:	9c a7       	std	Y+44, r25	; 0x2c
    3510:	8b a7       	std	Y+43, r24	; 0x2b
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	aa ef       	ldi	r26, 0xFA	; 250
    3518:	b3 e4       	ldi	r27, 0x43	; 67
    351a:	8f a3       	std	Y+39, r24	; 0x27
    351c:	98 a7       	std	Y+40, r25	; 0x28
    351e:	a9 a7       	std	Y+41, r26	; 0x29
    3520:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3522:	6f a1       	ldd	r22, Y+39	; 0x27
    3524:	78 a5       	ldd	r23, Y+40	; 0x28
    3526:	89 a5       	ldd	r24, Y+41	; 0x29
    3528:	9a a5       	ldd	r25, Y+42	; 0x2a
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	4a e7       	ldi	r20, 0x7A	; 122
    3530:	53 e4       	ldi	r21, 0x43	; 67
    3532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	8b a3       	std	Y+35, r24	; 0x23
    353c:	9c a3       	std	Y+36, r25	; 0x24
    353e:	ad a3       	std	Y+37, r26	; 0x25
    3540:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3542:	6b a1       	ldd	r22, Y+35	; 0x23
    3544:	7c a1       	ldd	r23, Y+36	; 0x24
    3546:	8d a1       	ldd	r24, Y+37	; 0x25
    3548:	9e a1       	ldd	r25, Y+38	; 0x26
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 e8       	ldi	r20, 0x80	; 128
    3550:	5f e3       	ldi	r21, 0x3F	; 63
    3552:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3556:	88 23       	and	r24, r24
    3558:	2c f4       	brge	.+10     	; 0x3564 <main+0x125c>
		__ticks = 1;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	9a a3       	std	Y+34, r25	; 0x22
    3560:	89 a3       	std	Y+33, r24	; 0x21
    3562:	3f c0       	rjmp	.+126    	; 0x35e2 <main+0x12da>
	else if (__tmp > 65535)
    3564:	6b a1       	ldd	r22, Y+35	; 0x23
    3566:	7c a1       	ldd	r23, Y+36	; 0x24
    3568:	8d a1       	ldd	r24, Y+37	; 0x25
    356a:	9e a1       	ldd	r25, Y+38	; 0x26
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	3f ef       	ldi	r19, 0xFF	; 255
    3570:	4f e7       	ldi	r20, 0x7F	; 127
    3572:	57 e4       	ldi	r21, 0x47	; 71
    3574:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3578:	18 16       	cp	r1, r24
    357a:	4c f5       	brge	.+82     	; 0x35ce <main+0x12c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357c:	6f a1       	ldd	r22, Y+39	; 0x27
    357e:	78 a5       	ldd	r23, Y+40	; 0x28
    3580:	89 a5       	ldd	r24, Y+41	; 0x29
    3582:	9a a5       	ldd	r25, Y+42	; 0x2a
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e2       	ldi	r20, 0x20	; 32
    358a:	51 e4       	ldi	r21, 0x41	; 65
    358c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	bc 01       	movw	r22, r24
    3596:	cd 01       	movw	r24, r26
    3598:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	9a a3       	std	Y+34, r25	; 0x22
    35a2:	89 a3       	std	Y+33, r24	; 0x21
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <main+0x12bc>
    35a6:	89 e1       	ldi	r24, 0x19	; 25
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	98 a3       	std	Y+32, r25	; 0x20
    35ac:	8f 8f       	std	Y+31, r24	; 0x1f
    35ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b0:	98 a1       	ldd	r25, Y+32	; 0x20
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <main+0x12aa>
    35b6:	98 a3       	std	Y+32, r25	; 0x20
    35b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ba:	89 a1       	ldd	r24, Y+33	; 0x21
    35bc:	9a a1       	ldd	r25, Y+34	; 0x22
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	9a a3       	std	Y+34, r25	; 0x22
    35c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c4:	89 a1       	ldd	r24, Y+33	; 0x21
    35c6:	9a a1       	ldd	r25, Y+34	; 0x22
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	69 f7       	brne	.-38     	; 0x35a6 <main+0x129e>
    35cc:	14 c0       	rjmp	.+40     	; 0x35f6 <main+0x12ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ce:	6b a1       	ldd	r22, Y+35	; 0x23
    35d0:	7c a1       	ldd	r23, Y+36	; 0x24
    35d2:	8d a1       	ldd	r24, Y+37	; 0x25
    35d4:	9e a1       	ldd	r25, Y+38	; 0x26
    35d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	9a a3       	std	Y+34, r25	; 0x22
    35e0:	89 a3       	std	Y+33, r24	; 0x21
    35e2:	89 a1       	ldd	r24, Y+33	; 0x21
    35e4:	9a a1       	ldd	r25, Y+34	; 0x22
    35e6:	9e 8f       	std	Y+30, r25	; 0x1e
    35e8:	8d 8f       	std	Y+29, r24	; 0x1d
    35ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <main+0x12e6>
    35f2:	9e 8f       	std	Y+30, r25	; 0x1e
    35f4:	8d 8f       	std	Y+29, r24	; 0x1d
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	aa ef       	ldi	r26, 0xFA	; 250
    35fc:	b3 e4       	ldi	r27, 0x43	; 67
    35fe:	89 8f       	std	Y+25, r24	; 0x19
    3600:	9a 8f       	std	Y+26, r25	; 0x1a
    3602:	ab 8f       	std	Y+27, r26	; 0x1b
    3604:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3606:	69 8d       	ldd	r22, Y+25	; 0x19
    3608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    360a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    360c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	4a e7       	ldi	r20, 0x7A	; 122
    3614:	53 e4       	ldi	r21, 0x43	; 67
    3616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	8d 8b       	std	Y+21, r24	; 0x15
    3620:	9e 8b       	std	Y+22, r25	; 0x16
    3622:	af 8b       	std	Y+23, r26	; 0x17
    3624:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3626:	6d 89       	ldd	r22, Y+21	; 0x15
    3628:	7e 89       	ldd	r23, Y+22	; 0x16
    362a:	8f 89       	ldd	r24, Y+23	; 0x17
    362c:	98 8d       	ldd	r25, Y+24	; 0x18
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e8       	ldi	r20, 0x80	; 128
    3634:	5f e3       	ldi	r21, 0x3F	; 63
    3636:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    363a:	88 23       	and	r24, r24
    363c:	2c f4       	brge	.+10     	; 0x3648 <main+0x1340>
		__ticks = 1;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9c 8b       	std	Y+20, r25	; 0x14
    3644:	8b 8b       	std	Y+19, r24	; 0x13
    3646:	3f c0       	rjmp	.+126    	; 0x36c6 <main+0x13be>
	else if (__tmp > 65535)
    3648:	6d 89       	ldd	r22, Y+21	; 0x15
    364a:	7e 89       	ldd	r23, Y+22	; 0x16
    364c:	8f 89       	ldd	r24, Y+23	; 0x17
    364e:	98 8d       	ldd	r25, Y+24	; 0x18
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	3f ef       	ldi	r19, 0xFF	; 255
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	57 e4       	ldi	r21, 0x47	; 71
    3658:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    365c:	18 16       	cp	r1, r24
    365e:	4c f5       	brge	.+82     	; 0x36b2 <main+0x13aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3660:	69 8d       	ldd	r22, Y+25	; 0x19
    3662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e2       	ldi	r20, 0x20	; 32
    366e:	51 e4       	ldi	r21, 0x41	; 65
    3670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	bc 01       	movw	r22, r24
    367a:	cd 01       	movw	r24, r26
    367c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	9c 8b       	std	Y+20, r25	; 0x14
    3686:	8b 8b       	std	Y+19, r24	; 0x13
    3688:	0f c0       	rjmp	.+30     	; 0x36a8 <main+0x13a0>
    368a:	89 e1       	ldi	r24, 0x19	; 25
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	9a 8b       	std	Y+18, r25	; 0x12
    3690:	89 8b       	std	Y+17, r24	; 0x11
    3692:	89 89       	ldd	r24, Y+17	; 0x11
    3694:	9a 89       	ldd	r25, Y+18	; 0x12
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <main+0x138e>
    369a:	9a 8b       	std	Y+18, r25	; 0x12
    369c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369e:	8b 89       	ldd	r24, Y+19	; 0x13
    36a0:	9c 89       	ldd	r25, Y+20	; 0x14
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	9c 8b       	std	Y+20, r25	; 0x14
    36a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a8:	8b 89       	ldd	r24, Y+19	; 0x13
    36aa:	9c 89       	ldd	r25, Y+20	; 0x14
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	69 f7       	brne	.-38     	; 0x368a <main+0x1382>
    36b0:	14 c0       	rjmp	.+40     	; 0x36da <main+0x13d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b2:	6d 89       	ldd	r22, Y+21	; 0x15
    36b4:	7e 89       	ldd	r23, Y+22	; 0x16
    36b6:	8f 89       	ldd	r24, Y+23	; 0x17
    36b8:	98 8d       	ldd	r25, Y+24	; 0x18
    36ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	9c 8b       	std	Y+20, r25	; 0x14
    36c4:	8b 8b       	std	Y+19, r24	; 0x13
    36c6:	8b 89       	ldd	r24, Y+19	; 0x13
    36c8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ca:	98 8b       	std	Y+16, r25	; 0x10
    36cc:	8f 87       	std	Y+15, r24	; 0x0f
    36ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d0:	98 89       	ldd	r25, Y+16	; 0x10
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	f1 f7       	brne	.-4      	; 0x36d2 <main+0x13ca>
    36d6:	98 8b       	std	Y+16, r25	; 0x10
    36d8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
			}
			_delay_ms(500);
			_delay_ms(500);
			Lcd_vidSendCommand(0x01);
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_vidSendCommand>
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	a0 e0       	ldi	r26, 0x00	; 0
    36e6:	b0 e4       	ldi	r27, 0x40	; 64
    36e8:	8b 87       	std	Y+11, r24	; 0x0b
    36ea:	9c 87       	std	Y+12, r25	; 0x0c
    36ec:	ad 87       	std	Y+13, r26	; 0x0d
    36ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a e7       	ldi	r20, 0x7A	; 122
    36fe:	53 e4       	ldi	r21, 0x43	; 67
    3700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	8f 83       	std	Y+7, r24	; 0x07
    370a:	98 87       	std	Y+8, r25	; 0x08
    370c:	a9 87       	std	Y+9, r26	; 0x09
    370e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e8       	ldi	r20, 0x80	; 128
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3724:	88 23       	and	r24, r24
    3726:	2c f4       	brge	.+10     	; 0x3732 <main+0x142a>
		__ticks = 1;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9e 83       	std	Y+6, r25	; 0x06
    372e:	8d 83       	std	Y+5, r24	; 0x05
    3730:	3f c0       	rjmp	.+126    	; 0x37b0 <main+0x14a8>
	else if (__tmp > 65535)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3746:	18 16       	cp	r1, r24
    3748:	4c f5       	brge	.+82     	; 0x379c <main+0x1494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	6b 85       	ldd	r22, Y+11	; 0x0b
    374c:	7c 85       	ldd	r23, Y+12	; 0x0c
    374e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3750:	9e 85       	ldd	r25, Y+14	; 0x0e
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <main+0x148a>
    3774:	89 e1       	ldi	r24, 0x19	; 25
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9c 83       	std	Y+4, r25	; 0x04
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <main+0x1478>
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	69 f7       	brne	.-38     	; 0x3774 <main+0x146c>
    379a:	14 c0       	rjmp	.+40     	; 0x37c4 <main+0x14bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	9a 83       	std	Y+2, r25	; 0x02
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <main+0x14b4>
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			if(Count_column-3 == 1)
    37c4:	fe 01       	movw	r30, r28
    37c6:	eb 53       	subi	r30, 0x3B	; 59
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	80 81       	ld	r24, Z
    37cc:	84 30       	cpi	r24, 0x04	; 4
    37ce:	69 f5       	brne	.+90     	; 0x382a <main+0x1522>
			{
				Count_row = !Count_row;
    37d0:	ce 01       	movw	r24, r28
    37d2:	8a 53       	subi	r24, 0x3A	; 58
    37d4:	9f 4f       	sbci	r25, 0xFF	; 255
    37d6:	c2 53       	subi	r28, 0x32	; 50
    37d8:	df 4f       	sbci	r29, 0xFF	; 255
    37da:	99 83       	std	Y+1, r25	; 0x01
    37dc:	88 83       	st	Y, r24
    37de:	ce 5c       	subi	r28, 0xCE	; 206
    37e0:	d0 40       	sbci	r29, 0x00	; 0
    37e2:	c0 53       	subi	r28, 0x30	; 48
    37e4:	df 4f       	sbci	r29, 0xFF	; 255
    37e6:	18 82       	st	Y, r1
    37e8:	c0 5d       	subi	r28, 0xD0	; 208
    37ea:	d0 40       	sbci	r29, 0x00	; 0
    37ec:	fe 01       	movw	r30, r28
    37ee:	ea 53       	subi	r30, 0x3A	; 58
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	80 81       	ld	r24, Z
    37f4:	88 23       	and	r24, r24
    37f6:	31 f4       	brne	.+12     	; 0x3804 <main+0x14fc>
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	c0 53       	subi	r28, 0x30	; 48
    37fc:	df 4f       	sbci	r29, 0xFF	; 255
    37fe:	98 83       	st	Y, r25
    3800:	c0 5d       	subi	r28, 0xD0	; 208
    3802:	d0 40       	sbci	r29, 0x00	; 0
    3804:	c0 53       	subi	r28, 0x30	; 48
    3806:	df 4f       	sbci	r29, 0xFF	; 255
    3808:	88 81       	ld	r24, Y
    380a:	c0 5d       	subi	r28, 0xD0	; 208
    380c:	d0 40       	sbci	r29, 0x00	; 0
    380e:	c2 53       	subi	r28, 0x32	; 50
    3810:	df 4f       	sbci	r29, 0xFF	; 255
    3812:	e8 81       	ld	r30, Y
    3814:	f9 81       	ldd	r31, Y+1	; 0x01
    3816:	ce 5c       	subi	r28, 0xCE	; 206
    3818:	d0 40       	sbci	r29, 0x00	; 0
    381a:	80 83       	st	Z, r24
				Count_column = 3;
    381c:	fe 01       	movw	r30, r28
    381e:	eb 53       	subi	r30, 0x3B	; 59
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	83 e0       	ldi	r24, 0x03	; 3
    3824:	80 83       	st	Z, r24
    3826:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <main+0x2e>
			_delay_ms(500);
			_delay_ms(500);
			Lcd_vidSendCommand(0x01);
			_delay_ms(2);
		}
		for(;;Count_row = !Count_row,Count_column--)
    382a:	fe 01       	movw	r30, r28
    382c:	ea 53       	subi	r30, 0x3A	; 58
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	cf 52       	subi	r28, 0x2F	; 47
    3832:	df 4f       	sbci	r29, 0xFF	; 255
    3834:	f9 83       	std	Y+1, r31	; 0x01
    3836:	e8 83       	st	Y, r30
    3838:	c1 5d       	subi	r28, 0xD1	; 209
    383a:	d0 40       	sbci	r29, 0x00	; 0
    383c:	cd 52       	subi	r28, 0x2D	; 45
    383e:	df 4f       	sbci	r29, 0xFF	; 255
    3840:	18 82       	st	Y, r1
    3842:	c3 5d       	subi	r28, 0xD3	; 211
    3844:	d0 40       	sbci	r29, 0x00	; 0
    3846:	fe 01       	movw	r30, r28
    3848:	ea 53       	subi	r30, 0x3A	; 58
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	88 23       	and	r24, r24
    3850:	31 f4       	brne	.+12     	; 0x385e <main+0x1556>
    3852:	f1 e0       	ldi	r31, 0x01	; 1
    3854:	cd 52       	subi	r28, 0x2D	; 45
    3856:	df 4f       	sbci	r29, 0xFF	; 255
    3858:	f8 83       	st	Y, r31
    385a:	c3 5d       	subi	r28, 0xD3	; 211
    385c:	d0 40       	sbci	r29, 0x00	; 0
    385e:	cd 52       	subi	r28, 0x2D	; 45
    3860:	df 4f       	sbci	r29, 0xFF	; 255
    3862:	88 81       	ld	r24, Y
    3864:	c3 5d       	subi	r28, 0xD3	; 211
    3866:	d0 40       	sbci	r29, 0x00	; 0
    3868:	cf 52       	subi	r28, 0x2F	; 47
    386a:	df 4f       	sbci	r29, 0xFF	; 255
    386c:	e8 81       	ld	r30, Y
    386e:	f9 81       	ldd	r31, Y+1	; 0x01
    3870:	c1 5d       	subi	r28, 0xD1	; 209
    3872:	d0 40       	sbci	r29, 0x00	; 0
    3874:	80 83       	st	Z, r24
    3876:	de 01       	movw	r26, r28
    3878:	ab 53       	subi	r26, 0x3B	; 59
    387a:	bf 4f       	sbci	r27, 0xFF	; 255
    387c:	fe 01       	movw	r30, r28
    387e:	eb 53       	subi	r30, 0x3B	; 59
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 81       	ld	r24, Z
    3884:	81 50       	subi	r24, 0x01	; 1
    3886:	8c 93       	st	X, r24
    3888:	2f cb       	rjmp	.-2466   	; 0x2ee8 <main+0xbe0>

0000388a <__prologue_saves__>:
    388a:	2f 92       	push	r2
    388c:	3f 92       	push	r3
    388e:	4f 92       	push	r4
    3890:	5f 92       	push	r5
    3892:	6f 92       	push	r6
    3894:	7f 92       	push	r7
    3896:	8f 92       	push	r8
    3898:	9f 92       	push	r9
    389a:	af 92       	push	r10
    389c:	bf 92       	push	r11
    389e:	cf 92       	push	r12
    38a0:	df 92       	push	r13
    38a2:	ef 92       	push	r14
    38a4:	ff 92       	push	r15
    38a6:	0f 93       	push	r16
    38a8:	1f 93       	push	r17
    38aa:	cf 93       	push	r28
    38ac:	df 93       	push	r29
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	ca 1b       	sub	r28, r26
    38b4:	db 0b       	sbc	r29, r27
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	09 94       	ijmp

000038c2 <__epilogue_restores__>:
    38c2:	2a 88       	ldd	r2, Y+18	; 0x12
    38c4:	39 88       	ldd	r3, Y+17	; 0x11
    38c6:	48 88       	ldd	r4, Y+16	; 0x10
    38c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    38ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    38cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    38ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    38d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    38d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d4:	b9 84       	ldd	r11, Y+9	; 0x09
    38d6:	c8 84       	ldd	r12, Y+8	; 0x08
    38d8:	df 80       	ldd	r13, Y+7	; 0x07
    38da:	ee 80       	ldd	r14, Y+6	; 0x06
    38dc:	fd 80       	ldd	r15, Y+5	; 0x05
    38de:	0c 81       	ldd	r16, Y+4	; 0x04
    38e0:	1b 81       	ldd	r17, Y+3	; 0x03
    38e2:	aa 81       	ldd	r26, Y+2	; 0x02
    38e4:	b9 81       	ldd	r27, Y+1	; 0x01
    38e6:	ce 0f       	add	r28, r30
    38e8:	d1 1d       	adc	r29, r1
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	ed 01       	movw	r28, r26
    38f6:	08 95       	ret

000038f8 <_exit>:
    38f8:	f8 94       	cli

000038fa <__stop_program>:
    38fa:	ff cf       	rjmp	.-2      	; 0x38fa <__stop_program>
